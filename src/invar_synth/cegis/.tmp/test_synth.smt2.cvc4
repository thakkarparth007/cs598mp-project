
(set-logic ALL)

(set-option :random-seed 123)

(declare-sort ModelId 0)
(declare-sort StateId 0)
(declare-sort Node 0)
(declare-sort Epoch 0)

(declare-fun Node!val!0 () Node)
(declare-fun Node!val!2 () Node)
(declare-fun Node!val!1 () Node)

(declare-fun Epoch!val!0 () Epoch)
(declare-fun Epoch!val!1 () Epoch)
(declare-fun Epoch!val!2 () Epoch)
(declare-fun Epoch!val!3 () Epoch)

(declare-fun Model_M16_trace_pos () ModelId)
(declare-fun Model_M14_trace_pos () ModelId)
(declare-fun Model_M25_trace_pos () ModelId)
(declare-fun Model_M18_trace_pos () ModelId)
(declare-fun Model_M21_trace_pos () ModelId)
(declare-fun Model_M30_trace_pos () ModelId)
(declare-fun Model_M43_trace_pos () ModelId)
(declare-fun Model_M9_trace_pos () ModelId)
(declare-fun Model_M4_trace_pos () ModelId)
(declare-fun Model_M36_trace_pos () ModelId)
(declare-fun Model_M13_trace_pos () ModelId)
(declare-fun Model_M34_trace_pos () ModelId)
(declare-fun Model_M7_trace_pos () ModelId)
(declare-fun Model_M22_trace_pos () ModelId)
(declare-fun Model_M19_trace_pos () ModelId)
(declare-fun Model_M0_trace_pos () ModelId)
(declare-fun Model_M28_trace_pos () ModelId)
(declare-fun Model_M44_trace_pos () ModelId)
(declare-fun Model_M37_trace_pos () ModelId)
(declare-fun Model_M6_trace_pos () ModelId)
(declare-fun Model_0_pos () ModelId)
(declare-fun Model_M49_trace_pos () ModelId)
(declare-fun Model_M39_trace_pos () ModelId)
(declare-fun Model_M27_trace_pos () ModelId)
(declare-fun Model_M46_trace_pos () ModelId)
(declare-fun Model_M33_trace_pos () ModelId)
(declare-fun Model_M15_trace_pos () ModelId)
(declare-fun Model_M29_trace_pos () ModelId)
(declare-fun Model_M3_trace_pos () ModelId)
(declare-fun Model_M45_trace_pos () ModelId)
(declare-fun Model_M23_trace_pos () ModelId)
(declare-fun Model_M11_trace_pos () ModelId)
(declare-fun Model_M41_trace_pos () ModelId)
(declare-fun Model_M1_trace_pos () ModelId)
(declare-fun Model_M48_trace_pos () ModelId)
(declare-fun Model_M38_trace_pos () ModelId)
(declare-fun Model_M20_trace_pos () ModelId)
(declare-fun Model_M17_trace_pos () ModelId)
(declare-fun Model_M35_trace_pos () ModelId)
(declare-fun Model_2_neg () ModelId)
(declare-fun Model_M31_trace_pos () ModelId)
(declare-fun Model_M32_trace_pos () ModelId)
(declare-fun Model_M2_trace_pos () ModelId)
(declare-fun Model_M12_trace_pos () ModelId)
(declare-fun Model_M5_trace_pos () ModelId)
(declare-fun Model_M42_trace_pos () ModelId)
(declare-fun Model_M40_trace_pos () ModelId)
(declare-fun Model_M47_trace_pos () ModelId)
(declare-fun Model_M26_trace_pos () ModelId)
(declare-fun Model_M8_trace_pos () ModelId)
(declare-fun Model_M10_trace_pos () ModelId)
(declare-fun Model_M24_trace_pos () ModelId)

(declare-fun S1 () StateId)
(declare-fun init () StateId)


(declare-fun held (ModelId StateId Node) Bool)
(declare-fun locked (ModelId StateId Epoch Node) Bool)
(declare-fun transfer (ModelId StateId Epoch Node) Bool)
(declare-fun ep (ModelId StateId Node) Epoch)
(declare-fun le (ModelId Epoch Epoch) Bool)
(declare-fun zero (ModelId) Epoch)
(declare-fun one (ModelId) Epoch)
(declare-fun first (ModelId) Node)


;Declaring boolean variables to encode grammar
(declare-const inv_b0 Bool)
(declare-const inv_b1 Bool)
(declare-const inv_b2 Bool)
(declare-const inv_b3 Bool)
(declare-const inv_b4 Bool)
(declare-const inv_b5 Bool)
(declare-const inv_b6 Bool)
(declare-const inv_b7 Bool)
(declare-const inv_b8 Bool)
(declare-const inv_b9 Bool)
(declare-const inv_b10 Bool)
(declare-const inv_b11 Bool)
(declare-const inv_b12 Bool)
(declare-const inv_b13 Bool)
(declare-const inv_b14 Bool)
(declare-const inv_b15 Bool)
(declare-const inv_b16 Bool)
(declare-const inv_b17 Bool)
(declare-const inv_b18 Bool)
(declare-const inv_b19 Bool)
(declare-const inv_b20 Bool)
(declare-const inv_b21 Bool)
(declare-const inv_b22 Bool)
(declare-const inv_b23 Bool)
(declare-const inv_b24 Bool)
(declare-const inv_b25 Bool)
(declare-const inv_b26 Bool)
(declare-const inv_b27 Bool)
(declare-const inv_b28 Bool)
(declare-const inv_b29 Bool)
(declare-const inv_b30 Bool)
(declare-const inv_b31 Bool)
(declare-const inv_b32 Bool)
(declare-const inv_b33 Bool)
(declare-const inv_b34 Bool)
(declare-const inv_b35 Bool)
(declare-const inv_b36 Bool)
(declare-const inv_b37 Bool)
(declare-const inv_b38 Bool)
(declare-const inv_b39 Bool)
(declare-const inv_b40 Bool)
(declare-const inv_b41 Bool)
(declare-const inv_b42 Bool)
(declare-const inv_b43 Bool)
(declare-const inv_b44 Bool)
(declare-const inv_b45 Bool)
(declare-const inv_b46 Bool)
(declare-const inv_b47 Bool)
(declare-const inv_b48 Bool)
(declare-const inv_b49 Bool)
(declare-const inv_b50 Bool)
(declare-const inv_b51 Bool)
(declare-const inv_b52 Bool)
(declare-const inv_b53 Bool)
(declare-const inv_b54 Bool)
(declare-const inv_b55 Bool)
(declare-const inv_b56 Bool)
(declare-const inv_b57 Bool)
(declare-const inv_b58 Bool)
(declare-const inv_b59 Bool)
(declare-const inv_b60 Bool)
(declare-const inv_b61 Bool)
(declare-const inv_b62 Bool)
(declare-const inv_b63 Bool)
(declare-const inv_b64 Bool)
(declare-const inv_b65 Bool)
(declare-const inv_b66 Bool)
(declare-const inv_b67 Bool)
(declare-const inv_b68 Bool)
(declare-const inv_b69 Bool)
(declare-const inv_b70 Bool)
(declare-const inv_b71 Bool)
(declare-const inv_b72 Bool)
(declare-const inv_b73 Bool)
(declare-const inv_b74 Bool)
(declare-const inv_b75 Bool)
(declare-const inv_b76 Bool)
(declare-const inv_b77 Bool)
(declare-const inv_b78 Bool)
(declare-const inv_b79 Bool)
(declare-const inv_b80 Bool)
(declare-const inv_b81 Bool)
(declare-const inv_b82 Bool)
(declare-const inv_b83 Bool)
(declare-const inv_b84 Bool)
(declare-const inv_b85 Bool)
(declare-const inv_b86 Bool)
(declare-const inv_b87 Bool)
(declare-const inv_b88 Bool)
(declare-const inv_b89 Bool)
(declare-const inv_b90 Bool)
(declare-const inv_b91 Bool)
(declare-const inv_b92 Bool)
(declare-const inv_b93 Bool)
(declare-const inv_b94 Bool)
(declare-const inv_b95 Bool)
(declare-const inv_b96 Bool)
(declare-const inv_b97 Bool)
(declare-const inv_b98 Bool)
(declare-const inv_b99 Bool)
(declare-const inv_b100 Bool)
(declare-const inv_b101 Bool)
(declare-const inv_b102 Bool)
(declare-const inv_b103 Bool)
(declare-const inv_b104 Bool)
(declare-const inv_b105 Bool)
(declare-const inv_b106 Bool)
(declare-const inv_b107 Bool)
(declare-const inv_b108 Bool)
(declare-const inv_b109 Bool)
(declare-const inv_b110 Bool)
(declare-const inv_b111 Bool)
(declare-const inv_b112 Bool)
(declare-const inv_b113 Bool)
(declare-const inv_b114 Bool)
(declare-const inv_b115 Bool)
(declare-const inv_b116 Bool)
(declare-const inv_b117 Bool)
(declare-const inv_b118 Bool)
(declare-const inv_b119 Bool)
(declare-const inv_b120 Bool)
(declare-const inv_b121 Bool)
(declare-const inv_b122 Bool)
(declare-const inv_b123 Bool)
(declare-const inv_b124 Bool)
(declare-const inv_b125 Bool)
(declare-const inv_b126 Bool)
(declare-const inv_b127 Bool)
(declare-const inv_b128 Bool)
(declare-const inv_b129 Bool)
(declare-const inv_b130 Bool)
(declare-const inv_b131 Bool)
(declare-const inv_b132 Bool)
(declare-const inv_b133 Bool)
(declare-const inv_b134 Bool)
(declare-const inv_b135 Bool)
(declare-const inv_b136 Bool)
(declare-const inv_b137 Bool)
(declare-const inv_b138 Bool)
(declare-const inv_b139 Bool)
(declare-const inv_b140 Bool)
(declare-const inv_b141 Bool)
(declare-const inv_b142 Bool)
(declare-const inv_b143 Bool)
(declare-const inv_b144 Bool)
(declare-const inv_b145 Bool)
(declare-const inv_b146 Bool)
(declare-const inv_b147 Bool)
(declare-const inv_b148 Bool)
(declare-const inv_b149 Bool)
(declare-const inv_b150 Bool)
(declare-const inv_b151 Bool)
(declare-const inv_b152 Bool)
(declare-const inv_b153 Bool)
(declare-const inv_b154 Bool)
(declare-const inv_b155 Bool)
(declare-const inv_b156 Bool)
(declare-const inv_b157 Bool)
(declare-const inv_b158 Bool)
(declare-const inv_b159 Bool)
(declare-const inv_b160 Bool)
(declare-const inv_b161 Bool)
(declare-const inv_b162 Bool)
(declare-const inv_b163 Bool)
(declare-const inv_b164 Bool)
(declare-const inv_b165 Bool)
(declare-const inv_b166 Bool)
(declare-const inv_b167 Bool)
(declare-const inv_b168 Bool)
(declare-const inv_b169 Bool)
(declare-const inv_b170 Bool)
(declare-const inv_b171 Bool)
(declare-const inv_b172 Bool)
(declare-const inv_b173 Bool)
(declare-const inv_b174 Bool)
(declare-const inv_b175 Bool)
(declare-const inv_b176 Bool)
(declare-const inv_b177 Bool)
(declare-const inv_b178 Bool)
(declare-const inv_b179 Bool)
(declare-const inv_b180 Bool)
(declare-const inv_b181 Bool)
(declare-const inv_b182 Bool)
(declare-const inv_b183 Bool)
(declare-const inv_b184 Bool)
(declare-const inv_b185 Bool)
(declare-const inv_b186 Bool)
(declare-const inv_b187 Bool)
(declare-const inv_b188 Bool)
(declare-const inv_b189 Bool)
(declare-const inv_b190 Bool)
(declare-const inv_b191 Bool)
(declare-const inv_b192 Bool)
(declare-const inv_b193 Bool)
(declare-const inv_b194 Bool)
(declare-const inv_b195 Bool)
(declare-const inv_b196 Bool)
(declare-const inv_b197 Bool)
(declare-const inv_b198 Bool)
(declare-const inv_b199 Bool)
(declare-const inv_b200 Bool)
(declare-const inv_b201 Bool)
(declare-const inv_b202 Bool)
(declare-const inv_b203 Bool)
(declare-const inv_b204 Bool)
(declare-const inv_b205 Bool)
(declare-const inv_b206 Bool)
(declare-const inv_b207 Bool)
(declare-const inv_b208 Bool)
(declare-const inv_b209 Bool)
(declare-const inv_b210 Bool)
(declare-const inv_b211 Bool)
(declare-const inv_b212 Bool)
(declare-const inv_b213 Bool)
(declare-const inv_b214 Bool)
(declare-const inv_b215 Bool)
(declare-const inv_b216 Bool)
(declare-const inv_b217 Bool)
(declare-const inv_b218 Bool)
(declare-const inv_b219 Bool)
(declare-const inv_b220 Bool)
(declare-const inv_b221 Bool)
(declare-const inv_b222 Bool)
(declare-const inv_b223 Bool)
(declare-const inv_b224 Bool)
(declare-const inv_b225 Bool)
(declare-const inv_b226 Bool)
(declare-const inv_b227 Bool)
(declare-const inv_b228 Bool)
(declare-const inv_b229 Bool)
(declare-const inv_b230 Bool)
(declare-const inv_b231 Bool)
(declare-const inv_b232 Bool)
(declare-const inv_b233 Bool)
(declare-const inv_b234 Bool)
(declare-const inv_b235 Bool)
(declare-const inv_b236 Bool)
(declare-const inv_b237 Bool)
(declare-const inv_b238 Bool)
(declare-const inv_b239 Bool)
(declare-const inv_b240 Bool)
(declare-const inv_b241 Bool)
(declare-const inv_b242 Bool)
(declare-const inv_b243 Bool)
(declare-const inv_b244 Bool)
(declare-const inv_b245 Bool)
(declare-const inv_b246 Bool)
(declare-const inv_b247 Bool)
(declare-const inv_b248 Bool)
(declare-const inv_b249 Bool)
(declare-const inv_b250 Bool)
(declare-const inv_b251 Bool)
(declare-const inv_b252 Bool)
(declare-const inv_b253 Bool)
(declare-const inv_b254 Bool)
(declare-const inv_b255 Bool)
(declare-const inv_b256 Bool)
(declare-const inv_b257 Bool)
(declare-const inv_b258 Bool)
(declare-const inv_b259 Bool)
(declare-const inv_b260 Bool)
(declare-const inv_b261 Bool)
(declare-const inv_b262 Bool)
(declare-const inv_b263 Bool)
(declare-const inv_b264 Bool)
(declare-const inv_b265 Bool)
(declare-const inv_b266 Bool)
(declare-const inv_b267 Bool)
(declare-const inv_b268 Bool)
(declare-const inv_b269 Bool)
(declare-const inv_b270 Bool)
(declare-const inv_b271 Bool)
(declare-const inv_b272 Bool)
(declare-const inv_b273 Bool)
(declare-const inv_b274 Bool)
(declare-const inv_b275 Bool)
(declare-const inv_b276 Bool)
(declare-const inv_b277 Bool)
(declare-const inv_b278 Bool)
(declare-const inv_b279 Bool)
(declare-const inv_b280 Bool)
(declare-const inv_b281 Bool)
(declare-const inv_b282 Bool)
(declare-const inv_b283 Bool)
(declare-const inv_b284 Bool)
(declare-const inv_b285 Bool)
(declare-const inv_b286 Bool)
(declare-const inv_b287 Bool)
(declare-const inv_b288 Bool)
(declare-const inv_b289 Bool)
(declare-const inv_b290 Bool)
(declare-const inv_b291 Bool)
(declare-const inv_b292 Bool)
(declare-const inv_b293 Bool)
(declare-const inv_b294 Bool)
(declare-const inv_b295 Bool)
(declare-const inv_b296 Bool)
(declare-const inv_b297 Bool)
(declare-const inv_b298 Bool)
(declare-const inv_b299 Bool)
(declare-const inv_b300 Bool)
(declare-const inv_b301 Bool)
(declare-const inv_b302 Bool)
(declare-const inv_b303 Bool)
(declare-const inv_b304 Bool)
(declare-const inv_b305 Bool)
(declare-const inv_b306 Bool)
(declare-const inv_b307 Bool)
(declare-const inv_b308 Bool)
(declare-const inv_b309 Bool)
(declare-const inv_b310 Bool)
(declare-const inv_b311 Bool)
(declare-const inv_b312 Bool)
(declare-const inv_b313 Bool)
(declare-const inv_b314 Bool)
(declare-const inv_b315 Bool)
(declare-const inv_b316 Bool)
(declare-const inv_b317 Bool)
(declare-const inv_b318 Bool)
(declare-const inv_b319 Bool)
(declare-const inv_b320 Bool)
(declare-const inv_b321 Bool)
(declare-const inv_b322 Bool)
(declare-const inv_b323 Bool)
(declare-const inv_b324 Bool)
(declare-const inv_b325 Bool)
(declare-const inv_b326 Bool)
(declare-const inv_b327 Bool)
(declare-const inv_b328 Bool)
(declare-const inv_b329 Bool)
(declare-const inv_b330 Bool)
(declare-const inv_b331 Bool)
(declare-const inv_b332 Bool)
(declare-const inv_b333 Bool)
(declare-const inv_b334 Bool)
(declare-const inv_b335 Bool)
(declare-const inv_b336 Bool)
(declare-const inv_b337 Bool)
(declare-const inv_b338 Bool)
(declare-const inv_b339 Bool)
(declare-const inv_b340 Bool)
(declare-const inv_b341 Bool)
(declare-const inv_b342 Bool)
(declare-const inv_b343 Bool)
(declare-const inv_b344 Bool)
(declare-const inv_b345 Bool)
(declare-const inv_b346 Bool)
(declare-const inv_b347 Bool)
(declare-const inv_b348 Bool)
(declare-const inv_b349 Bool)
(declare-const inv_b350 Bool)
(declare-const inv_b351 Bool)
(declare-const inv_b352 Bool)
(declare-const inv_b353 Bool)
(declare-const inv_b354 Bool)
(declare-const inv_b355 Bool)
(declare-const inv_b356 Bool)
(declare-const inv_b357 Bool)
(declare-const inv_b358 Bool)
(declare-const inv_b359 Bool)
(declare-const inv_b360 Bool)
(declare-const inv_b361 Bool)
(declare-const inv_b362 Bool)
(declare-const inv_b363 Bool)
(declare-const inv_b364 Bool)
(declare-const inv_b365 Bool)
(declare-const inv_b366 Bool)
(declare-const inv_b367 Bool)
(declare-const inv_b368 Bool)
(declare-const inv_b369 Bool)
(declare-const inv_b370 Bool)
(declare-const inv_b371 Bool)
(declare-const inv_b372 Bool)
(declare-const inv_b373 Bool)
(declare-const inv_b374 Bool)
(declare-const inv_b375 Bool)
(declare-const inv_b376 Bool)
(declare-const inv_b377 Bool)
(declare-const inv_b378 Bool)
(declare-const inv_b379 Bool)
(declare-const inv_b380 Bool)
(declare-const inv_b381 Bool)
(declare-const inv_b382 Bool)
(declare-const inv_b383 Bool)
(declare-const inv_b384 Bool)
(declare-const inv_b385 Bool)
(declare-const inv_b386 Bool)
(declare-const inv_b387 Bool)
(declare-const inv_b388 Bool)
(declare-const inv_b389 Bool)
(declare-const inv_b390 Bool)
(declare-const inv_b391 Bool)
(declare-const inv_b392 Bool)
(declare-const inv_b393 Bool)
(declare-const inv_b394 Bool)
(declare-const inv_b395 Bool)
(declare-const inv_b396 Bool)
(declare-const inv_b397 Bool)
(declare-const inv_b398 Bool)
(declare-const inv_b399 Bool)
(declare-const inv_b400 Bool)
(declare-const inv_b401 Bool)
(declare-const inv_b402 Bool)
(declare-const inv_b403 Bool)
(declare-const inv_b404 Bool)
(declare-const inv_b405 Bool)
(declare-const inv_b406 Bool)
(declare-const inv_b407 Bool)
(declare-const inv_b408 Bool)
(declare-const inv_b409 Bool)
(declare-const inv_b410 Bool)
(declare-const inv_b411 Bool)
(declare-const inv_b412 Bool)
(declare-const inv_b413 Bool)
(declare-const inv_b414 Bool)
(declare-const inv_b415 Bool)
(declare-const inv_b416 Bool)
(declare-const inv_b417 Bool)
(declare-const inv_b418 Bool)
(declare-const inv_b419 Bool)
(declare-const inv_b420 Bool)
(declare-const inv_b421 Bool)
(declare-const inv_b422 Bool)
(declare-const inv_b423 Bool)
(declare-const inv_b424 Bool)
(declare-const inv_b425 Bool)
(declare-const inv_b426 Bool)
(declare-const inv_b427 Bool)
(declare-const inv_b428 Bool)
(declare-const inv_b429 Bool)
(declare-const inv_b430 Bool)
(declare-const inv_b431 Bool)
(declare-const inv_b432 Bool)
(declare-const inv_b433 Bool)
(declare-const inv_b434 Bool)
(declare-const inv_b435 Bool)
(declare-const inv_b436 Bool)
(declare-const inv_b437 Bool)
(declare-const inv_b438 Bool)
(declare-const inv_b439 Bool)
(declare-const inv_b440 Bool)
(declare-const inv_b441 Bool)
(declare-const inv_b442 Bool)
(declare-const inv_b443 Bool)
(declare-const inv_b444 Bool)
(declare-const inv_b445 Bool)
(declare-const inv_b446 Bool)
(declare-const inv_b447 Bool)
(declare-const inv_b448 Bool)
(declare-const inv_b449 Bool)
(declare-const inv_b450 Bool)
(declare-const inv_b451 Bool)
(declare-const inv_b452 Bool)
(declare-const inv_b453 Bool)
(declare-const inv_b454 Bool)
(declare-const inv_b455 Bool)
(declare-const inv_b456 Bool)
(declare-const inv_b457 Bool)
(declare-const inv_b458 Bool)
(declare-const inv_b459 Bool)
(declare-const inv_b460 Bool)
(declare-const inv_b461 Bool)
(declare-const inv_b462 Bool)
(declare-const inv_b463 Bool)
(declare-const inv_b464 Bool)
(declare-const inv_b465 Bool)
(declare-const inv_b466 Bool)
(declare-const inv_b467 Bool)
(declare-const inv_b468 Bool)
(declare-const inv_b469 Bool)
(declare-const inv_b470 Bool)
(declare-const inv_b471 Bool)
(declare-const inv_b472 Bool)
(declare-const inv_b473 Bool)
(declare-const inv_b474 Bool)
(declare-const inv_b475 Bool)
(declare-const inv_b476 Bool)
(declare-const inv_b477 Bool)
(declare-const inv_b478 Bool)
(declare-const inv_b479 Bool)
(declare-const inv_b480 Bool)
(declare-const inv_b481 Bool)
(declare-const inv_b482 Bool)
(declare-const inv_b483 Bool)
(declare-const inv_b484 Bool)
(declare-const inv_b485 Bool)
(declare-const inv_b486 Bool)
(declare-const inv_b487 Bool)
(declare-const inv_b488 Bool)
(declare-const inv_b489 Bool)
(declare-const inv_b490 Bool)
(declare-const inv_b491 Bool)
(declare-const inv_b492 Bool)
(declare-const inv_b493 Bool)
(declare-const inv_b494 Bool)
(declare-const inv_b495 Bool)
(declare-const inv_b496 Bool)
(declare-const inv_b497 Bool)
(declare-const inv_b498 Bool)
(declare-const inv_b499 Bool)
(declare-const inv_b500 Bool)
(declare-const inv_b501 Bool)
(declare-const inv_b502 Bool)
(declare-const inv_b503 Bool)
(declare-const inv_b504 Bool)
(declare-const inv_b505 Bool)
(declare-const inv_b506 Bool)
(declare-const inv_b507 Bool)
(declare-const inv_b508 Bool)
(declare-const inv_b509 Bool)
(declare-const inv_b510 Bool)
(declare-const inv_b511 Bool)
(declare-const inv_b512 Bool)
(declare-const inv_b513 Bool)
(declare-const inv_b514 Bool)
(declare-const inv_b515 Bool)
(declare-const inv_b516 Bool)
(declare-const inv_b517 Bool)
(declare-const inv_b518 Bool)
(declare-const inv_b519 Bool)
(declare-const inv_b520 Bool)
(declare-const inv_b521 Bool)
(declare-const inv_b522 Bool)
(declare-const inv_b523 Bool)
(declare-const inv_b524 Bool)
(declare-const inv_b525 Bool)
(declare-const inv_b526 Bool)
(declare-const inv_b527 Bool)
(declare-const inv_b528 Bool)
(declare-const inv_b529 Bool)
(declare-const inv_b530 Bool)
(declare-const inv_b531 Bool)
(declare-const inv_b532 Bool)
(declare-const inv_b533 Bool)
(declare-const inv_b534 Bool)
(declare-const inv_b535 Bool)
(declare-const inv_b536 Bool)
(declare-const inv_b537 Bool)
(declare-const inv_b538 Bool)
(declare-const inv_b539 Bool)
(declare-const inv_b540 Bool)
(declare-const inv_b541 Bool)
(declare-const inv_b542 Bool)
(declare-const inv_b543 Bool)
(declare-const inv_b544 Bool)
(declare-const inv_b545 Bool)
(declare-const inv_b546 Bool)
(declare-const inv_b547 Bool)
(declare-const inv_b548 Bool)
(declare-const inv_b549 Bool)
(declare-const inv_b550 Bool)
(declare-const inv_b551 Bool)
(declare-const inv_b552 Bool)
(declare-const inv_b553 Bool)
(declare-const inv_b554 Bool)
(declare-const inv_b555 Bool)
(declare-const inv_b556 Bool)
(declare-const inv_b557 Bool)
(declare-const inv_b558 Bool)
(declare-const inv_b559 Bool)
(declare-const inv_b560 Bool)
(declare-const inv_b561 Bool)
(declare-const inv_b562 Bool)
(declare-const inv_b563 Bool)
(declare-const inv_b564 Bool)
(declare-const inv_b565 Bool)
(declare-const inv_b566 Bool)
(declare-const inv_b567 Bool)
(declare-const inv_b568 Bool)
(declare-const inv_b569 Bool)
(declare-const inv_b570 Bool)
(declare-const inv_b571 Bool)
(declare-const inv_b572 Bool)
(declare-const inv_b573 Bool)
(declare-const inv_b574 Bool)
(declare-const inv_b575 Bool)
(declare-const inv_b576 Bool)
(declare-const inv_b577 Bool)
(declare-const inv_b578 Bool)
(declare-const inv_b579 Bool)
(declare-const inv_b580 Bool)
(declare-const inv_b581 Bool)
(declare-const inv_b582 Bool)
(declare-const inv_b583 Bool)
(declare-const inv_b584 Bool)
(declare-const inv_b585 Bool)
(declare-const inv_b586 Bool)
(declare-const inv_b587 Bool)
(declare-const inv_b588 Bool)
(declare-const inv_b589 Bool)
(declare-const inv_b590 Bool)
(declare-const inv_b591 Bool)
(declare-const inv_b592 Bool)
(declare-const inv_b593 Bool)
(declare-const inv_b594 Bool)
(declare-const inv_b595 Bool)
(declare-const inv_b596 Bool)
(declare-const inv_b597 Bool)
(declare-const inv_b598 Bool)
(declare-const inv_b599 Bool)
(declare-const inv_b600 Bool)
(declare-const inv_b601 Bool)
(declare-const inv_b602 Bool)
(declare-const inv_b603 Bool)
(declare-const inv_b604 Bool)
(declare-const inv_b605 Bool)
(declare-const inv_b606 Bool)
(declare-const inv_b607 Bool)
(declare-const inv_b608 Bool)
(declare-const inv_b609 Bool)
(declare-const inv_b610 Bool)
(declare-const inv_b611 Bool)
(declare-const inv_b612 Bool)
(declare-const inv_b613 Bool)
(declare-const inv_b614 Bool)
(declare-const inv_b615 Bool)
(declare-const inv_b616 Bool)
(declare-const inv_b617 Bool)
(declare-const inv_b618 Bool)
(declare-const inv_b619 Bool)
(declare-const inv_b620 Bool)
(declare-const inv_b621 Bool)
(declare-const inv_b622 Bool)
(declare-const inv_b623 Bool)
(declare-const inv_b624 Bool)
(declare-const inv_b625 Bool)
(declare-const inv_b626 Bool)
(declare-const inv_b627 Bool)
(declare-const inv_b628 Bool)
(declare-const inv_b629 Bool)
(declare-const inv_b630 Bool)
(declare-const inv_b631 Bool)
(declare-const inv_b632 Bool)
(declare-const inv_b633 Bool)
(declare-const inv_b634 Bool)
(declare-const inv_b635 Bool)
(declare-const inv_b636 Bool)
(declare-const inv_b637 Bool)
(declare-const inv_b638 Bool)
(declare-const inv_b639 Bool)
(declare-const inv_b640 Bool)
(declare-const inv_b641 Bool)
(declare-const inv_b642 Bool)
(declare-const inv_b643 Bool)
(declare-const inv_b644 Bool)
(declare-const inv_b645 Bool)
(declare-const inv_b646 Bool)
(declare-const inv_b647 Bool)
(declare-const inv_b648 Bool)
(declare-const inv_b649 Bool)
(declare-const inv_b650 Bool)
(declare-const inv_b651 Bool)
(declare-const inv_b652 Bool)
(declare-const inv_b653 Bool)
(declare-const inv_b654 Bool)
(declare-const inv_b655 Bool)
(declare-const inv_b656 Bool)
(declare-const inv_b657 Bool)
(declare-const inv_b658 Bool)
(declare-const inv_b659 Bool)
(declare-const inv_b660 Bool)
(declare-const inv_b661 Bool)
(declare-const inv_b662 Bool)
(declare-const inv_b663 Bool)
(declare-const inv_b664 Bool)
(declare-const inv_b665 Bool)
(declare-const inv_b666 Bool)
(declare-const inv_b667 Bool)
(declare-const inv_b668 Bool)
(declare-const inv_b669 Bool)
(declare-const inv_b670 Bool)
(declare-const inv_b671 Bool)
(declare-const inv_b672 Bool)
(declare-const inv_b673 Bool)
(declare-const inv_b674 Bool)
(declare-const inv_b675 Bool)
(declare-const inv_b676 Bool)
(declare-const inv_b677 Bool)
(declare-const inv_b678 Bool)
(declare-const inv_b679 Bool)
(declare-const inv_b680 Bool)
(declare-const inv_b681 Bool)
(declare-const inv_b682 Bool)
(declare-const inv_b683 Bool)
(declare-const inv_b684 Bool)
(declare-const inv_b685 Bool)
(declare-const inv_b686 Bool)
(declare-const inv_b687 Bool)
(declare-const inv_b688 Bool)
(declare-const inv_b689 Bool)
(declare-const inv_b690 Bool)
(declare-const inv_b691 Bool)
(declare-const inv_b692 Bool)
(declare-const inv_b693 Bool)
(declare-const inv_b694 Bool)
(declare-const inv_b695 Bool)
(declare-const inv_b696 Bool)
(declare-const inv_b697 Bool)
(declare-const inv_b698 Bool)
(declare-const inv_b699 Bool)
(declare-const inv_b700 Bool)
(declare-const inv_b701 Bool)
(declare-const inv_b702 Bool)
(declare-const inv_b703 Bool)
(declare-const inv_b704 Bool)
(declare-const inv_b705 Bool)
(declare-const inv_b706 Bool)
(declare-const inv_b707 Bool)
(declare-const inv_b708 Bool)
(declare-const inv_b709 Bool)
(declare-const inv_b710 Bool)
(declare-const inv_b711 Bool)
(declare-const inv_b712 Bool)
(declare-const inv_b713 Bool)
(declare-const inv_b714 Bool)
(declare-const inv_b715 Bool)
(declare-const inv_b716 Bool)
(declare-const inv_b717 Bool)
(declare-const inv_b718 Bool)
(declare-const inv_b719 Bool)
(declare-const inv_b720 Bool)
(declare-const inv_b721 Bool)
(declare-const inv_b722 Bool)
(declare-const inv_b723 Bool)
(declare-const inv_b724 Bool)
(declare-const inv_b725 Bool)
(declare-const inv_b726 Bool)
(declare-const inv_b727 Bool)
(declare-const inv_b728 Bool)
(declare-const inv_b729 Bool)
(declare-const inv_b730 Bool)
(declare-const inv_b731 Bool)
(declare-const inv_b732 Bool)
(declare-const inv_b733 Bool)
(declare-const inv_b734 Bool)
(declare-const inv_b735 Bool)
(declare-const inv_b736 Bool)
(declare-const inv_b737 Bool)
(declare-const inv_b738 Bool)
(declare-const inv_b739 Bool)
(declare-const inv_b740 Bool)
(declare-const inv_b741 Bool)
(declare-const inv_b742 Bool)
(declare-const inv_b743 Bool)
(declare-const inv_b744 Bool)
(declare-const inv_b745 Bool)
(declare-const inv_b746 Bool)
(declare-const inv_b747 Bool)
(declare-const inv_b748 Bool)
(declare-const inv_b749 Bool)
(declare-const inv_b750 Bool)
(declare-const inv_b751 Bool)
(declare-const inv_b752 Bool)
(declare-const inv_b753 Bool)
(declare-const inv_b754 Bool)
(declare-const inv_b755 Bool)
(declare-const inv_b756 Bool)
(declare-const inv_b757 Bool)
(declare-const inv_b758 Bool)
(declare-const inv_b759 Bool)
(declare-const inv_b760 Bool)
(declare-const inv_b761 Bool)
(declare-const inv_b762 Bool)
(declare-const inv_b763 Bool)
(declare-const inv_b764 Bool)
(declare-const inv_b765 Bool)
(declare-const inv_b766 Bool)
(declare-const inv_b767 Bool)
(declare-const inv_b768 Bool)
(declare-const inv_b769 Bool)
(declare-const inv_b770 Bool)
(declare-const inv_b771 Bool)

;Declaring functions corresponding to nonterminals
(define-fun inv_Epoch__101 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__241 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__89 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b460 
 n1 
 n2)
)
(define-fun inv_Epoch__245 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__90 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b652 
 n1 
 n2)
)
(define-fun inv_Node__93 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b536 
 n1 
 n2)
)
(define-fun inv_Node__222 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b626 
 n1 
 n2)
)
(define-fun inv_Epoch__111 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__368 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__244 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__367 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__349 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b537 
 n1 
 n2)
)
(define-fun inv_Node__91 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b600 
 n1 
 n2)
)
(define-fun inv_Node__224 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b770 
 n1 
 n2)
)
(define-fun inv_Epoch__242 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__70 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__61 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b466 
 n1 
 n2)
)
(define-fun inv_Epoch__97 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__110 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__226 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b631 
 n1 
 n2)
)
(define-fun inv_Node__350 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b456 
 n1 
 n2)
)
(define-fun inv_Epoch__371 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__96 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__253 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b704 
 n1 
 n2)
)
(define-fun inv_Node__348 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b621 
 n1 
 n2)
)
(define-fun inv_Node__240 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b520 
 n1 
 n2)
)
(define-fun inv_Epoch__222 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__98 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__205 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b494 
 n1 
 n2)
)
(define-fun inv_Node__92 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b530 
 n1 
 n2)
)
(define-fun inv_Epoch__69 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__365 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b447 
 n1 
 n2)
)
(define-fun inv_Node__104 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b623 
 n1 
 n2)
)
(define-fun inv_Node__105 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b581 
 n1 
 n2)
)
(define-fun inv_Epoch__108 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__364 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b552 
 n1 
 n2)
)
(define-fun inv_Node__64 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b454 
 n1 
 n2)
)
(define-fun inv_Node__207 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b571 
 n1 
 n2)
)
(define-fun inv_Epoch__99 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__381 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__351 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b722 
 n1 
 n2)
)
(define-fun inv_Node__47 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b680 
 n1 
 n2)
)
(define-fun inv_Epoch__366 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__383 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__208 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b493 
 n1 
 n2)
)
(define-fun inv_Node__101 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b527 
 n1 
 n2)
)
(define-fun inv_Node__112 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b499 
 n1 
 n2)
)
(define-fun inv_Epoch__224 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__361 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b699 
 n1 
 n2)
)
(define-fun inv_Epoch__166 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__65 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b476 
 n1 
 n2)
)
(define-fun inv_Epoch__223 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__206 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b496 
 n1 
 n2)
)
(define-fun inv_Epoch__54 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__326 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b670 
 n1 
 n2)
)
(define-fun inv_Epoch__146 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__100 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__109 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__54 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b514 
 n1 
 n2)
)
(define-fun inv_Node__150 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b582 
 n1 
 n2)
)
(define-fun inv_Node__51 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b767 
 n1 
 n2)
)
(define-fun inv_Epoch__240 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__328 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__155 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__243 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__251 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__225 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b555 
 n1 
 n2)
)
(define-fun inv_Epoch__369 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__151 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__378 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__382 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__309 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b710 
 n1 
 n2)
)
(define-fun inv_Epoch__55 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__102 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b461 
 n1 
 n2)
)
(define-fun inv_Epoch__78 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__223 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b727 
 n1 
 n2)
)
(define-fun inv_Node__266 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b717 
 n1 
 n2)
)
(define-fun inv_Node__355 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b594 
 n1 
 n2)
)
(define-fun inv_Atom_44 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b126 
 (held m s (inv_Node__89 m s n1 n2 e1)) 
 (ite inv_b127 
 (locked m s (inv_Epoch__96 m s n1 n2 e1) (inv_Node__90 m s n1 n2 e1)) 
 (ite inv_b128 
 (transfer m s (inv_Epoch__97 m s n1 n2 e1) (inv_Node__91 m s n1 n2 e1)) 
 (ite inv_b129 
 (le m (inv_Epoch__98 m s n1 n2 e1) (inv_Epoch__99 m s n1 n2 e1)) 
 (ite inv_b130 
 (= (inv_Node__92 m s n1 n2 e1) (inv_Node__93 m s n1 n2 e1)) 
 (= (inv_Epoch__100 m s n1 n2 e1) (inv_Epoch__101 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_46 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b270 
 (held m s (inv_Node__222 m s n1 n2 e1)) 
 (ite inv_b271 
 (locked m s (inv_Epoch__240 m s n1 n2 e1) (inv_Node__223 m s n1 n2 e1)) 
 (ite inv_b272 
 (transfer m s (inv_Epoch__241 m s n1 n2 e1) (inv_Node__224 m s n1 n2 e1)) 
 (ite inv_b273 
 (le m (inv_Epoch__242 m s n1 n2 e1) (inv_Epoch__243 m s n1 n2 e1)) 
 (ite inv_b274 
 (= (inv_Node__225 m s n1 n2 e1) (inv_Node__226 m s n1 n2 e1)) 
 (= (inv_Epoch__244 m s n1 n2 e1) (inv_Epoch__245 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__227 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__137 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b604 
 n1 
 n2)
)
(define-fun inv_Epoch__113 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__71 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__377 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__79 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__234 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b546 
 n1 
 n2)
)
(define-fun inv_Epoch__247 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__57 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__239 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__75 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b625 
 n1 
 n2)
)
(define-fun inv_Epoch__68 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__314 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__103 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b669 
 n1 
 n2)
)
(define-fun inv_Epoch__317 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__35 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b305 
 e1 
 (ep m s (inv_Node__253 m s n1 n2 e1)))
)
(define-fun inv_Node__132 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b677 
 n1 
 n2)
)
(define-fun inv_Node__293 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b540 
 n1 
 n2)
)
(define-fun inv_Node__270 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b489 
 n1 
 n2)
)
(define-fun inv_Node__229 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b568 
 n1 
 n2)
)
(define-fun inv_Node__135 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b488 
 n1 
 n2)
)
(define-fun inv_Node__149 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b611 
 n1 
 n2)
)
(define-fun inv_Node__26 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b407 
 n1 
 n2)
)
(define-fun inv_Epoch__235 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__180 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b464 
 n1 
 n2)
)
(define-fun inv_Node__218 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b766 
 n1 
 n2)
)
(define-fun inv_Node__352 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b705 
 n1 
 n2)
)
(define-fun inv_Epoch__287 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__256 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__67 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__316 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__286 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__112 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__63 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b551 
 n1 
 n2)
)
(define-fun inv_Epoch__380 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__167 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__370 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__268 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b490 
 n1 
 n2)
)
(define-fun inv_Epoch__156 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__376 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__131 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b444 
 n1 
 n2)
)
(define-fun inv_Epoch__315 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__308 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b498 
 n1 
 n2)
)
(define-fun inv_Node__74 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b640 
 n1 
 n2)
)
(define-fun inv_Epoch__163 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__48 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b482 
 n1 
 n2)
)
(define-fun inv_Epoch__30 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b290 
 e1 
 (ep m s (inv_Node__240 m s n1 n2 e1)))
)
(define-fun inv_Epoch__145 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__253 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__50 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b449 
 n1 
 n2)
)
(define-fun inv_Epoch__226 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__62 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b678 
 n1 
 n2)
)
(define-fun inv_Epoch__379 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__59 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__121 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__237 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__295 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b760 
 n1 
 n2)
)
(define-fun inv_Node__271 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b576 
 n1 
 n2)
)
(define-fun inv_Node__138 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b558 
 n1 
 n2)
)
(define-fun inv_Atom_47 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b138 
 (held m s (inv_Node__101 m s n1 n2 e1)) 
 (ite inv_b139 
 (locked m s (inv_Epoch__108 m s n1 n2 e1) (inv_Node__102 m s n1 n2 e1)) 
 (ite inv_b140 
 (transfer m s (inv_Epoch__109 m s n1 n2 e1) (inv_Node__103 m s n1 n2 e1)) 
 (ite inv_b141 
 (le m (inv_Epoch__110 m s n1 n2 e1) (inv_Epoch__111 m s n1 n2 e1)) 
 (ite inv_b142 
 (= (inv_Node__104 m s n1 n2 e1) (inv_Node__105 m s n1 n2 e1)) 
 (= (inv_Epoch__112 m s n1 n2 e1) (inv_Epoch__113 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__234 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__225 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__153 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_43 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b421 
 (held m s (inv_Node__348 m s n1 n2 e1)) 
 (ite inv_b422 
 (locked m s (inv_Epoch__366 m s n1 n2 e1) (inv_Node__349 m s n1 n2 e1)) 
 (ite inv_b423 
 (transfer m s (inv_Epoch__367 m s n1 n2 e1) (inv_Node__350 m s n1 n2 e1)) 
 (ite inv_b424 
 (le m (inv_Epoch__368 m s n1 n2 e1) (inv_Epoch__369 m s n1 n2 e1)) 
 (ite inv_b425 
 (= (inv_Node__351 m s n1 n2 e1) (inv_Node__352 m s n1 n2 e1)) 
 (= (inv_Epoch__370 m s n1 n2 e1) (inv_Epoch__371 m s n1 n2 e1)))))))
)
(define-fun inv_Node__357 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b768 
 n1 
 n2)
)
(define-fun inv_Epoch__372 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__152 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__281 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__123 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__124 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__148 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b450 
 n1 
 n2)
)
(define-fun inv_Node__45 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b602 
 n1 
 n2)
)
(define-fun inv_Epoch__248 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__111 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b761 
 n1 
 n2)
)
(define-fun inv_Node__362 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b733 
 n1 
 n2)
)
(define-fun inv_Epoch__66 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__147 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__161 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__230 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b616 
 n1 
 n2)
)
(define-fun inv_Epoch__56 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__278 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__326 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__330 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b729 
 n1 
 n2)
)
(define-fun inv_Node__360 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b492 
 n1 
 n2)
)
(define-fun inv_Node__147 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b483 
 n1 
 n2)
)
(define-fun inv_Node__136 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b545 
 n1 
 n2)
)
(define-fun inv_Epoch__60 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__313 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__179 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b681 
 n1 
 n2)
)
(define-fun inv_Epoch__325 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__327 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__363 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b603 
 n1 
 n2)
)
(define-fun inv_Atom_49 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b98 
 (held m s (inv_Node__61 m s n1 n2 e1)) 
 (ite inv_b99 
 (locked m s (inv_Epoch__66 m s n1 n2 e1) (inv_Node__62 m s n1 n2 e1)) 
 (ite inv_b100 
 (transfer m s (inv_Epoch__67 m s n1 n2 e1) (inv_Node__63 m s n1 n2 e1)) 
 (ite inv_b101 
 (le m (inv_Epoch__68 m s n1 n2 e1) (inv_Epoch__69 m s n1 n2 e1)) 
 (ite inv_b102 
 (= (inv_Node__64 m s n1 n2 e1) (inv_Node__65 m s n1 n2 e1)) 
 (= (inv_Epoch__70 m s n1 n2 e1) (inv_Epoch__71 m s n1 n2 e1)))))))
)
(define-fun inv_Node__209 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b565 
 n1 
 n2)
)
(define-fun inv_Node__366 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b658 
 n1 
 n2)
)
(define-fun inv_Epoch__249 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__201 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b723 
 n1 
 n2)
)
(define-fun inv_Node__307 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b569 
 n1 
 n2)
)
(define-fun inv_Node__198 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b712 
 n1 
 n2)
)
(define-fun inv_Epoch__254 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__59 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b516 
 n1 
 n2)
)
(define-fun inv_Node__327 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b694 
 n1 
 n2)
)
(define-fun inv_Epoch__80 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__228 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b561 
 n1 
 n2)
)
(define-fun inv_Node__262 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b562 
 n1 
 n2)
)
(define-fun inv_Node__142 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b667 
 n1 
 n2)
)
(define-fun inv_Node__49 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b619 
 n1 
 n2)
)
(define-fun inv_Epoch__162 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__53 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b644 
 n1 
 n2)
)
(define-fun inv_Node__294 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b468 
 n1 
 n2)
)
(define-fun inv_Node__219 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b542 
 n1 
 n2)
)
(define-fun inv_Node__25 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b339 
 n1 
 n2)
)
(define-fun inv_Epoch__231 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__151 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b636 
 n1 
 n2)
)
(define-fun inv_Node__134 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b549 
 n1 
 n2)
)
(define-fun inv_Node__152 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b574 
 n1 
 n2)
)
(define-fun inv_Atom_45 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b250 
 (held m s (inv_Node__205 m s n1 n2 e1)) 
 (ite inv_b251 
 (locked m s (inv_Epoch__222 m s n1 n2 e1) (inv_Node__206 m s n1 n2 e1)) 
 (ite inv_b252 
 (transfer m s (inv_Epoch__223 m s n1 n2 e1) (inv_Node__207 m s n1 n2 e1)) 
 (ite inv_b253 
 (le m (inv_Epoch__224 m s n1 n2 e1) (inv_Epoch__225 m s n1 n2 e1)) 
 (ite inv_b254 
 (= (inv_Node__208 m s n1 n2 e1) (inv_Node__209 m s n1 n2 e1)) 
 (= (inv_Epoch__226 m s n1 n2 e1) (inv_Epoch__227 m s n1 n2 e1)))))))
)
(define-fun inv_Node__72 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b744 
 n1 
 n2)
)
(define-fun inv_Epoch__33 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b434 
 e1 
 (ep m s (inv_Node__360 m s n1 n2 e1)))
)
(define-fun inv_Node__220 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b458 
 n1 
 n2)
)
(define-fun inv_Node__261 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b642 
 n1 
 n2)
)
(define-fun inv_Epoch__149 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__150 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__31 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b91 
 e1 
 (ep m s (inv_Node__54 m s n1 n2 e1)))
)
(define-fun inv_Node__214 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b479 
 n1 
 n2)
)
(define-fun inv_Node__333 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b608 
 n1 
 n2)
)
(define-fun inv_Node__263 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b664 
 n1 
 n2)
)
(define-fun inv_Node__188 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b474 
 n1 
 n2)
)
(define-fun inv_Epoch__246 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__276 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b696 
 n1 
 n2)
)
(define-fun inv_Node__227 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b709 
 n1 
 n2)
)
(define-fun inv_Epoch__284 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__238 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__52 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__217 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b654 
 n1 
 n2)
)
(define-fun inv_Node__43 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b455 
 n1 
 n2)
)
(define-fun inv_Node__113 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b762 
 n1 
 n2)
)
(define-fun inv_Node__311 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b713 
 n1 
 n2)
)
(define-fun inv_Node__95 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b587 
 n1 
 n2)
)
(define-fun inv_Epoch__139 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__212 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b503 
 n1 
 n2)
)
(define-fun inv_Node__315 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b629 
 n1 
 n2)
)
(define-fun inv_Epoch__131 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__41 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b446 
 n1 
 n2)
)
(define-fun inv_Epoch__361 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__158 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_53 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b436 
 (held m s (inv_Node__361 m s n1 n2 e1)) 
 (ite inv_b437 
 (locked m s (inv_Epoch__378 m s n1 n2 e1) (inv_Node__362 m s n1 n2 e1)) 
 (ite inv_b438 
 (transfer m s (inv_Epoch__379 m s n1 n2 e1) (inv_Node__363 m s n1 n2 e1)) 
 (ite inv_b439 
 (le m (inv_Epoch__380 m s n1 n2 e1) (inv_Epoch__381 m s n1 n2 e1)) 
 (ite inv_b440 
 (= (inv_Node__364 m s n1 n2 e1) (inv_Node__365 m s n1 n2 e1)) 
 (= (inv_Epoch__382 m s n1 n2 e1) (inv_Epoch__383 m s n1 n2 e1)))))))
)
(define-fun inv_Node__203 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b714 
 n1 
 n2)
)
(define-fun inv_Node__210 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b751 
 n1 
 n2)
)
(define-fun inv_Epoch__58 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__146 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b754 
 n1 
 n2)
)
(define-fun inv_Epoch__236 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__289 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__73 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b501 
 n1 
 n2)
)
(define-fun inv_Epoch__136 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__297 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b485 
 n1 
 n2)
)
(define-fun inv_Epoch__38 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b186 
 e1 
 (ep m s (inv_Node__146 m s n1 n2 e1)))
)
(define-fun inv_Node__331 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b513 
 n1 
 n2)
)
(define-fun inv_Epoch__137 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__310 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b451 
 n1 
 n2)
)
(define-fun inv_Node__264 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b617 
 n1 
 n2)
)
(define-fun inv_Epoch__341 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__133 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b470 
 n1 
 n2)
)
(define-fun inv_Epoch__122 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__349 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__365 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__367 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b457 
 n1 
 n2)
)
(define-fun inv_Node__96 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b737 
 n1 
 n2)
)
(define-fun inv_Node__114 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b572 
 n1 
 n2)
)
(define-fun inv_Epoch__213 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__144 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__231 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b478 
 n1 
 n2)
)
(define-fun inv_Epoch__212 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__133 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__283 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__117 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b706 
 n1 
 n2)
)
(define-fun inv_Epoch__279 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__298 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b692 
 n1 
 n2)
)
(define-fun inv_Node__272 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b657 
 n1 
 n2)
)
(define-fun inv_Epoch__185 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__214 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__220 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__339 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b487 
 n1 
 n2)
)
(define-fun inv_Node__343 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b543 
 n1 
 n2)
)
(define-fun inv_Epoch__165 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__49 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__235 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b583 
 n1 
 n2)
)
(define-fun inv_Node__306 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b756 
 n1 
 n2)
)
(define-fun inv_Node__140 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b659 
 n1 
 n2)
)
(define-fun inv_Node__233 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b528 
 n1 
 n2)
)
(define-fun inv_Node__123 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b711 
 n1 
 n2)
)
(define-fun inv_Node__94 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b674 
 n1 
 n2)
)
(define-fun inv_Node__346 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b651 
 n1 
 n2)
)
(define-fun inv_Epoch__114 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__236 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b467 
 n1 
 n2)
)
(define-fun inv_Epoch__348 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__107 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__99 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b533 
 n1 
 n2)
)
(define-fun inv_Node__239 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b765 
 n1 
 n2)
)
(define-fun inv_Epoch__154 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__87 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b662 
 n1 
 n2)
)
(define-fun inv_Epoch__250 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__57 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b660 
 n1 
 n2)
)
(define-fun inv_Epoch__252 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__38 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b187 
 n1 
 n2)
)
(define-fun inv_Epoch__230 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__202 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b484 
 n1 
 n2)
)
(define-fun inv_Node__139 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b584 
 n1 
 n2)
)
(define-fun inv_Epoch__255 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__373 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__329 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__120 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__332 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__277 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__215 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b532 
 n1 
 n2)
)
(define-fun inv_Epoch__363 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__32 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b392 
 e1 
 (ep m s (inv_Node__326 m s n1 n2 e1)))
)
(define-fun inv_Node__107 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b560 
 n1 
 n2)
)
(define-fun inv_Epoch__312 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__332 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b453 
 n1 
 n2)
)
(define-fun inv_Epoch__125 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__42 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b323 
 e1 
 (ep m s (inv_Node__266 m s n1 n2 e1)))
)
(define-fun inv_Epoch__164 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_58 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b188 
 (held m s (inv_Node__147 m s n1 n2 e1)) 
 (ite inv_b189 
 (locked m s (inv_Epoch__162 m s n1 n2 e1) (inv_Node__148 m s n1 n2 e1)) 
 (ite inv_b190 
 (transfer m s (inv_Epoch__163 m s n1 n2 e1) (inv_Node__149 m s n1 n2 e1)) 
 (ite inv_b191 
 (le m (inv_Epoch__164 m s n1 n2 e1) (inv_Epoch__165 m s n1 n2 e1)) 
 (ite inv_b192 
 (= (inv_Node__150 m s n1 n2 e1) (inv_Node__151 m s n1 n2 e1)) 
 (= (inv_Epoch__166 m s n1 n2 e1) (inv_Epoch__167 m s n1 n2 e1)))))))
)
(define-fun inv_Node__267 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b475 
 n1 
 n2)
)
(define-fun inv_Epoch__290 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__213 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b650 
 n1 
 n2)
)
(define-fun inv_Node__194 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b585 
 n1 
 n2)
)
(define-fun inv_Node__316 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b639 
 n1 
 n2)
)
(define-fun inv_Node__31 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b442 
 n1 
 n2)
)
(define-fun inv_Epoch__76 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__29 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b153 
 n1 
 n2)
)
(define-fun inv_Epoch__232 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__128 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b462 
 n1 
 n2)
)
(define-fun inv_Epoch__81 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__199 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b592 
 n1 
 n2)
)
(define-fun inv_Epoch__143 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__209 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__182 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b671 
 n1 
 n2)
)
(define-fun inv_Node__115 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b725 
 n1 
 n2)
)
(define-fun inv_Epoch__116 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__93 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__92 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__259 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__144 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b653 
 n1 
 n2)
)
(define-fun inv_Epoch__330 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__64 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__142 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__118 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b643 
 n1 
 n2)
)
(define-fun inv_Epoch__362 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__159 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__148 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_57 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b84 
 (held m s (inv_Node__47 m s n1 n2 e1)) 
 (ite inv_b85 
 (locked m s (inv_Epoch__54 m s n1 n2 e1) (inv_Node__48 m s n1 n2 e1)) 
 (ite inv_b86 
 (transfer m s (inv_Epoch__55 m s n1 n2 e1) (inv_Node__49 m s n1 n2 e1)) 
 (ite inv_b87 
 (le m (inv_Epoch__56 m s n1 n2 e1) (inv_Epoch__57 m s n1 n2 e1)) 
 (ite inv_b88 
 (= (inv_Node__50 m s n1 n2 e1) (inv_Node__51 m s n1 n2 e1)) 
 (= (inv_Epoch__58 m s n1 n2 e1) (inv_Epoch__59 m s n1 n2 e1)))))))
)
(define-fun inv_Node__195 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b518 
 n1 
 n2)
)
(define-fun inv_Epoch__160 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__324 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__44 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b288 
 e1 
 (ep m s (inv_Node__239 m s n1 n2 e1)))
)
(define-fun inv_Epoch__206 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__181 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b563 
 n1 
 n2)
)
(define-fun inv_Node__52 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b685 
 n1 
 n2)
)
(define-fun inv_Atom_60 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b148 
 (held m s (inv_Node__111 m s n1 n2 e1)) 
 (ite inv_b149 
 (locked m s (inv_Epoch__120 m s n1 n2 e1) (inv_Node__112 m s n1 n2 e1)) 
 (ite inv_b150 
 (transfer m s (inv_Epoch__121 m s n1 n2 e1) (inv_Node__113 m s n1 n2 e1)) 
 (ite inv_b151 
 (le m (inv_Epoch__122 m s n1 n2 e1) (inv_Epoch__123 m s n1 n2 e1)) 
 (ite inv_b152 
 (= (inv_Node__114 m s n1 n2 e1) (inv_Node__115 m s n1 n2 e1)) 
 (= (inv_Epoch__124 m s n1 n2 e1) (inv_Epoch__125 m s n1 n2 e1)))))))
)
(define-fun inv_Node__241 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b628 
 n1 
 n2)
)
(define-fun inv_Node__216 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b524 
 n1 
 n2)
)
(define-fun inv_Epoch__263 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__269 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b750 
 n1 
 n2)
)
(define-fun inv_Node__106 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b763 
 n1 
 n2)
)
(define-fun inv_Epoch__41 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b193 
 e1 
 (ep m s (inv_Node__152 m s n1 n2 e1)))
)
(define-fun inv_Epoch__198 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__36 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b89 
 e1 
 (ep m s (inv_Node__52 m s n1 n2 e1)))
)
(define-fun inv_Epoch__282 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__27 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b428 
 n1 
 n2)
)
(define-fun inv_Node__289 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b521 
 n1 
 n2)
)
(define-fun inv_Node__28 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b255 
 n1 
 n2)
)
(define-fun inv_Epoch__94 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__55 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b731 
 n1 
 n2)
)
(define-fun inv_Epoch__285 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__34 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b81 
 e1 
 (ep m s (inv_Node__45 m s n1 n2 e1)))
)
(define-fun inv_Epoch__53 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__290 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b472 
 n1 
 n2)
)
(define-fun inv_Node__127 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b736 
 n1 
 n2)
)
(define-fun inv_Node__173 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b522 
 n1 
 n2)
)
(define-fun inv_Epoch__360 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__103 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__82 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b591 
 n1 
 n2)
)
(define-fun inv_Epoch__374 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_48 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b170 
 (held m s (inv_Node__131 m s n1 n2 e1)) 
 (ite inv_b171 
 (locked m s (inv_Epoch__144 m s n1 n2 e1) (inv_Node__132 m s n1 n2 e1)) 
 (ite inv_b172 
 (transfer m s (inv_Epoch__145 m s n1 n2 e1) (inv_Node__133 m s n1 n2 e1)) 
 (ite inv_b173 
 (le m (inv_Epoch__146 m s n1 n2 e1) (inv_Epoch__147 m s n1 n2 e1)) 
 (ite inv_b174 
 (= (inv_Node__134 m s n1 n2 e1) (inv_Node__135 m s n1 n2 e1)) 
 (= (inv_Epoch__148 m s n1 n2 e1) (inv_Epoch__149 m s n1 n2 e1)))))))
)
(define-fun inv_Node__242 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b647 
 n1 
 n2)
)
(define-fun inv_Node__296 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b690 
 n1 
 n2)
)
(define-fun inv_Atom_50 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b369 
 (held m s (inv_Node__306 m s n1 n2 e1)) 
 (ite inv_b370 
 (locked m s (inv_Epoch__324 m s n1 n2 e1) (inv_Node__307 m s n1 n2 e1)) 
 (ite inv_b371 
 (transfer m s (inv_Epoch__325 m s n1 n2 e1) (inv_Node__308 m s n1 n2 e1)) 
 (ite inv_b372 
 (le m (inv_Epoch__326 m s n1 n2 e1) (inv_Epoch__327 m s n1 n2 e1)) 
 (ite inv_b373 
 (= (inv_Node__309 m s n1 n2 e1) (inv_Node__310 m s n1 n2 e1)) 
 (= (inv_Epoch__328 m s n1 n2 e1) (inv_Epoch__329 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_36 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b275 
 (held m s (inv_Node__227 m s n1 n2 e1)) 
 (ite inv_b276 
 (locked m s (inv_Epoch__246 m s n1 n2 e1) (inv_Node__228 m s n1 n2 e1)) 
 (ite inv_b277 
 (transfer m s (inv_Epoch__247 m s n1 n2 e1) (inv_Node__229 m s n1 n2 e1)) 
 (ite inv_b278 
 (le m (inv_Epoch__248 m s n1 n2 e1) (inv_Epoch__249 m s n1 n2 e1)) 
 (ite inv_b279 
 (= (inv_Node__230 m s n1 n2 e1) (inv_Node__231 m s n1 n2 e1)) 
 (= (inv_Epoch__250 m s n1 n2 e1) (inv_Epoch__251 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__375 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__157 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__118 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__187 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b607 
 n1 
 n2)
)
(define-fun inv_Node__100 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b613 
 n1 
 n2)
)
(define-fun inv_Node__204 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b578 
 n1 
 n2)
)
(define-fun inv_Node__81 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b609 
 n1 
 n2)
)
(define-fun inv_Node__2 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b309 
 n1 
 n2)
)
(define-fun inv_Node__359 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b534 
 n1 
 n2)
)
(define-fun inv_Node__66 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b701 
 n1 
 n2)
)
(define-fun inv_Node__265 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b663 
 n1 
 n2)
)
(define-fun inv_Epoch__141 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__163 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b698 
 n1 
 n2)
)
(define-fun inv_Node__280 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b719 
 n1 
 n2)
)
(define-fun inv_Atom_62 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b175 
 (held m s (inv_Node__136 m s n1 n2 e1)) 
 (ite inv_b176 
 (locked m s (inv_Epoch__150 m s n1 n2 e1) (inv_Node__137 m s n1 n2 e1)) 
 (ite inv_b177 
 (transfer m s (inv_Epoch__151 m s n1 n2 e1) (inv_Node__138 m s n1 n2 e1)) 
 (ite inv_b178 
 (le m (inv_Epoch__152 m s n1 n2 e1) (inv_Epoch__153 m s n1 n2 e1)) 
 (ite inv_b179 
 (= (inv_Node__139 m s n1 n2 e1) (inv_Node__140 m s n1 n2 e1)) 
 (= (inv_Epoch__154 m s n1 n2 e1) (inv_Epoch__155 m s n1 n2 e1)))))))
)
(define-fun inv_Node__237 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b734 
 n1 
 n2)
)
(define-fun inv_Epoch__82 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__257 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__145 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b519 
 n1 
 n2)
)
(define-fun inv_Epoch__331 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__356 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b517 
 n1 
 n2)
)
(define-fun inv_Epoch__65 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__178 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b721 
 n1 
 n2)
)
(define-fun inv_Epoch__350 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__359 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__177 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__35 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b82 
 n1 
 n2)
)
(define-fun inv_Node__302 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b598 
 n1 
 n2)
)
(define-fun inv_Epoch__302 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__292 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__117 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__317 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b610 
 n1 
 n2)
)
(define-fun inv_Node__176 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b612 
 n1 
 n2)
)
(define-fun inv_Epoch__183 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__110 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b638 
 n1 
 n2)
)
(define-fun inv_Node__353 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b486 
 n1 
 n2)
)
(define-fun inv_Node__259 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b675 
 n1 
 n2)
)
(define-fun inv_Node__108 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b757 
 n1 
 n2)
)
(define-fun inv_Epoch__338 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__280 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__153 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b633 
 n1 
 n2)
)
(define-fun inv_Epoch__339 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__218 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__169 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b586 
 n1 
 n2)
)
(define-fun inv_Node__185 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b577 
 n1 
 n2)
)
(define-fun inv_Epoch__85 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__275 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b715 
 n1 
 n2)
)
(define-fun inv_Node__3 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b327 
 n1 
 n2)
)
(define-fun inv_Node__245 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b684 
 n1 
 n2)
)
(define-fun inv_Epoch__46 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b221 
 e1 
 (ep m s (inv_Node__179 m s n1 n2 e1)))
)
(define-fun inv_Atom_54 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b355 
 (held m s (inv_Node__293 m s n1 n2 e1)) 
 (ite inv_b356 
 (locked m s (inv_Epoch__312 m s n1 n2 e1) (inv_Node__294 m s n1 n2 e1)) 
 (ite inv_b357 
 (transfer m s (inv_Epoch__313 m s n1 n2 e1) (inv_Node__295 m s n1 n2 e1)) 
 (ite inv_b358 
 (le m (inv_Epoch__314 m s n1 n2 e1) (inv_Epoch__315 m s n1 n2 e1)) 
 (ite inv_b359 
 (= (inv_Node__296 m s n1 n2 e1) (inv_Node__297 m s n1 n2 e1)) 
 (= (inv_Epoch__316 m s n1 n2 e1) (inv_Epoch__317 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_55 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b264 
 (held m s (inv_Node__216 m s n1 n2 e1)) 
 (ite inv_b265 
 (locked m s (inv_Epoch__234 m s n1 n2 e1) (inv_Node__217 m s n1 n2 e1)) 
 (ite inv_b266 
 (transfer m s (inv_Epoch__235 m s n1 n2 e1) (inv_Node__218 m s n1 n2 e1)) 
 (ite inv_b267 
 (le m (inv_Epoch__236 m s n1 n2 e1) (inv_Epoch__237 m s n1 n2 e1)) 
 (ite inv_b268 
 (= (inv_Node__219 m s n1 n2 e1) (inv_Node__220 m s n1 n2 e1)) 
 (= (inv_Epoch__238 m s n1 n2 e1) (inv_Epoch__239 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_27 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b329 
 (held m s (inv_Node__268 m s n1 n2 e1)) 
 (ite inv_b330 
 (locked m s (inv_Epoch__282 m s n1 n2 e1) (inv_Node__269 m s n1 n2 e1)) 
 (ite inv_b331 
 (transfer m s (inv_Epoch__283 m s n1 n2 e1) (inv_Node__270 m s n1 n2 e1)) 
 (ite inv_b332 
 (le m (inv_Epoch__284 m s n1 n2 e1) (inv_Epoch__285 m s n1 n2 e1)) 
 (ite inv_b333 
 (= (inv_Node__271 m s n1 n2 e1) (inv_Node__272 m s n1 n2 e1)) 
 (= (inv_Epoch__286 m s n1 n2 e1) (inv_Epoch__287 m s n1 n2 e1)))))))
)
(define-fun inv_Node__258 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b580 
 n1 
 n2)
)
(define-fun inv_Epoch__132 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__11 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b180 
 n1 
 n2)
)
(define-fun inv_Node__358 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b539 
 n1 
 n2)
)
(define-fun inv_Node__141 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b700 
 n1 
 n2)
)
(define-fun inv_Epoch__29 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b222 
 e1 
 (ep m s (inv_Node__180 m s n1 n2 e1)))
)
(define-fun inv_Epoch__140 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__4 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b441 
 e1 
 (ep m s (inv_Node__366 m s n1 n2 e1)))
)
(define-fun inv_Epoch__179 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__14 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b124 
 e1 
 (ep m s (inv_Node__87 m s n1 n2 e1)))
)
(define-fun inv_Epoch__83 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__61 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_34 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b282 
 (held m s (inv_Node__233 m s n1 n2 e1)) 
 (ite inv_b283 
 (locked m s (inv_Epoch__252 m s n1 n2 e1) (inv_Node__234 m s n1 n2 e1)) 
 (ite inv_b284 
 (transfer m s (inv_Epoch__253 m s n1 n2 e1) (inv_Node__235 m s n1 n2 e1)) 
 (ite inv_b285 
 (le m (inv_Epoch__254 m s n1 n2 e1) (inv_Epoch__255 m s n1 n2 e1)) 
 (ite inv_b286 
 (= (inv_Node__236 m s n1 n2 e1) (inv_Node__237 m s n1 n2 e1)) 
 (= (inv_Epoch__256 m s n1 n2 e1) (inv_Epoch__257 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__130 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__304 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__318 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__276 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_63 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b429 
 (held m s (inv_Node__355 m s n1 n2 e1)) 
 (ite inv_b430 
 (locked m s (inv_Epoch__372 m s n1 n2 e1) (inv_Node__356 m s n1 n2 e1)) 
 (ite inv_b431 
 (transfer m s (inv_Epoch__373 m s n1 n2 e1) (inv_Node__357 m s n1 n2 e1)) 
 (ite inv_b432 
 (le m (inv_Epoch__374 m s n1 n2 e1) (inv_Epoch__375 m s n1 n2 e1)) 
 (ite inv_b433 
 (= (inv_Node__358 m s n1 n2 e1) (inv_Node__359 m s n1 n2 e1)) 
 (= (inv_Epoch__376 m s n1 n2 e1) (inv_Epoch__377 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_0 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b49 
 (held m s (inv_Node__25 m s n1 n2 e1)) 
 (ite inv_b50 
 (locked m s (inv_Epoch__30 m s n1 n2 e1) (inv_Node__26 m s n1 n2 e1)) 
 (ite inv_b51 
 (transfer m s (inv_Epoch__31 m s n1 n2 e1) (inv_Node__27 m s n1 n2 e1)) 
 (ite inv_b52 
 (le m (inv_Epoch__32 m s n1 n2 e1) (inv_Epoch__33 m s n1 n2 e1)) 
 (ite inv_b53 
 (= (inv_Node__28 m s n1 n2 e1) (inv_Node__29 m s n1 n2 e1)) 
 (ite inv_b54 
 (= (inv_Epoch__34 m s n1 n2 e1) (inv_Epoch__35 m s n1 n2 e1)) 
 (ite inv_b55 
 (and (inv_Atom_43 m s n1 n2 e1) (inv_Atom_44 m s n1 n2 e1)) 
 (ite inv_b56 
 (or (inv_Atom_45 m s n1 n2 e1) (inv_Atom_46 m s n1 n2 e1)) 
 (ite inv_b57 
 (=> (inv_Atom_47 m s n1 n2 e1) (inv_Atom_48 m s n1 n2 e1)) 
 (not (inv_Atom_49 m s n1 n2 e1)))))))))))
)
(define-fun inv_Node__71 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b615 
 n1 
 n2)
)
(define-fun inv_Epoch__305 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__37 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b263 
 n1 
 n2)
)
(define-fun inv_Node__260 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b673 
 n1 
 n2)
)
(define-fun inv_Atom_11 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b108 
 (held m s (inv_Node__71 m s n1 n2 e1)) 
 (ite inv_b109 
 (locked m s (inv_Epoch__78 m s n1 n2 e1) (inv_Node__72 m s n1 n2 e1)) 
 (ite inv_b110 
 (transfer m s (inv_Epoch__79 m s n1 n2 e1) (inv_Node__73 m s n1 n2 e1)) 
 (ite inv_b111 
 (le m (inv_Epoch__80 m s n1 n2 e1) (inv_Epoch__81 m s n1 n2 e1)) 
 (ite inv_b112 
 (= (inv_Node__74 m s n1 n2 e1) (inv_Node__75 m s n1 n2 e1)) 
 (= (inv_Epoch__82 m s n1 n2 e1) (inv_Epoch__83 m s n1 n2 e1)))))))
)
(define-fun inv_Node__334 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b689 
 n1 
 n2)
)
(define-fun inv_Node__125 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b469 
 n1 
 n2)
)
(define-fun inv_Node__325 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b614 
 n1 
 n2)
)
(define-fun inv_Node__143 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b655 
 n1 
 n2)
)
(define-fun inv_Node__40 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b601 
 n1 
 n2)
)
(define-fun inv_Epoch__105 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__336 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__353 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__34 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b229 
 n1 
 n2)
)
(define-fun inv_Epoch__23 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b443 
 e1 
 (ep m s (inv_Node__367 m s n1 n2 e1)))
)
(define-fun inv_Node__303 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b702 
 n1 
 n2)
)
(define-fun inv_Node__197 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b512 
 n1 
 n2)
)
(define-fun inv_Node__83 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b477 
 n1 
 n2)
)
(define-fun inv_Epoch__0 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b131 
 e1 
 (ep m s (inv_Node__94 m s n1 n2 e1)))
)
(define-fun inv_Node__177 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b683 
 n1 
 n2)
)
(define-fun inv_Node__335 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b500 
 n1 
 n2)
)
(define-fun inv_Node__312 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b606 
 n1 
 n2)
)
(define-fun inv_Node__324 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b445 
 n1 
 n2)
)
(define-fun inv_Atom_35 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b181 
 (held m s (inv_Node__141 m s n1 n2 e1)) 
 (ite inv_b182 
 (locked m s (inv_Epoch__156 m s n1 n2 e1) (inv_Node__142 m s n1 n2 e1)) 
 (ite inv_b183 
 (transfer m s (inv_Epoch__157 m s n1 n2 e1) (inv_Node__143 m s n1 n2 e1)) 
 (ite inv_b184 
 (le m (inv_Epoch__158 m s n1 n2 e1) (inv_Epoch__159 m s n1 n2 e1)) 
 (ite inv_b185 
 (= (inv_Node__144 m s n1 n2 e1) (inv_Node__145 m s n1 n2 e1)) 
 (= (inv_Epoch__160 m s n1 n2 e1) (inv_Epoch__161 m s n1 n2 e1)))))))
)
(define-fun inv_Node__121 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b708 
 n1 
 n2)
)
(define-fun inv_Epoch__173 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__62 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__58 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b687 
 n1 
 n2)
)
(define-fun inv_Node__165 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b495 
 n1 
 n2)
)
(define-fun inv_Epoch__73 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__216 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__314 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b641 
 n1 
 n2)
)
(define-fun inv_Node__122 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b661 
 n1 
 n2)
)
(define-fun inv_Epoch__51 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__115 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__334 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__134 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__320 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b570 
 n1 
 n2)
)
(define-fun inv_Epoch__233 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__48 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__340 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__221 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__288 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__354 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b764 
 n1 
 n2)
)
(define-fun inv_Epoch__291 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__126 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b741 
 n1 
 n2)
)
(define-fun inv_Node__345 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b665 
 n1 
 n2)
)
(define-fun inv_Epoch__63 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__211 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b732 
 n1 
 n2)
)
(define-fun inv_Node__192 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b740 
 n1 
 n2)
)
(define-fun inv_Epoch__180 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__200 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b707 
 n1 
 n2)
)
(define-fun inv_Node__328 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b645 
 n1 
 n2)
)
(define-fun inv_Epoch__219 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__40 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b132 
 e1 
 (ep m s (inv_Node__95 m s n1 n2 e1)))
)
(define-fun inv_Epoch__208 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__352 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__119 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__50 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__181 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__56 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b728 
 n1 
 n2)
)
(define-fun inv_Node__124 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b557 
 n1 
 n2)
)
(define-fun inv_Epoch__182 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__273 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b544 
 n1 
 n2)
)
(define-fun inv_Epoch__207 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__228 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__167 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b564 
 n1 
 n2)
)
(define-fun inv_Epoch__217 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__86 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b716 
 n1 
 n2)
)
(define-fun inv_Atom_52 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b92 
 (held m s (inv_Node__55 m s n1 n2 e1)) 
 (ite inv_b93 
 (locked m s (inv_Epoch__60 m s n1 n2 e1) (inv_Node__56 m s n1 n2 e1)) 
 (ite inv_b94 
 (transfer m s (inv_Epoch__61 m s n1 n2 e1) (inv_Node__57 m s n1 n2 e1)) 
 (ite inv_b95 
 (le m (inv_Epoch__62 m s n1 n2 e1) (inv_Epoch__63 m s n1 n2 e1)) 
 (ite inv_b96 
 (= (inv_Node__58 m s n1 n2 e1) (inv_Node__59 m s n1 n2 e1)) 
 (= (inv_Epoch__64 m s n1 n2 e1) (inv_Epoch__65 m s n1 n2 e1)))))))
)
(define-fun inv_Node__97 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b747 
 n1 
 n2)
)
(define-fun inv_Node__44 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b510 
 n1 
 n2)
)
(define-fun inv_Node__36 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b236 
 n1 
 n2)
)
(define-fun inv_Atom_56 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b318 
 (held m s (inv_Node__261 m s n1 n2 e1)) 
 (ite inv_b319 
 (locked m s (inv_Epoch__276 m s n1 n2 e1) (inv_Node__262 m s n1 n2 e1)) 
 (ite inv_b320 
 (transfer m s (inv_Epoch__277 m s n1 n2 e1) (inv_Node__263 m s n1 n2 e1)) 
 (ite inv_b321 
 (le m (inv_Epoch__278 m s n1 n2 e1) (inv_Epoch__279 m s n1 n2 e1)) 
 (ite inv_b322 
 (= (inv_Node__264 m s n1 n2 e1) (inv_Node__265 m s n1 n2 e1)) 
 (= (inv_Epoch__280 m s n1 n2 e1) (inv_Epoch__281 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__333 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__215 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__75 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__329 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b452 
 n1 
 n2)
)
(define-fun inv_Node__33 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b409 
 n1 
 n2)
)
(define-fun inv_Node__119 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b595 
 n1 
 n2)
)
(define-fun inv_Node__30 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b289 
 n1 
 n2)
)
(define-fun inv_Node__238 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b575 
 n1 
 n2)
)
(define-fun inv_Node__291 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b579 
 n1 
 n2)
)
(define-fun inv_Epoch__300 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__42 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b567 
 n1 
 n2)
)
(define-fun inv_Node__347 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b620 
 n1 
 n2)
)
(define-fun inv_Epoch__102 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__229 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__351 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_51 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b393 
 (held m s (inv_Node__327 m s n1 n2 e1)) 
 (ite inv_b394 
 (locked m s (inv_Epoch__348 m s n1 n2 e1) (inv_Node__328 m s n1 n2 e1)) 
 (ite inv_b395 
 (transfer m s (inv_Epoch__349 m s n1 n2 e1) (inv_Node__329 m s n1 n2 e1)) 
 (ite inv_b396 
 (le m (inv_Epoch__350 m s n1 n2 e1) (inv_Epoch__351 m s n1 n2 e1)) 
 (ite inv_b397 
 (= (inv_Node__330 m s n1 n2 e1) (inv_Node__331 m s n1 n2 e1)) 
 (= (inv_Epoch__352 m s n1 n2 e1) (inv_Epoch__353 m s n1 n2 e1)))))))
)
(define-fun inv_Node__292 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b630 
 n1 
 n2)
)
(define-fun inv_Node__46 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b473 
 n1 
 n2)
)
(define-fun inv_Node__274 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b508 
 n1 
 n2)
)
(define-fun inv_Epoch__211 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__221 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b502 
 n1 
 n2)
)
(define-fun inv_Epoch__16 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b237 
 e1 
 (ep m s (inv_Node__192 m s n1 n2 e1)))
)
(define-fun inv_Epoch__95 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__190 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__283 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b505 
 n1 
 n2)
)
(define-fun inv_Node__318 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b605 
 n1 
 n2)
)
(define-fun inv_Node__305 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b506 
 n1 
 n2)
)
(define-fun inv_Node__13 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b405 
 n1 
 n2)
)
(define-fun inv_Node__319 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b726 
 n1 
 n2)
)
(define-fun inv_Node__129 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b588 
 n1 
 n2)
)
(define-fun inv_Epoch__337 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__193 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b703 
 n1 
 n2)
)
(define-fun inv_Epoch__128 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__272 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__170 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__342 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b718 
 n1 
 n2)
)
(define-fun inv_Node__288 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b656 
 n1 
 n2)
)
(define-fun inv_Epoch__311 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_59 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b257 
 (held m s (inv_Node__210 m s n1 n2 e1)) 
 (ite inv_b258 
 (locked m s (inv_Epoch__228 m s n1 n2 e1) (inv_Node__211 m s n1 n2 e1)) 
 (ite inv_b259 
 (transfer m s (inv_Epoch__229 m s n1 n2 e1) (inv_Node__212 m s n1 n2 e1)) 
 (ite inv_b260 
 (le m (inv_Epoch__230 m s n1 n2 e1) (inv_Epoch__231 m s n1 n2 e1)) 
 (ite inv_b261 
 (= (inv_Node__213 m s n1 n2 e1) (inv_Node__214 m s n1 n2 e1)) 
 (= (inv_Epoch__232 m s n1 n2 e1) (inv_Epoch__233 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_38 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b243 
 (held m s (inv_Node__198 m s n1 n2 e1)) 
 (ite inv_b244 
 (locked m s (inv_Epoch__216 m s n1 n2 e1) (inv_Node__199 m s n1 n2 e1)) 
 (ite inv_b245 
 (transfer m s (inv_Epoch__217 m s n1 n2 e1) (inv_Node__200 m s n1 n2 e1)) 
 (ite inv_b246 
 (le m (inv_Epoch__218 m s n1 n2 e1) (inv_Epoch__219 m s n1 n2 e1)) 
 (ite inv_b247 
 (= (inv_Node__201 m s n1 n2 e1) (inv_Node__202 m s n1 n2 e1)) 
 (= (inv_Epoch__220 m s n1 n2 e1) (inv_Epoch__221 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__297 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__196 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b755 
 n1 
 n2)
)
(define-fun inv_Node__116 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b589 
 n1 
 n2)
)
(define-fun inv_Epoch__262 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__24 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b90 
 e1 
 (ep m s (inv_Node__53 m s n1 n2 e1)))
)
(define-fun inv_Epoch__303 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_41 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b382 
 (held m s (inv_Node__316 m s n1 n2 e1)) 
 (ite inv_b383 
 (locked m s (inv_Epoch__336 m s n1 n2 e1) (inv_Node__317 m s n1 n2 e1)) 
 (ite inv_b384 
 (transfer m s (inv_Epoch__337 m s n1 n2 e1) (inv_Node__318 m s n1 n2 e1)) 
 (ite inv_b385 
 (le m (inv_Epoch__338 m s n1 n2 e1) (inv_Epoch__339 m s n1 n2 e1)) 
 (ite inv_b386 
 (= (inv_Node__319 m s n1 n2 e1) (inv_Node__320 m s n1 n2 e1)) 
 (= (inv_Epoch__340 m s n1 n2 e1) (inv_Epoch__341 m s n1 n2 e1)))))))
)
(define-fun inv_Node__98 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b752 
 n1 
 n2)
)
(define-fun inv_Epoch__135 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__310 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__17 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b326 
 e1 
 (ep m s (inv_Node__267 m s n1 n2 e1)))
)
(define-fun inv_Epoch__3 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b248 
 e1 
 (ep m s (inv_Node__203 m s n1 n2 e1)))
)
(define-fun inv_Node__10 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b416 
 n1 
 n2)
)
(define-fun inv_Node__246 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b679 
 n1 
 n2)
)
(define-fun inv_Epoch__266 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__106 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__74 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__127 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__204 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__184 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b724 
 n1 
 n2)
)
(define-fun inv_Epoch__37 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b399 
 e1 
 (ep m s (inv_Node__333 m s n1 n2 e1)))
)
(define-fun inv_Epoch__265 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__277 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b556 
 n1 
 n2)
)
(define-fun inv_Node__313 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b682 
 n1 
 n2)
)
(define-fun inv_Node__175 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b497 
 n1 
 n2)
)
(define-fun inv_Node__232 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b548 
 n1 
 n2)
)
(define-fun inv_Epoch__171 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__193 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__39 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b123 
 e1 
 (ep m s (inv_Node__86 m s n1 n2 e1)))
)
(define-fun inv_Epoch__210 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__189 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b448 
 n1 
 n2)
)
(define-fun inv_Epoch__12 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b427 
 e1 
 (ep m s (inv_Node__354 m s n1 n2 e1)))
)
(define-fun inv_Epoch__319 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__24 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b299 
 n1 
 n2)
)
(define-fun inv_Node__279 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b693 
 n1 
 n2)
)
(define-fun inv_Node__344 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b769 
 n1 
 n2)
)
(define-fun inv_Epoch__364 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__281 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b637 
 n1 
 n2)
)
(define-fun inv_Node__248 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b547 
 n1 
 n2)
)
(define-fun inv_Node__6 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b223 
 n1 
 n2)
)
(define-fun inv_Node__4 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b280 
 n1 
 n2)
)
(define-fun inv_Epoch__335 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__166 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b735 
 n1 
 n2)
)
(define-fun inv_Epoch__72 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__130 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b745 
 n1 
 n2)
)
(define-fun inv_Epoch__293 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__32 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b316 
 n1 
 n2)
)
(define-fun inv_Node__337 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b541 
 n1 
 n2)
)
(define-fun inv_Epoch__174 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__249 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b593 
 n1 
 n2)
)
(define-fun inv_Node__120 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b666 
 n1 
 n2)
)
(define-fun inv_Epoch__129 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_19 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b376 
 (held m s (inv_Node__311 m s n1 n2 e1)) 
 (ite inv_b377 
 (locked m s (inv_Epoch__330 m s n1 n2 e1) (inv_Node__312 m s n1 n2 e1)) 
 (ite inv_b378 
 (transfer m s (inv_Epoch__331 m s n1 n2 e1) (inv_Node__313 m s n1 n2 e1)) 
 (ite inv_b379 
 (le m (inv_Epoch__332 m s n1 n2 e1) (inv_Epoch__333 m s n1 n2 e1)) 
 (ite inv_b380 
 (= (inv_Node__314 m s n1 n2 e1) (inv_Node__315 m s n1 n2 e1)) 
 (= (inv_Epoch__334 m s n1 n2 e1) (inv_Epoch__335 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__91 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__158 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b635 
 n1 
 n2)
)
(define-fun inv_Node__16 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b375 
 n1 
 n2)
)
(define-fun inv_Epoch__138 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__341 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b648 
 n1 
 n2)
)
(define-fun inv_Node__340 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b730 
 n1 
 n2)
)
(define-fun inv_Node__60 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b743 
 n1 
 n2)
)
(define-fun inv_Node__5 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b256 
 n1 
 n2)
)
(define-fun inv_Epoch__178 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__267 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__183 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b697 
 n1 
 n2)
)
(define-fun inv_Epoch__275 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_12 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b76 
 (held m s (inv_Node__40 m s n1 n2 e1)) 
 (ite inv_b77 
 (locked m s (inv_Epoch__48 m s n1 n2 e1) (inv_Node__41 m s n1 n2 e1)) 
 (ite inv_b78 
 (transfer m s (inv_Epoch__49 m s n1 n2 e1) (inv_Node__42 m s n1 n2 e1)) 
 (ite inv_b79 
 (le m (inv_Epoch__50 m s n1 n2 e1) (inv_Epoch__51 m s n1 n2 e1)) 
 (ite inv_b80 
 (= (inv_Node__43 m s n1 n2 e1) (inv_Node__44 m s n1 n2 e1)) 
 (= (inv_Epoch__52 m s n1 n2 e1) (inv_Epoch__53 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__172 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_39 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b165 
 (held m s (inv_Node__126 m s n1 n2 e1)) 
 (ite inv_b166 
 (locked m s (inv_Epoch__138 m s n1 n2 e1) (inv_Node__127 m s n1 n2 e1)) 
 (ite inv_b167 
 (transfer m s (inv_Epoch__139 m s n1 n2 e1) (inv_Node__128 m s n1 n2 e1)) 
 (ite inv_b168 
 (le m (inv_Epoch__140 m s n1 n2 e1) (inv_Epoch__141 m s n1 n2 e1)) 
 (ite inv_b169 
 (= (inv_Node__129 m s n1 n2 e1) (inv_Node__130 m s n1 n2 e1)) 
 (= (inv_Epoch__142 m s n1 n2 e1) (inv_Epoch__143 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_28 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b334 
 (held m s (inv_Node__273 m s n1 n2 e1)) 
 (ite inv_b335 
 (locked m s (inv_Epoch__288 m s n1 n2 e1) (inv_Node__274 m s n1 n2 e1)) 
 (ite inv_b336 
 (transfer m s (inv_Epoch__289 m s n1 n2 e1) (inv_Node__275 m s n1 n2 e1)) 
 (ite inv_b337 
 (le m (inv_Epoch__290 m s n1 n2 e1) (inv_Epoch__291 m s n1 n2 e1)) 
 (ite inv_b338 
 (= (inv_Node__276 m s n1 n2 e1) (inv_Node__277 m s n1 n2 e1)) 
 (= (inv_Epoch__292 m s n1 n2 e1) (inv_Epoch__293 m s n1 n2 e1)))))))
)
(define-fun inv_Node__154 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b459 
 n1 
 n2)
)
(define-fun inv_Epoch__258 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__323 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__285 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b691 
 n1 
 n2)
)
(define-fun inv_Node__301 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b538 
 n1 
 n2)
)
(define-fun inv_Node__0 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b417 
 n1 
 n2)
)
(define-fun inv_Epoch__184 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__192 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__164 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b771 
 n1 
 n2)
)
(define-fun inv_Atom_9 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b160 
 (held m s (inv_Node__121 m s n1 n2 e1)) 
 (ite inv_b161 
 (locked m s (inv_Epoch__132 m s n1 n2 e1) (inv_Node__122 m s n1 n2 e1)) 
 (ite inv_b162 
 (transfer m s (inv_Epoch__133 m s n1 n2 e1) (inv_Node__123 m s n1 n2 e1)) 
 (ite inv_b163 
 (le m (inv_Epoch__134 m s n1 n2 e1) (inv_Epoch__135 m s n1 n2 e1)) 
 (ite inv_b164 
 (= (inv_Node__124 m s n1 n2 e1) (inv_Node__125 m s n1 n2 e1)) 
 (= (inv_Epoch__136 m s n1 n2 e1) (inv_Epoch__137 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__126 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__90 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__104 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__196 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__356 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__69 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b688 
 n1 
 n2)
)
(define-fun inv_Node__287 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b573 
 n1 
 n2)
)
(define-fun inv_Node__156 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b632 
 n1 
 n2)
)
(define-fun inv_Epoch__191 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__80 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b515 
 n1 
 n2)
)
(define-fun inv_Epoch__13 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b418 
 e1 
 (ep m s (inv_Node__347 m s n1 n2 e1)))
)
(define-fun inv_Epoch__345 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_37 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b238 
 (held m s (inv_Node__193 m s n1 n2 e1)) 
 (ite inv_b239 
 (locked m s (inv_Epoch__210 m s n1 n2 e1) (inv_Node__194 m s n1 n2 e1)) 
 (ite inv_b240 
 (transfer m s (inv_Epoch__211 m s n1 n2 e1) (inv_Node__195 m s n1 n2 e1)) 
 (ite inv_b241 
 (le m (inv_Epoch__212 m s n1 n2 e1) (inv_Epoch__213 m s n1 n2 e1)) 
 (ite inv_b242 
 (= (inv_Node__196 m s n1 n2 e1) (inv_Node__197 m s n1 n2 e1)) 
 (= (inv_Epoch__214 m s n1 n2 e1) (inv_Epoch__215 m s n1 n2 e1)))))))
)
(define-fun inv_Node__322 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b559 
 n1 
 n2)
)
(define-fun inv_Epoch__354 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__89 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__20 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b262 
 e1 
 (ep m s (inv_Node__215 m s n1 n2 e1)))
)
(define-fun inv_Node__191 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b686 
 n1 
 n2)
)
(define-fun inv_Node__39 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b374 
 n1 
 n2)
)
(define-fun inv_Node__68 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b738 
 n1 
 n2)
)
(define-fun inv_Node__278 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b622 
 n1 
 n2)
)
(define-fun inv_Node__244 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b535 
 n1 
 n2)
)
(define-fun inv_Atom_24 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b411 
 (held m s (inv_Node__342 m s n1 n2 e1)) 
 (ite inv_b412 
 (locked m s (inv_Epoch__360 m s n1 n2 e1) (inv_Node__343 m s n1 n2 e1)) 
 (ite inv_b413 
 (transfer m s (inv_Epoch__361 m s n1 n2 e1) (inv_Node__344 m s n1 n2 e1)) 
 (ite inv_b414 
 (le m (inv_Epoch__362 m s n1 n2 e1) (inv_Epoch__363 m s n1 n2 e1)) 
 (ite inv_b415 
 (= (inv_Node__345 m s n1 n2 e1) (inv_Node__346 m s n1 n2 e1)) 
 (= (inv_Epoch__364 m s n1 n2 e1) (inv_Epoch__365 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_14 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b205 
 (held m s (inv_Node__163 m s n1 n2 e1)) 
 (ite inv_b206 
 (locked m s (inv_Epoch__180 m s n1 n2 e1) (inv_Node__164 m s n1 n2 e1)) 
 (ite inv_b207 
 (transfer m s (inv_Epoch__181 m s n1 n2 e1) (inv_Node__165 m s n1 n2 e1)) 
 (ite inv_b208 
 (le m (inv_Epoch__182 m s n1 n2 e1) (inv_Epoch__183 m s n1 n2 e1)) 
 (ite inv_b209 
 (= (inv_Node__166 m s n1 n2 e1) (inv_Node__167 m s n1 n2 e1)) 
 (= (inv_Epoch__184 m s n1 n2 e1) (inv_Epoch__185 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_3 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b58 
 (held m s (inv_Node__30 m s n1 n2 e1)) 
 (ite inv_b59 
 (locked m s (inv_Epoch__36 m s n1 n2 e1) (inv_Node__31 m s n1 n2 e1)) 
 (ite inv_b60 
 (transfer m s (inv_Epoch__37 m s n1 n2 e1) (inv_Node__32 m s n1 n2 e1)) 
 (ite inv_b61 
 (le m (inv_Epoch__38 m s n1 n2 e1) (inv_Epoch__39 m s n1 n2 e1)) 
 (ite inv_b62 
 (= (inv_Node__33 m s n1 n2 e1) (inv_Node__34 m s n1 n2 e1)) 
 (ite inv_b63 
 (= (inv_Epoch__40 m s n1 n2 e1) (inv_Epoch__41 m s n1 n2 e1)) 
 (ite inv_b64 
 (and (inv_Atom_50 m s n1 n2 e1) (inv_Atom_51 m s n1 n2 e1)) 
 (ite inv_b65 
 (or (inv_Atom_52 m s n1 n2 e1) (inv_Atom_53 m s n1 n2 e1)) 
 (ite inv_b66 
 (=> (inv_Atom_54 m s n1 n2 e1) (inv_Atom_55 m s n1 n2 e1)) 
 (not (inv_Atom_56 m s n1 n2 e1)))))))))))
)
(define-fun inv_Epoch__273 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__254 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b746 
 n1 
 n2)
)
(define-fun inv_Epoch__175 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__260 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__301 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__189 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__247 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b529 
 n1 
 n2)
)
(define-fun inv_Epoch__47 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b281 
 e1 
 (ep m s (inv_Node__232 m s n1 n2 e1)))
)
(define-fun inv_Node__186 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b758 
 n1 
 n2)
)
(define-fun inv_Epoch__21 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b269 
 e1 
 (ep m s (inv_Node__221 m s n1 n2 e1)))
)
(define-fun inv_Epoch__176 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_26 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b154 
 (held m s (inv_Node__116 m s n1 n2 e1)) 
 (ite inv_b155 
 (locked m s (inv_Epoch__126 m s n1 n2 e1) (inv_Node__117 m s n1 n2 e1)) 
 (ite inv_b156 
 (transfer m s (inv_Epoch__127 m s n1 n2 e1) (inv_Node__118 m s n1 n2 e1)) 
 (ite inv_b157 
 (le m (inv_Epoch__128 m s n1 n2 e1) (inv_Epoch__129 m s n1 n2 e1)) 
 (ite inv_b158 
 (= (inv_Node__119 m s n1 n2 e1) (inv_Node__120 m s n1 n2 e1)) 
 (= (inv_Epoch__130 m s n1 n2 e1) (inv_Epoch__131 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__28 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b83 
 e1 
 (ep m s (inv_Node__46 m s n1 n2 e1)))
)
(define-fun inv_Node__1 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b435 
 n1 
 n2)
)
(define-fun inv_Node__336 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b596 
 n1 
 n2)
)
(define-fun inv_Node__162 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b531 
 n1 
 n2)
)
(define-fun inv_Node__284 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b672 
 n1 
 n2)
)
(define-fun inv_Epoch__22 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b426 
 e1 
 (ep m s (inv_Node__353 m s n1 n2 e1)))
)
(define-fun inv_Atom_30 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b133 
 (held m s (inv_Node__96 m s n1 n2 e1)) 
 (ite inv_b134 
 (locked m s (inv_Epoch__102 m s n1 n2 e1) (inv_Node__97 m s n1 n2 e1)) 
 (ite inv_b135 
 (transfer m s (inv_Epoch__103 m s n1 n2 e1) (inv_Node__98 m s n1 n2 e1)) 
 (ite inv_b136 
 (le m (inv_Epoch__104 m s n1 n2 e1) (inv_Epoch__105 m s n1 n2 e1)) 
 (ite inv_b137 
 (= (inv_Node__99 m s n1 n2 e1) (inv_Node__100 m s n1 n2 e1)) 
 (= (inv_Epoch__106 m s n1 n2 e1) (inv_Epoch__107 m s n1 n2 e1)))))))
)
(define-fun inv_Node__20 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b419 
 n1 
 n2)
)
(define-fun inv_Epoch__346 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__5 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b361 
 e1 
 (ep m s (inv_Node__298 m s n1 n2 e1)))
)
(define-fun inv_Epoch__308 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__170 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b504 
 n1 
 n2)
)
(define-fun inv_Epoch__342 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__155 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b525 
 n1 
 n2)
)
(define-fun inv_Node__161 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b526 
 n1 
 n2)
)
(define-fun inv_Node__67 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b590 
 n1 
 n2)
)
(define-fun inv_Epoch__269 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__2 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b307 
 e1 
 (ep m s (inv_Node__254 m s n1 n2 e1)))
)
(define-fun inv_Epoch__205 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__70 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b624 
 n1 
 n2)
)
(define-fun inv_Node__109 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b553 
 n1 
 n2)
)
(define-fun inv_Epoch__169 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__12 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b317 
 n1 
 n2)
)
(define-fun inv_Atom_61 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b143 
 (held m s (inv_Node__106 m s n1 n2 e1)) 
 (ite inv_b144 
 (locked m s (inv_Epoch__114 m s n1 n2 e1) (inv_Node__107 m s n1 n2 e1)) 
 (ite inv_b145 
 (transfer m s (inv_Epoch__115 m s n1 n2 e1) (inv_Node__108 m s n1 n2 e1)) 
 (ite inv_b146 
 (le m (inv_Epoch__116 m s n1 n2 e1) (inv_Epoch__117 m s n1 n2 e1)) 
 (ite inv_b147 
 (= (inv_Node__109 m s n1 n2 e1) (inv_Node__110 m s n1 n2 e1)) 
 (= (inv_Epoch__118 m s n1 n2 e1) (inv_Epoch__119 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__201 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__25 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b410 
 e1 
 (ep m s (inv_Node__341 m s n1 n2 e1)))
)
(define-fun inv_Node__21 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b199 
 n1 
 n2)
)
(define-fun inv_Epoch__45 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b406 
 e1 
 (ep m s (inv_Node__339 m s n1 n2 e1)))
)
(define-fun inv_Epoch__43 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b398 
 e1 
 (ep m s (inv_Node__332 m s n1 n2 e1)))
)
(define-fun inv_Epoch__268 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__357 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__14 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b381 
 n1 
 n2)
)
(define-fun inv_Epoch__274 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__358 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__261 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__190 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b511 
 n1 
 n2)
)
(define-fun inv_Epoch__77 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__23 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b420 
 n1 
 n2)
)
(define-fun inv_Atom_25 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b230 
 (held m s (inv_Node__186 m s n1 n2 e1)) 
 (ite inv_b231 
 (locked m s (inv_Epoch__204 m s n1 n2 e1) (inv_Node__187 m s n1 n2 e1)) 
 (ite inv_b232 
 (transfer m s (inv_Epoch__205 m s n1 n2 e1) (inv_Node__188 m s n1 n2 e1)) 
 (ite inv_b233 
 (le m (inv_Epoch__206 m s n1 n2 e1) (inv_Epoch__207 m s n1 n2 e1)) 
 (ite inv_b234 
 (= (inv_Node__189 m s n1 n2 e1) (inv_Node__190 m s n1 n2 e1)) 
 (= (inv_Epoch__208 m s n1 n2 e1) (inv_Epoch__209 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__168 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__255 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b480 
 n1 
 n2)
)
(define-fun inv_Epoch__26 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b298 
 e1 
 (ep m s (inv_Node__247 m s n1 n2 e1)))
)
(define-fun inv_Node__282 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b720 
 n1 
 n2)
)
(define-fun inv_Node__79 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b491 
 n1 
 n2)
)
(define-fun inv_Epoch__202 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_7 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b67 
 (held m s (inv_Node__35 m s n1 n2 e1)) 
 (ite inv_b68 
 (locked m s (inv_Epoch__42 m s n1 n2 e1) (inv_Node__36 m s n1 n2 e1)) 
 (ite inv_b69 
 (transfer m s (inv_Epoch__43 m s n1 n2 e1) (inv_Node__37 m s n1 n2 e1)) 
 (ite inv_b70 
 (le m (inv_Epoch__44 m s n1 n2 e1) (inv_Epoch__45 m s n1 n2 e1)) 
 (ite inv_b71 
 (= (inv_Node__38 m s n1 n2 e1) (inv_Node__39 m s n1 n2 e1)) 
 (ite inv_b72 
 (= (inv_Epoch__46 m s n1 n2 e1) (inv_Epoch__47 m s n1 n2 e1)) 
 (ite inv_b73 
 (and (inv_Atom_57 m s n1 n2 e1) (inv_Atom_58 m s n1 n2 e1)) 
 (ite inv_b74 
 (or (inv_Atom_59 m s n1 n2 e1) (inv_Atom_60 m s n1 n2 e1)) 
 (ite inv_b75 
 (=> (inv_Atom_61 m s n1 n2 e1) (inv_Atom_62 m s n1 n2 e1)) 
 (not (inv_Atom_63 m s n1 n2 e1)))))))))))
)
(define-fun inv_Epoch__306 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__15 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b308 
 e1 
 (ep m s (inv_Node__255 m s n1 n2 e1)))
)
(define-fun inv_Node__174 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b649 
 n1 
 n2)
)
(define-fun inv_Node__18 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b159 
 n1 
 n2)
)
(define-fun inv_Node__304 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b566 
 n1 
 n2)
)
(define-fun inv_Node__15 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b325 
 n1 
 n2)
)
(define-fun inv_Atom_29 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b103 
 (held m s (inv_Node__66 m s n1 n2 e1)) 
 (ite inv_b104 
 (locked m s (inv_Epoch__72 m s n1 n2 e1) (inv_Node__67 m s n1 n2 e1)) 
 (ite inv_b105 
 (transfer m s (inv_Epoch__73 m s n1 n2 e1) (inv_Node__68 m s n1 n2 e1)) 
 (ite inv_b106 
 (le m (inv_Epoch__74 m s n1 n2 e1) (inv_Epoch__75 m s n1 n2 e1)) 
 (ite inv_b107 
 (= (inv_Node__69 m s n1 n2 e1) (inv_Node__70 m s n1 n2 e1)) 
 (= (inv_Epoch__76 m s n1 n2 e1) (inv_Epoch__77 m s n1 n2 e1)))))))
)
(define-fun inv_Node__251 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b759 
 n1 
 n2)
)
(define-fun inv_Node__243 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b509 
 n1 
 n2)
)
(define-fun inv_Epoch__264 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__296 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__307 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__286 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b481 
 n1 
 n2)
)
(define-fun inv_Epoch__197 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__271 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__338 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b554 
 n1 
 n2)
)
(define-fun inv_Atom_22 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b292 
 (held m s (inv_Node__241 m s n1 n2 e1)) 
 (ite inv_b293 
 (locked m s (inv_Epoch__258 m s n1 n2 e1) (inv_Node__242 m s n1 n2 e1)) 
 (ite inv_b294 
 (transfer m s (inv_Epoch__259 m s n1 n2 e1) (inv_Node__243 m s n1 n2 e1)) 
 (ite inv_b295 
 (le m (inv_Epoch__260 m s n1 n2 e1) (inv_Epoch__261 m s n1 n2 e1)) 
 (ite inv_b296 
 (= (inv_Node__244 m s n1 n2 e1) (inv_Node__245 m s n1 n2 e1)) 
 (= (inv_Epoch__262 m s n1 n2 e1) (inv_Epoch__263 m s n1 n2 e1)))))))
)
(define-fun inv_Node__168 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b523 
 n1 
 n2)
)
(define-fun inv_Epoch__355 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_42 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b345 
 (held m s (inv_Node__283 m s n1 n2 e1)) 
 (ite inv_b346 
 (locked m s (inv_Epoch__300 m s n1 n2 e1) (inv_Node__284 m s n1 n2 e1)) 
 (ite inv_b347 
 (transfer m s (inv_Epoch__301 m s n1 n2 e1) (inv_Node__285 m s n1 n2 e1)) 
 (ite inv_b348 
 (le m (inv_Epoch__302 m s n1 n2 e1) (inv_Epoch__303 m s n1 n2 e1)) 
 (ite inv_b349 
 (= (inv_Node__286 m s n1 n2 e1) (inv_Node__287 m s n1 n2 e1)) 
 (= (inv_Epoch__304 m s n1 n2 e1) (inv_Epoch__305 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__298 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__203 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__186 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__300 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b753 
 n1 
 n2)
)
(define-fun inv_Epoch__199 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__309 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__85 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b695 
 n1 
 n2)
)
(define-fun inv_Node__84 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b550 
 n1 
 n2)
)
(define-fun inv_Epoch__200 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_15 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b224 
 (held m s (inv_Node__181 m s n1 n2 e1)) 
 (ite inv_b225 
 (locked m s (inv_Epoch__198 m s n1 n2 e1) (inv_Node__182 m s n1 n2 e1)) 
 (ite inv_b226 
 (transfer m s (inv_Epoch__199 m s n1 n2 e1) (inv_Node__183 m s n1 n2 e1)) 
 (ite inv_b227 
 (le m (inv_Epoch__200 m s n1 n2 e1) (inv_Epoch__201 m s n1 n2 e1)) 
 (ite inv_b228 
 (= (inv_Node__184 m s n1 n2 e1) (inv_Node__185 m s n1 n2 e1)) 
 (= (inv_Epoch__202 m s n1 n2 e1) (inv_Epoch__203 m s n1 n2 e1)))))))
)
(define-fun inv_Node__250 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b668 
 n1 
 n2)
)
(define-fun inv_Epoch__27 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b287 
 e1 
 (ep m s (inv_Node__238 m s n1 n2 e1)))
)
(define-fun inv_Node__88 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b463 
 n1 
 n2)
)
(define-fun inv_Epoch__347 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_8 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b350 
 (held m s (inv_Node__288 m s n1 n2 e1)) 
 (ite inv_b351 
 (locked m s (inv_Epoch__306 m s n1 n2 e1) (inv_Node__289 m s n1 n2 e1)) 
 (ite inv_b352 
 (transfer m s (inv_Epoch__307 m s n1 n2 e1) (inv_Node__290 m s n1 n2 e1)) 
 (ite inv_b353 
 (le m (inv_Epoch__308 m s n1 n2 e1) (inv_Epoch__309 m s n1 n2 e1)) 
 (ite inv_b354 
 (= (inv_Node__291 m s n1 n2 e1) (inv_Node__292 m s n1 n2 e1)) 
 (= (inv_Epoch__310 m s n1 n2 e1) (inv_Epoch__311 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__187 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__9 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b249 
 e1 
 (ep m s (inv_Node__204 m s n1 n2 e1)))
)
(define-fun inv_Epoch__6 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b368 
 e1 
 (ep m s (inv_Node__305 m s n1 n2 e1)))
)
(define-fun inv_Epoch__270 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__172 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b597 
 n1 
 n2)
)
(define-fun inv_Epoch__322 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_32 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b118 
 (held m s (inv_Node__81 m s n1 n2 e1)) 
 (ite inv_b119 
 (locked m s (inv_Epoch__90 m s n1 n2 e1) (inv_Node__82 m s n1 n2 e1)) 
 (ite inv_b120 
 (transfer m s (inv_Epoch__91 m s n1 n2 e1) (inv_Node__83 m s n1 n2 e1)) 
 (ite inv_b121 
 (le m (inv_Epoch__92 m s n1 n2 e1) (inv_Epoch__93 m s n1 n2 e1)) 
 (ite inv_b122 
 (= (inv_Node__84 m s n1 n2 e1) (inv_Node__85 m s n1 n2 e1)) 
 (= (inv_Epoch__94 m s n1 n2 e1) (inv_Epoch__95 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__188 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__22 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b306 
 n1 
 n2)
)
(define-fun inv_Epoch__88 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__157 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b749 
 n1 
 n2)
)
(define-fun inv_Node__171 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b748 
 n1 
 n2)
)
(define-fun inv_Epoch__294 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__320 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Epoch__344 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__76 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b634 
 n1 
 n2)
)
(define-fun inv_Node__159 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b739 
 n1 
 n2)
)
(define-fun inv_Atom_31 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b194 
 (held m s (inv_Node__153 m s n1 n2 e1)) 
 (ite inv_b195 
 (locked m s (inv_Epoch__168 m s n1 n2 e1) (inv_Node__154 m s n1 n2 e1)) 
 (ite inv_b196 
 (transfer m s (inv_Epoch__169 m s n1 n2 e1) (inv_Node__155 m s n1 n2 e1)) 
 (ite inv_b197 
 (le m (inv_Epoch__170 m s n1 n2 e1) (inv_Epoch__171 m s n1 n2 e1)) 
 (ite inv_b198 
 (= (inv_Node__156 m s n1 n2 e1) (inv_Node__157 m s n1 n2 e1)) 
 (= (inv_Epoch__172 m s n1 n2 e1) (inv_Epoch__173 m s n1 n2 e1)))))))
)
(define-fun inv_Atom_23 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b210 
 (held m s (inv_Node__168 m s n1 n2 e1)) 
 (ite inv_b211 
 (locked m s (inv_Epoch__186 m s n1 n2 e1) (inv_Node__169 m s n1 n2 e1)) 
 (ite inv_b212 
 (transfer m s (inv_Epoch__187 m s n1 n2 e1) (inv_Node__170 m s n1 n2 e1)) 
 (ite inv_b213 
 (le m (inv_Epoch__188 m s n1 n2 e1) (inv_Epoch__189 m s n1 n2 e1)) 
 (ite inv_b214 
 (= (inv_Node__171 m s n1 n2 e1) (inv_Node__172 m s n1 n2 e1)) 
 (= (inv_Epoch__190 m s n1 n2 e1) (inv_Epoch__191 m s n1 n2 e1)))))))
)
(define-fun inv_Node__19 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b360 
 n1 
 n2)
)
(define-fun inv_Epoch__299 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__257 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b676 
 n1 
 n2)
)
(define-fun inv_Node__256 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b742 
 n1 
 n2)
)
(define-fun inv_Atom_2 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b22 
 (held m s (inv_Node__10 m s n1 n2 e1)) 
 (ite inv_b23 
 (locked m s (inv_Epoch__12 m s n1 n2 e1) (inv_Node__11 m s n1 n2 e1)) 
 (ite inv_b24 
 (transfer m s (inv_Epoch__13 m s n1 n2 e1) (inv_Node__12 m s n1 n2 e1)) 
 (ite inv_b25 
 (le m (inv_Epoch__14 m s n1 n2 e1) (inv_Epoch__15 m s n1 n2 e1)) 
 (ite inv_b26 
 (= (inv_Node__13 m s n1 n2 e1) (inv_Node__14 m s n1 n2 e1)) 
 (ite inv_b27 
 (= (inv_Epoch__16 m s n1 n2 e1) (inv_Epoch__17 m s n1 n2 e1)) 
 (ite inv_b28 
 (and (inv_Atom_22 m s n1 n2 e1) (inv_Atom_23 m s n1 n2 e1)) 
 (ite inv_b29 
 (or (inv_Atom_24 m s n1 n2 e1) (inv_Atom_25 m s n1 n2 e1)) 
 (ite inv_b30 
 (=> (inv_Atom_26 m s n1 n2 e1) (inv_Atom_27 m s n1 n2 e1)) 
 (not (inv_Atom_28 m s n1 n2 e1)))))))))))
)
(define-fun inv_Node__252 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b465 
 n1 
 n2)
)
(define-fun inv_Node__9 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b315 
 n1 
 n2)
)
(define-fun inv_Epoch__343 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_40 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b300 
 (held m s (inv_Node__248 m s n1 n2 e1)) 
 (ite inv_b301 
 (locked m s (inv_Epoch__264 m s n1 n2 e1) (inv_Node__249 m s n1 n2 e1)) 
 (ite inv_b302 
 (transfer m s (inv_Epoch__265 m s n1 n2 e1) (inv_Node__250 m s n1 n2 e1)) 
 (ite inv_b303 
 (le m (inv_Epoch__266 m s n1 n2 e1) (inv_Epoch__267 m s n1 n2 e1)) 
 (ite inv_b304 
 (= (inv_Node__251 m s n1 n2 e1) (inv_Node__252 m s n1 n2 e1)) 
 (= (inv_Epoch__268 m s n1 n2 e1) (inv_Epoch__269 m s n1 n2 e1)))))))
)
(define-fun inv_Node__323 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b471 
 n1 
 n2)
)
(define-fun inv_Epoch__1 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b215 
 e1 
 (ep m s (inv_Node__173 m s n1 n2 e1)))
)
(define-fun inv_Node__321 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b646 
 n1 
 n2)
)
(define-fun inv_Epoch__84 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_6 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b40 
 (held m s (inv_Node__20 m s n1 n2 e1)) 
 (ite inv_b41 
 (locked m s (inv_Epoch__24 m s n1 n2 e1) (inv_Node__21 m s n1 n2 e1)) 
 (ite inv_b42 
 (transfer m s (inv_Epoch__25 m s n1 n2 e1) (inv_Node__22 m s n1 n2 e1)) 
 (ite inv_b43 
 (le m (inv_Epoch__26 m s n1 n2 e1) (inv_Epoch__27 m s n1 n2 e1)) 
 (ite inv_b44 
 (= (inv_Node__23 m s n1 n2 e1) (inv_Node__24 m s n1 n2 e1)) 
 (ite inv_b45 
 (= (inv_Epoch__28 m s n1 n2 e1) (inv_Epoch__29 m s n1 n2 e1)) 
 (ite inv_b46 
 (and (inv_Atom_36 m s n1 n2 e1) (inv_Atom_37 m s n1 n2 e1)) 
 (ite inv_b47 
 (or (inv_Atom_38 m s n1 n2 e1) (inv_Atom_39 m s n1 n2 e1)) 
 (ite inv_b48 
 (=> (inv_Atom_40 m s n1 n2 e1) (inv_Atom_41 m s n1 n2 e1)) 
 (not (inv_Atom_42 m s n1 n2 e1)))))))))))
)
(define-fun inv_Epoch__295 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_13 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b310 
 (held m s (inv_Node__256 m s n1 n2 e1)) 
 (ite inv_b311 
 (locked m s (inv_Epoch__270 m s n1 n2 e1) (inv_Node__257 m s n1 n2 e1)) 
 (ite inv_b312 
 (transfer m s (inv_Epoch__271 m s n1 n2 e1) (inv_Node__258 m s n1 n2 e1)) 
 (ite inv_b313 
 (le m (inv_Epoch__272 m s n1 n2 e1) (inv_Epoch__273 m s n1 n2 e1)) 
 (ite inv_b314 
 (= (inv_Node__259 m s n1 n2 e1) (inv_Node__260 m s n1 n2 e1)) 
 (= (inv_Epoch__274 m s n1 n2 e1) (inv_Epoch__275 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__194 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__77 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b599 
 n1 
 n2)
)
(define-fun inv_Atom_10 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b387 
 (held m s (inv_Node__321 m s n1 n2 e1)) 
 (ite inv_b388 
 (locked m s (inv_Epoch__342 m s n1 n2 e1) (inv_Node__322 m s n1 n2 e1)) 
 (ite inv_b389 
 (transfer m s (inv_Epoch__343 m s n1 n2 e1) (inv_Node__323 m s n1 n2 e1)) 
 (ite inv_b390 
 (le m (inv_Epoch__344 m s n1 n2 e1) (inv_Epoch__345 m s n1 n2 e1)) 
 (ite inv_b391 
 (= (inv_Node__324 m s n1 n2 e1) (inv_Node__325 m s n1 n2 e1)) 
 (= (inv_Epoch__346 m s n1 n2 e1) (inv_Epoch__347 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__195 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_33 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b340 
 (held m s (inv_Node__278 m s n1 n2 e1)) 
 (ite inv_b341 
 (locked m s (inv_Epoch__294 m s n1 n2 e1) (inv_Node__279 m s n1 n2 e1)) 
 (ite inv_b342 
 (transfer m s (inv_Epoch__295 m s n1 n2 e1) (inv_Node__280 m s n1 n2 e1)) 
 (ite inv_b343 
 (le m (inv_Epoch__296 m s n1 n2 e1) (inv_Epoch__297 m s n1 n2 e1)) 
 (ite inv_b344 
 (= (inv_Node__281 m s n1 n2 e1) (inv_Node__282 m s n1 n2 e1)) 
 (= (inv_Epoch__298 m s n1 n2 e1) (inv_Epoch__299 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__321 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_1 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b4 
 (held m s (inv_Node__0 m s n1 n2 e1)) 
 (ite inv_b5 
 (locked m s (inv_Epoch__0 m s n1 n2 e1) (inv_Node__1 m s n1 n2 e1)) 
 (ite inv_b6 
 (transfer m s (inv_Epoch__1 m s n1 n2 e1) (inv_Node__2 m s n1 n2 e1)) 
 (ite inv_b7 
 (le m (inv_Epoch__2 m s n1 n2 e1) (inv_Epoch__3 m s n1 n2 e1)) 
 (ite inv_b8 
 (= (inv_Node__3 m s n1 n2 e1) (inv_Node__4 m s n1 n2 e1)) 
 (ite inv_b9 
 (= (inv_Epoch__4 m s n1 n2 e1) (inv_Epoch__5 m s n1 n2 e1)) 
 (ite inv_b10 
 (and (inv_Atom_8 m s n1 n2 e1) (inv_Atom_9 m s n1 n2 e1)) 
 (ite inv_b11 
 (or (inv_Atom_10 m s n1 n2 e1) (inv_Atom_11 m s n1 n2 e1)) 
 (ite inv_b12 
 (=> (inv_Atom_12 m s n1 n2 e1) (inv_Atom_13 m s n1 n2 e1)) 
 (not (inv_Atom_14 m s n1 n2 e1)))))))))))
)
(define-fun inv_Epoch__86 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Atom_18 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b216 
 (held m s (inv_Node__174 m s n1 n2 e1)) 
 (ite inv_b217 
 (locked m s (inv_Epoch__192 m s n1 n2 e1) (inv_Node__175 m s n1 n2 e1)) 
 (ite inv_b218 
 (transfer m s (inv_Epoch__193 m s n1 n2 e1) (inv_Node__176 m s n1 n2 e1)) 
 (ite inv_b219 
 (le m (inv_Epoch__194 m s n1 n2 e1) (inv_Epoch__195 m s n1 n2 e1)) 
 (ite inv_b220 
 (= (inv_Node__177 m s n1 n2 e1) (inv_Node__178 m s n1 n2 e1)) 
 (= (inv_Epoch__196 m s n1 n2 e1) (inv_Epoch__197 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__87 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
e1
)
(define-fun inv_Node__78 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b627 
 n1 
 n2)
)
(define-fun inv_Node__160 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b618 
 n1 
 n2)
)
(define-fun inv_Epoch__8 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b235 
 e1 
 (ep m s (inv_Node__191 m s n1 n2 e1)))
)
(define-fun inv_Atom_20 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b400 
 (held m s (inv_Node__334 m s n1 n2 e1)) 
 (ite inv_b401 
 (locked m s (inv_Epoch__354 m s n1 n2 e1) (inv_Node__335 m s n1 n2 e1)) 
 (ite inv_b402 
 (transfer m s (inv_Epoch__355 m s n1 n2 e1) (inv_Node__336 m s n1 n2 e1)) 
 (ite inv_b403 
 (le m (inv_Epoch__356 m s n1 n2 e1) (inv_Epoch__357 m s n1 n2 e1)) 
 (ite inv_b404 
 (= (inv_Node__337 m s n1 n2 e1) (inv_Node__338 m s n1 n2 e1)) 
 (= (inv_Epoch__358 m s n1 n2 e1) (inv_Epoch__359 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__19 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b408 
 e1 
 (ep m s (inv_Node__340 m s n1 n2 e1)))
)
(define-fun inv_Epoch__11 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b297 
 e1 
 (ep m s (inv_Node__246 m s n1 n2 e1)))
)
(define-fun inv_Node__7 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b328 
 n1 
 n2)
)
(define-fun inv_Atom_17 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b113 
 (held m s (inv_Node__76 m s n1 n2 e1)) 
 (ite inv_b114 
 (locked m s (inv_Epoch__84 m s n1 n2 e1) (inv_Node__77 m s n1 n2 e1)) 
 (ite inv_b115 
 (transfer m s (inv_Epoch__85 m s n1 n2 e1) (inv_Node__78 m s n1 n2 e1)) 
 (ite inv_b116 
 (le m (inv_Epoch__86 m s n1 n2 e1) (inv_Epoch__87 m s n1 n2 e1)) 
 (ite inv_b117 
 (= (inv_Node__79 m s n1 n2 e1) (inv_Node__80 m s n1 n2 e1)) 
 (= (inv_Epoch__88 m s n1 n2 e1) (inv_Epoch__89 m s n1 n2 e1)))))))
)
(define-fun inv_Node__17 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b291 
 n1 
 n2)
)
(define-fun inv_Node__8 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b324 
 n1 
 n2)
)
(define-fun inv_Atom_21 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b363 
 (held m s (inv_Node__300 m s n1 n2 e1)) 
 (ite inv_b364 
 (locked m s (inv_Epoch__318 m s n1 n2 e1) (inv_Node__301 m s n1 n2 e1)) 
 (ite inv_b365 
 (transfer m s (inv_Epoch__319 m s n1 n2 e1) (inv_Node__302 m s n1 n2 e1)) 
 (ite inv_b366 
 (le m (inv_Epoch__320 m s n1 n2 e1) (inv_Epoch__321 m s n1 n2 e1)) 
 (ite inv_b367 
 (= (inv_Node__303 m s n1 n2 e1) (inv_Node__304 m s n1 n2 e1)) 
 (= (inv_Epoch__322 m s n1 n2 e1) (inv_Epoch__323 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__10 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b97 
 e1 
 (ep m s (inv_Node__60 m s n1 n2 e1)))
)
(define-fun inv_Atom_16 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b200 
 (held m s (inv_Node__158 m s n1 n2 e1)) 
 (ite inv_b201 
 (locked m s (inv_Epoch__174 m s n1 n2 e1) (inv_Node__159 m s n1 n2 e1)) 
 (ite inv_b202 
 (transfer m s (inv_Epoch__175 m s n1 n2 e1) (inv_Node__160 m s n1 n2 e1)) 
 (ite inv_b203 
 (le m (inv_Epoch__176 m s n1 n2 e1) (inv_Epoch__177 m s n1 n2 e1)) 
 (ite inv_b204 
 (= (inv_Node__161 m s n1 n2 e1) (inv_Node__162 m s n1 n2 e1)) 
 (= (inv_Epoch__178 m s n1 n2 e1) (inv_Epoch__179 m s n1 n2 e1)))))))
)
(define-fun inv_Epoch__7 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b125 
 e1 
 (ep m s (inv_Node__88 m s n1 n2 e1)))
)
(define-fun inv_Node__299 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Node
(ite inv_b507 
 n1 
 n2)
)
(define-fun inv_Atom_5 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b13 
 (held m s (inv_Node__5 m s n1 n2 e1)) 
 (ite inv_b14 
 (locked m s (inv_Epoch__6 m s n1 n2 e1) (inv_Node__6 m s n1 n2 e1)) 
 (ite inv_b15 
 (transfer m s (inv_Epoch__7 m s n1 n2 e1) (inv_Node__7 m s n1 n2 e1)) 
 (ite inv_b16 
 (le m (inv_Epoch__8 m s n1 n2 e1) (inv_Epoch__9 m s n1 n2 e1)) 
 (ite inv_b17 
 (= (inv_Node__8 m s n1 n2 e1) (inv_Node__9 m s n1 n2 e1)) 
 (ite inv_b18 
 (= (inv_Epoch__10 m s n1 n2 e1) (inv_Epoch__11 m s n1 n2 e1)) 
 (ite inv_b19 
 (and (inv_Atom_15 m s n1 n2 e1) (inv_Atom_16 m s n1 n2 e1)) 
 (ite inv_b20 
 (or (inv_Atom_17 m s n1 n2 e1) (inv_Atom_18 m s n1 n2 e1)) 
 (ite inv_b21 
 (=> (inv_Atom_19 m s n1 n2 e1) (inv_Atom_20 m s n1 n2 e1)) 
 (not (inv_Atom_21 m s n1 n2 e1)))))))))))
)
(define-fun inv_Epoch__18 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Epoch
(ite inv_b362 
 e1 
 (ep m s (inv_Node__299 m s n1 n2 e1)))
)
(define-fun inv_Atom_4 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b31 
 (held m s (inv_Node__15 m s n1 n2 e1)) 
 (ite inv_b32 
 (locked m s (inv_Epoch__18 m s n1 n2 e1) (inv_Node__16 m s n1 n2 e1)) 
 (ite inv_b33 
 (transfer m s (inv_Epoch__19 m s n1 n2 e1) (inv_Node__17 m s n1 n2 e1)) 
 (ite inv_b34 
 (le m (inv_Epoch__20 m s n1 n2 e1) (inv_Epoch__21 m s n1 n2 e1)) 
 (ite inv_b35 
 (= (inv_Node__18 m s n1 n2 e1) (inv_Node__19 m s n1 n2 e1)) 
 (ite inv_b36 
 (= (inv_Epoch__22 m s n1 n2 e1) (inv_Epoch__23 m s n1 n2 e1)) 
 (ite inv_b37 
 (and (inv_Atom_29 m s n1 n2 e1) (inv_Atom_30 m s n1 n2 e1)) 
 (ite inv_b38 
 (or (inv_Atom_31 m s n1 n2 e1) (inv_Atom_32 m s n1 n2 e1)) 
 (ite inv_b39 
 (=> (inv_Atom_33 m s n1 n2 e1) (inv_Atom_34 m s n1 n2 e1)) 
 (not (inv_Atom_35 m s n1 n2 e1)))))))))))
)
(define-fun inv_Start_0 ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
(ite inv_b0 
 (inv_Atom_0 m s n1 n2 e1) 
 (ite inv_b1 
 (and (inv_Atom_1 m s n1 n2 e1) (inv_Atom_2 m s n1 n2 e1)) 
 (ite inv_b2 
 (or (inv_Atom_3 m s n1 n2 e1) (inv_Atom_4 m s n1 n2 e1)) 
 (ite inv_b3 
 (=> (inv_Atom_5 m s n1 n2 e1) (inv_Atom_6 m s n1 n2 e1)) 
 (not (inv_Atom_7 m s n1 n2 e1))))))
)

;Function to be synthesised
(define-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (inv_Start_0 m s n1 n2 e1))
; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M0_trace_pos, S1, N1) == False,
;      held(Model_M0_trace_pos, S1, N2) == False,
;      transfer(Model_M0_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M0_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M0_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M0_trace_pos, S1, E2, N2) == False,
;      locked(Model_M0_trace_pos, S1, E1, N1) == False,
;      locked(Model_M0_trace_pos, S1, E1, N2) == False,
;      locked(Model_M0_trace_pos, S1, E2, N1) == False,
;      locked(Model_M0_trace_pos, S1, E2, N2) == False,
;      le(Model_M0_trace_pos,
;         E1,
;         ep(Model_M0_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M0_trace_pos,
;         E2,
;         ep(Model_M0_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M0_trace_pos,
;         ep(Model_M0_trace_pos, S1, N1),
;         ep(Model_M0_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M0_trace_pos,
;         ep(Model_M0_trace_pos, S1, N2),
;         ep(Model_M0_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M0_trace_pos,
;         E1,
;         ep(Model_M0_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M0_trace_pos,
;         E2,
;         ep(Model_M0_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M0_trace_pos) != N1,
;      first(Model_M0_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_M0_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M0_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M0_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M0_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M0_trace_pos S1 Node!val!0) false)
     (= (held Model_M0_trace_pos S1 Node!val!1) false)
     (= (held Model_M0_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M0_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M0_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M0_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M0_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M0_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M0_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M0_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M0_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M0_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M0_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M0_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M0_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M0_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M0_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M0_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M0_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M0_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M0_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M0_trace_pos) Epoch!val!3)
     (= (one Model_M0_trace_pos) Epoch!val!3)
     (= (first Model_M0_trace_pos) Node!val!2)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M0_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M1_trace_pos, S1, N1) == False,
;      held(Model_M1_trace_pos, S1, N2) == False,
;      transfer(Model_M1_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M1_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M1_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M1_trace_pos, S1, E2, N2) == False,
;      locked(Model_M1_trace_pos, S1, E1, N1) == False,
;      locked(Model_M1_trace_pos, S1, E1, N2) == True,
;      locked(Model_M1_trace_pos, S1, E2, N1) == False,
;      locked(Model_M1_trace_pos, S1, E2, N2) == False,
;      le(Model_M1_trace_pos,
;         E1,
;         ep(Model_M1_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M1_trace_pos,
;         E2,
;         ep(Model_M1_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M1_trace_pos,
;         ep(Model_M1_trace_pos, S1, N1),
;         ep(Model_M1_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M1_trace_pos,
;         ep(Model_M1_trace_pos, S1, N2),
;         ep(Model_M1_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M1_trace_pos,
;         E1,
;         ep(Model_M1_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M1_trace_pos,
;         E2,
;         ep(Model_M1_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M1_trace_pos) != N1,
;      first(Model_M1_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M1_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     false
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     false
;     true)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M1_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M1_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M1_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M1_trace_pos S1 Node!val!0) false)
     (= (held Model_M1_trace_pos S1 Node!val!1) false)
     (= (held Model_M1_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!3 Node!val!0) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!3 Node!val!1) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!3 Node!val!2) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!0 Node!val!2) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!2 Node!val!0) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!2 Node!val!1) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!2 Node!val!2) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M1_trace_pos S1 Epoch!val!1 Node!val!2) true)
     (= (locked Model_M1_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M1_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M1_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M1_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M1_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M1_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M1_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M1_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M1_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M1_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M1_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M1_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M1_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M1_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M1_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M1_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M1_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M1_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M1_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M1_trace_pos) Epoch!val!3)
     (= (one Model_M1_trace_pos) Epoch!val!3)
     (= (first Model_M1_trace_pos) Node!val!2)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M1_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M2_trace_pos, S1, N1) == False,
;      held(Model_M2_trace_pos, S1, N2) == False,
;      transfer(Model_M2_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M2_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M2_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M2_trace_pos, S1, E2, N2) == True,
;      locked(Model_M2_trace_pos, S1, E1, N1) == False,
;      locked(Model_M2_trace_pos, S1, E1, N2) == False,
;      locked(Model_M2_trace_pos, S1, E2, N1) == False,
;      locked(Model_M2_trace_pos, S1, E2, N2) == False,
;      le(Model_M2_trace_pos,
;         E1,
;         ep(Model_M2_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M2_trace_pos,
;         E2,
;         ep(Model_M2_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M2_trace_pos,
;         ep(Model_M2_trace_pos, S1, N1),
;         ep(Model_M2_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M2_trace_pos,
;         ep(Model_M2_trace_pos, S1, N2),
;         ep(Model_M2_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M2_trace_pos,
;         E1,
;         ep(Model_M2_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M2_trace_pos,
;         E2,
;         ep(Model_M2_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M2_trace_pos) != N1,
;      first(Model_M2_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M2_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M2_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M2_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M2_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M2_trace_pos S1 Node!val!0) false)
     (= (held Model_M2_trace_pos S1 Node!val!1) false)
     (= (held Model_M2_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M2_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M2_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M2_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M2_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M2_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M2_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M2_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M2_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M2_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M2_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M2_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M2_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M2_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M2_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M2_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M2_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M2_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M2_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M2_trace_pos) Epoch!val!3)
     (= (one Model_M2_trace_pos) Epoch!val!3)
     (= (first Model_M2_trace_pos) Node!val!2)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M2_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M3_trace_pos, S1, N1) == False,
;      held(Model_M3_trace_pos, S1, N2) == False,
;      transfer(Model_M3_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M3_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M3_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M3_trace_pos, S1, E2, N2) == False,
;      locked(Model_M3_trace_pos, S1, E1, N1) == False,
;      locked(Model_M3_trace_pos, S1, E1, N2) == False,
;      locked(Model_M3_trace_pos, S1, E2, N1) == False,
;      locked(Model_M3_trace_pos, S1, E2, N2) == False,
;      le(Model_M3_trace_pos,
;         E1,
;         ep(Model_M3_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M3_trace_pos,
;         E2,
;         ep(Model_M3_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M3_trace_pos,
;         ep(Model_M3_trace_pos, S1, N1),
;         ep(Model_M3_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M3_trace_pos,
;         ep(Model_M3_trace_pos, S1, N2),
;         ep(Model_M3_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M3_trace_pos,
;         E1,
;         ep(Model_M3_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M3_trace_pos,
;         E2,
;         ep(Model_M3_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M3_trace_pos) != N1,
;      first(Model_M3_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M3_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M3_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M3_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M3_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M3_trace_pos S1 Node!val!0) false)
     (= (held Model_M3_trace_pos S1 Node!val!1) false)
     (= (held Model_M3_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M3_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M3_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M3_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M3_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M3_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M3_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M3_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M3_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M3_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M3_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M3_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M3_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M3_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M3_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M3_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M3_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M3_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M3_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M3_trace_pos) Epoch!val!3)
     (= (one Model_M3_trace_pos) Epoch!val!3)
     (= (first Model_M3_trace_pos) Node!val!2)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M3_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M4_trace_pos, S1, N1) == True,
;      held(Model_M4_trace_pos, S1, N2) == False,
;      transfer(Model_M4_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M4_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M4_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M4_trace_pos, S1, E2, N2) == True,
;      locked(Model_M4_trace_pos, S1, E1, N1) == False,
;      locked(Model_M4_trace_pos, S1, E1, N2) == False,
;      locked(Model_M4_trace_pos, S1, E2, N1) == False,
;      locked(Model_M4_trace_pos, S1, E2, N2) == True,
;      le(Model_M4_trace_pos,
;         E1,
;         ep(Model_M4_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M4_trace_pos,
;         E2,
;         ep(Model_M4_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M4_trace_pos,
;         ep(Model_M4_trace_pos, S1, N1),
;         ep(Model_M4_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M4_trace_pos,
;         ep(Model_M4_trace_pos, S1, N2),
;         ep(Model_M4_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M4_trace_pos,
;         E1,
;         ep(Model_M4_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M4_trace_pos,
;         E2,
;         ep(Model_M4_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M4_trace_pos) != N1,
;      first(Model_M4_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M4_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M4_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M4_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M4_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M4_trace_pos S1 Node!val!0) true)
     (= (held Model_M4_trace_pos S1 Node!val!1) false)
     (= (held Model_M4_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M4_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M4_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M4_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M4_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M4_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M4_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M4_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M4_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M4_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M4_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M4_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M4_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M4_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M4_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M4_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M4_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M4_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M4_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M4_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M4_trace_pos) Epoch!val!3)
     (= (one Model_M4_trace_pos) Epoch!val!3)
     (= (first Model_M4_trace_pos) Node!val!2)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M4_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M5_trace_pos, S1, N1) == False,
;      held(Model_M5_trace_pos, S1, N2) == True,
;      transfer(Model_M5_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M5_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M5_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M5_trace_pos, S1, E2, N2) == False,
;      locked(Model_M5_trace_pos, S1, E1, N1) == False,
;      locked(Model_M5_trace_pos, S1, E1, N2) == False,
;      locked(Model_M5_trace_pos, S1, E2, N1) == False,
;      locked(Model_M5_trace_pos, S1, E2, N2) == False,
;      le(Model_M5_trace_pos,
;         E1,
;         ep(Model_M5_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M5_trace_pos,
;         E2,
;         ep(Model_M5_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M5_trace_pos,
;         ep(Model_M5_trace_pos, S1, N1),
;         ep(Model_M5_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M5_trace_pos,
;         ep(Model_M5_trace_pos, S1, N2),
;         ep(Model_M5_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M5_trace_pos,
;         E1,
;         ep(Model_M5_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M5_trace_pos,
;         E2,
;         ep(Model_M5_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M5_trace_pos) != N1,
;      first(Model_M5_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_M5_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) true
;     false))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M5_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M5_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M5_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M5_trace_pos S1 Node!val!0) false)
     (= (held Model_M5_trace_pos S1 Node!val!1) true)
     (= (held Model_M5_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M5_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M5_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M5_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M5_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M5_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M5_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M5_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M5_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M5_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M5_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M5_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M5_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M5_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M5_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M5_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M5_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M5_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M5_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M5_trace_pos) Epoch!val!3)
     (= (one Model_M5_trace_pos) Epoch!val!3)
     (= (first Model_M5_trace_pos) Node!val!2)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M5_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M6_trace_pos, S1, N1) == False,
;      held(Model_M6_trace_pos, S1, N2) == False,
;      transfer(Model_M6_trace_pos, S1, E1, N1) == True,
;      transfer(Model_M6_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M6_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M6_trace_pos, S1, E2, N2) == False,
;      locked(Model_M6_trace_pos, S1, E1, N1) == True,
;      locked(Model_M6_trace_pos, S1, E1, N2) == False,
;      locked(Model_M6_trace_pos, S1, E2, N1) == False,
;      locked(Model_M6_trace_pos, S1, E2, N2) == False,
;      le(Model_M6_trace_pos,
;         E1,
;         ep(Model_M6_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M6_trace_pos,
;         E2,
;         ep(Model_M6_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M6_trace_pos,
;         ep(Model_M6_trace_pos, S1, N1),
;         ep(Model_M6_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M6_trace_pos,
;         ep(Model_M6_trace_pos, S1, N2),
;         ep(Model_M6_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M6_trace_pos,
;         E1,
;         ep(Model_M6_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M6_trace_pos,
;         E2,
;         ep(Model_M6_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M6_trace_pos) != N1,
;      first(Model_M6_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M6_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!2)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M6_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M6_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M6_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M6_trace_pos S1 Node!val!0) false)
     (= (held Model_M6_trace_pos S1 Node!val!1) false)
     (= (held Model_M6_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M6_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_M6_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M6_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M6_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M6_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M6_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M6_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M6_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M6_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M6_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M6_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M6_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M6_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M6_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M6_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M6_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M6_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M6_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M6_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M6_trace_pos) Epoch!val!3)
     (= (one Model_M6_trace_pos) Epoch!val!3)
     (= (first Model_M6_trace_pos) Node!val!2)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M6_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M7_trace_pos, S1, N1) == False,
;      held(Model_M7_trace_pos, S1, N2) == False,
;      transfer(Model_M7_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M7_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M7_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M7_trace_pos, S1, E2, N2) == True,
;      locked(Model_M7_trace_pos, S1, E1, N1) == False,
;      locked(Model_M7_trace_pos, S1, E1, N2) == False,
;      locked(Model_M7_trace_pos, S1, E2, N1) == False,
;      locked(Model_M7_trace_pos, S1, E2, N2) == True,
;      le(Model_M7_trace_pos,
;         E1,
;         ep(Model_M7_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M7_trace_pos,
;         E2,
;         ep(Model_M7_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M7_trace_pos,
;         ep(Model_M7_trace_pos, S1, N1),
;         ep(Model_M7_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M7_trace_pos,
;         ep(Model_M7_trace_pos, S1, N2),
;         ep(Model_M7_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M7_trace_pos,
;         E1,
;         ep(Model_M7_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M7_trace_pos,
;         E2,
;         ep(Model_M7_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M7_trace_pos) != N1,
;      first(Model_M7_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M7_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M7_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M7_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M7_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M7_trace_pos S1 Node!val!0) false)
     (= (held Model_M7_trace_pos S1 Node!val!1) false)
     (= (held Model_M7_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M7_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M7_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M7_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M7_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M7_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M7_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M7_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M7_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M7_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M7_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M7_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M7_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M7_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M7_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M7_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M7_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M7_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M7_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M7_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M7_trace_pos) Epoch!val!3)
     (= (one Model_M7_trace_pos) Epoch!val!3)
     (= (first Model_M7_trace_pos) Node!val!2)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M7_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M8_trace_pos, S1, N1) == True,
;      held(Model_M8_trace_pos, S1, N2) == False,
;      transfer(Model_M8_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M8_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M8_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M8_trace_pos, S1, E2, N2) == False,
;      locked(Model_M8_trace_pos, S1, E1, N1) == False,
;      locked(Model_M8_trace_pos, S1, E1, N2) == False,
;      locked(Model_M8_trace_pos, S1, E2, N1) == True,
;      locked(Model_M8_trace_pos, S1, E2, N2) == False,
;      le(Model_M8_trace_pos,
;         E1,
;         ep(Model_M8_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M8_trace_pos,
;         E2,
;         ep(Model_M8_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M8_trace_pos,
;         ep(Model_M8_trace_pos, S1, N1),
;         ep(Model_M8_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M8_trace_pos,
;         ep(Model_M8_trace_pos, S1, N2),
;         ep(Model_M8_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M8_trace_pos,
;         E1,
;         ep(Model_M8_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M8_trace_pos,
;         E2,
;         ep(Model_M8_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M8_trace_pos) != N1,
;      first(Model_M8_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M8_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M8_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M8_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M8_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M8_trace_pos S1 Node!val!0) true)
     (= (held Model_M8_trace_pos S1 Node!val!1) false)
     (= (held Model_M8_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M8_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M8_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M8_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M8_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M8_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M8_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M8_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M8_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M8_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M8_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M8_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M8_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M8_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M8_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M8_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M8_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M8_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M8_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M8_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M8_trace_pos) Epoch!val!3)
     (= (one Model_M8_trace_pos) Epoch!val!3)
     (= (first Model_M8_trace_pos) Node!val!2)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M8_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M9_trace_pos, S1, N1) == True,
;      held(Model_M9_trace_pos, S1, N2) == False,
;      transfer(Model_M9_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M9_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M9_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M9_trace_pos, S1, E2, N2) == False,
;      locked(Model_M9_trace_pos, S1, E1, N1) == False,
;      locked(Model_M9_trace_pos, S1, E1, N2) == False,
;      locked(Model_M9_trace_pos, S1, E2, N1) == True,
;      locked(Model_M9_trace_pos, S1, E2, N2) == False,
;      le(Model_M9_trace_pos,
;         E1,
;         ep(Model_M9_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M9_trace_pos,
;         E2,
;         ep(Model_M9_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M9_trace_pos,
;         ep(Model_M9_trace_pos, S1, N1),
;         ep(Model_M9_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M9_trace_pos,
;         ep(Model_M9_trace_pos, S1, N2),
;         ep(Model_M9_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M9_trace_pos,
;         E1,
;         ep(Model_M9_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M9_trace_pos,
;         E2,
;         ep(Model_M9_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M9_trace_pos) != N1,
;      first(Model_M9_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M9_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M9_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M9_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M9_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M9_trace_pos S1 Node!val!0) true)
     (= (held Model_M9_trace_pos S1 Node!val!1) false)
     (= (held Model_M9_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M9_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M9_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M9_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M9_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M9_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M9_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M9_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M9_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M9_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M9_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M9_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M9_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M9_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M9_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M9_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M9_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M9_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M9_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M9_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M9_trace_pos) Epoch!val!3)
     (= (one Model_M9_trace_pos) Epoch!val!3)
     (= (first Model_M9_trace_pos) Node!val!2)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M9_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M10_trace_pos, S1, N1) == True,
;      held(Model_M10_trace_pos, S1, N2) == False,
;      transfer(Model_M10_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M10_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M10_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M10_trace_pos, S1, E2, N2) == False,
;      locked(Model_M10_trace_pos, S1, E1, N1) == False,
;      locked(Model_M10_trace_pos, S1, E1, N2) == False,
;      locked(Model_M10_trace_pos, S1, E2, N1) == False,
;      locked(Model_M10_trace_pos, S1, E2, N2) == False,
;      le(Model_M10_trace_pos,
;         E1,
;         ep(Model_M10_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M10_trace_pos,
;         E2,
;         ep(Model_M10_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M10_trace_pos,
;         ep(Model_M10_trace_pos, S1, N1),
;         ep(Model_M10_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M10_trace_pos,
;         ep(Model_M10_trace_pos, S1, N2),
;         ep(Model_M10_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M10_trace_pos,
;         E1,
;         ep(Model_M10_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M10_trace_pos,
;         E2,
;         ep(Model_M10_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M10_trace_pos) != N1,
;      first(Model_M10_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M10_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M10_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M10_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M10_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M10_trace_pos S1 Node!val!0) true)
     (= (held Model_M10_trace_pos S1 Node!val!1) false)
     (= (held Model_M10_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M10_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M10_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M10_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M10_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M10_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M10_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M10_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M10_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M10_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M10_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M10_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M10_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M10_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M10_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M10_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M10_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M10_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M10_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M10_trace_pos) Epoch!val!3)
     (= (one Model_M10_trace_pos) Epoch!val!3)
     (= (first Model_M10_trace_pos) Node!val!2)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M10_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M11_trace_pos, S1, N1) == False,
;      held(Model_M11_trace_pos, S1, N2) == True,
;      transfer(Model_M11_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M11_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M11_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M11_trace_pos, S1, E2, N2) == False,
;      locked(Model_M11_trace_pos, S1, E1, N1) == False,
;      locked(Model_M11_trace_pos, S1, E1, N2) == False,
;      locked(Model_M11_trace_pos, S1, E2, N1) == True,
;      locked(Model_M11_trace_pos, S1, E2, N2) == False,
;      le(Model_M11_trace_pos,
;         E1,
;         ep(Model_M11_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M11_trace_pos,
;         E2,
;         ep(Model_M11_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M11_trace_pos,
;         ep(Model_M11_trace_pos, S1, N1),
;         ep(Model_M11_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M11_trace_pos,
;         ep(Model_M11_trace_pos, S1, N2),
;         ep(Model_M11_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M11_trace_pos,
;         E1,
;         ep(Model_M11_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M11_trace_pos,
;         E2,
;         ep(Model_M11_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M11_trace_pos) != N1,
;      first(Model_M11_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M11_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M11_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M11_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M11_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M11_trace_pos S1 Node!val!0) false)
     (= (held Model_M11_trace_pos S1 Node!val!1) true)
     (= (held Model_M11_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M11_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M11_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M11_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M11_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M11_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M11_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M11_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M11_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M11_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M11_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M11_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M11_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M11_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M11_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M11_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M11_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M11_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M11_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M11_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M11_trace_pos) Epoch!val!3)
     (= (one Model_M11_trace_pos) Epoch!val!3)
     (= (first Model_M11_trace_pos) Node!val!2)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M11_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M12_trace_pos, S1, N1) == False,
;      held(Model_M12_trace_pos, S1, N2) == False,
;      transfer(Model_M12_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M12_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M12_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M12_trace_pos, S1, E2, N2) == False,
;      locked(Model_M12_trace_pos, S1, E1, N1) == False,
;      locked(Model_M12_trace_pos, S1, E1, N2) == False,
;      locked(Model_M12_trace_pos, S1, E2, N1) == False,
;      locked(Model_M12_trace_pos, S1, E2, N2) == False,
;      le(Model_M12_trace_pos,
;         E1,
;         ep(Model_M12_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M12_trace_pos,
;         E2,
;         ep(Model_M12_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M12_trace_pos,
;         ep(Model_M12_trace_pos, S1, N1),
;         ep(Model_M12_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M12_trace_pos,
;         ep(Model_M12_trace_pos, S1, N2),
;         ep(Model_M12_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M12_trace_pos,
;         E1,
;         ep(Model_M12_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M12_trace_pos,
;         E2,
;         ep(Model_M12_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M12_trace_pos) != N1,
;      first(Model_M12_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M12_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M12_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M12_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M12_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M12_trace_pos S1 Node!val!0) false)
     (= (held Model_M12_trace_pos S1 Node!val!1) false)
     (= (held Model_M12_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M12_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M12_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M12_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M12_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M12_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M12_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M12_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M12_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M12_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M12_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M12_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M12_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M12_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M12_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M12_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M12_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M12_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M12_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M12_trace_pos) Epoch!val!3)
     (= (one Model_M12_trace_pos) Epoch!val!3)
     (= (first Model_M12_trace_pos) Node!val!2)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M12_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M13_trace_pos, S1, N1) == False,
;      held(Model_M13_trace_pos, S1, N2) == False,
;      transfer(Model_M13_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M13_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M13_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M13_trace_pos, S1, E2, N2) == False,
;      locked(Model_M13_trace_pos, S1, E1, N1) == False,
;      locked(Model_M13_trace_pos, S1, E1, N2) == False,
;      locked(Model_M13_trace_pos, S1, E2, N1) == True,
;      locked(Model_M13_trace_pos, S1, E2, N2) == False,
;      le(Model_M13_trace_pos,
;         E1,
;         ep(Model_M13_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M13_trace_pos,
;         E2,
;         ep(Model_M13_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M13_trace_pos,
;         ep(Model_M13_trace_pos, S1, N1),
;         ep(Model_M13_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M13_trace_pos,
;         ep(Model_M13_trace_pos, S1, N2),
;         ep(Model_M13_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M13_trace_pos,
;         E1,
;         ep(Model_M13_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M13_trace_pos,
;         E2,
;         ep(Model_M13_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M13_trace_pos) != N1,
;      first(Model_M13_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M13_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M13_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M13_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M13_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M13_trace_pos S1 Node!val!0) false)
     (= (held Model_M13_trace_pos S1 Node!val!1) false)
     (= (held Model_M13_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M13_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M13_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M13_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M13_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M13_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M13_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M13_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M13_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M13_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M13_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M13_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M13_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M13_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M13_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M13_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M13_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M13_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M13_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M13_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M13_trace_pos) Epoch!val!3)
     (= (one Model_M13_trace_pos) Epoch!val!3)
     (= (first Model_M13_trace_pos) Node!val!2)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M13_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M14_trace_pos, S1, N1) == False,
;      held(Model_M14_trace_pos, S1, N2) == False,
;      transfer(Model_M14_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M14_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M14_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M14_trace_pos, S1, E2, N2) == False,
;      locked(Model_M14_trace_pos, S1, E1, N1) == False,
;      locked(Model_M14_trace_pos, S1, E1, N2) == False,
;      locked(Model_M14_trace_pos, S1, E2, N1) == False,
;      locked(Model_M14_trace_pos, S1, E2, N2) == False,
;      le(Model_M14_trace_pos,
;         E1,
;         ep(Model_M14_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M14_trace_pos,
;         E2,
;         ep(Model_M14_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M14_trace_pos,
;         ep(Model_M14_trace_pos, S1, N1),
;         ep(Model_M14_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M14_trace_pos,
;         ep(Model_M14_trace_pos, S1, N2),
;         ep(Model_M14_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M14_trace_pos,
;         E1,
;         ep(Model_M14_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M14_trace_pos,
;         E2,
;         ep(Model_M14_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M14_trace_pos) != N1,
;      first(Model_M14_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M14_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M14_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M14_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M14_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M14_trace_pos S1 Node!val!0) false)
     (= (held Model_M14_trace_pos S1 Node!val!1) false)
     (= (held Model_M14_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M14_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M14_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M14_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M14_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M14_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M14_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M14_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M14_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M14_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M14_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M14_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M14_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M14_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M14_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M14_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M14_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M14_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M14_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M14_trace_pos) Epoch!val!3)
     (= (one Model_M14_trace_pos) Epoch!val!3)
     (= (first Model_M14_trace_pos) Node!val!2)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M14_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M15_trace_pos, S1, N1) == False,
;      held(Model_M15_trace_pos, S1, N2) == False,
;      transfer(Model_M15_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M15_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M15_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M15_trace_pos, S1, E2, N2) == False,
;      locked(Model_M15_trace_pos, S1, E1, N1) == False,
;      locked(Model_M15_trace_pos, S1, E1, N2) == False,
;      locked(Model_M15_trace_pos, S1, E2, N1) == False,
;      locked(Model_M15_trace_pos, S1, E2, N2) == False,
;      le(Model_M15_trace_pos,
;         E1,
;         ep(Model_M15_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M15_trace_pos,
;         E2,
;         ep(Model_M15_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M15_trace_pos,
;         ep(Model_M15_trace_pos, S1, N1),
;         ep(Model_M15_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M15_trace_pos,
;         ep(Model_M15_trace_pos, S1, N2),
;         ep(Model_M15_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M15_trace_pos,
;         E1,
;         ep(Model_M15_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M15_trace_pos,
;         E2,
;         ep(Model_M15_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M15_trace_pos) != N1,
;      first(Model_M15_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M15_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M15_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M15_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M15_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M15_trace_pos S1 Node!val!0) false)
     (= (held Model_M15_trace_pos S1 Node!val!1) false)
     (= (held Model_M15_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M15_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M15_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M15_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M15_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M15_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M15_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M15_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M15_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M15_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M15_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M15_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M15_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M15_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M15_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M15_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M15_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M15_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M15_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M15_trace_pos) Epoch!val!3)
     (= (one Model_M15_trace_pos) Epoch!val!3)
     (= (first Model_M15_trace_pos) Node!val!2)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M15_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M16_trace_pos, S1, N1) == False,
;      held(Model_M16_trace_pos, S1, N2) == False,
;      transfer(Model_M16_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M16_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M16_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M16_trace_pos, S1, E2, N2) == False,
;      locked(Model_M16_trace_pos, S1, E1, N1) == False,
;      locked(Model_M16_trace_pos, S1, E1, N2) == False,
;      locked(Model_M16_trace_pos, S1, E2, N1) == False,
;      locked(Model_M16_trace_pos, S1, E2, N2) == False,
;      le(Model_M16_trace_pos,
;         E1,
;         ep(Model_M16_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M16_trace_pos,
;         E2,
;         ep(Model_M16_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M16_trace_pos,
;         ep(Model_M16_trace_pos, S1, N1),
;         ep(Model_M16_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M16_trace_pos,
;         ep(Model_M16_trace_pos, S1, N2),
;         ep(Model_M16_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M16_trace_pos,
;         E1,
;         ep(Model_M16_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M16_trace_pos,
;         E2,
;         ep(Model_M16_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M16_trace_pos) != N1,
;      first(Model_M16_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M16_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;     false))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M16_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M16_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M16_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M16_trace_pos S1 Node!val!0) false)
     (= (held Model_M16_trace_pos S1 Node!val!1) false)
     (= (held Model_M16_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M16_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M16_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M16_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M16_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M16_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M16_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M16_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M16_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M16_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M16_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M16_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M16_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M16_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M16_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M16_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M16_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M16_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M16_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M16_trace_pos) Epoch!val!3)
     (= (one Model_M16_trace_pos) Epoch!val!3)
     (= (first Model_M16_trace_pos) Node!val!2)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M16_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M17_trace_pos, S1, N1) == True,
;      held(Model_M17_trace_pos, S1, N2) == False,
;      transfer(Model_M17_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M17_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M17_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M17_trace_pos, S1, E2, N2) == False,
;      locked(Model_M17_trace_pos, S1, E1, N1) == False,
;      locked(Model_M17_trace_pos, S1, E1, N2) == False,
;      locked(Model_M17_trace_pos, S1, E2, N1) == True,
;      locked(Model_M17_trace_pos, S1, E2, N2) == False,
;      le(Model_M17_trace_pos,
;         E1,
;         ep(Model_M17_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M17_trace_pos,
;         E2,
;         ep(Model_M17_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M17_trace_pos,
;         ep(Model_M17_trace_pos, S1, N1),
;         ep(Model_M17_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M17_trace_pos,
;         ep(Model_M17_trace_pos, S1, N2),
;         ep(Model_M17_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M17_trace_pos,
;         E1,
;         ep(Model_M17_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M17_trace_pos,
;         E2,
;         ep(Model_M17_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M17_trace_pos) != N1,
;      first(Model_M17_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M17_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M17_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M17_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M17_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M17_trace_pos S1 Node!val!0) true)
     (= (held Model_M17_trace_pos S1 Node!val!1) false)
     (= (held Model_M17_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M17_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M17_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M17_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M17_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M17_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M17_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M17_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M17_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M17_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M17_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M17_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M17_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M17_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M17_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M17_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M17_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M17_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M17_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M17_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M17_trace_pos) Epoch!val!3)
     (= (one Model_M17_trace_pos) Epoch!val!3)
     (= (first Model_M17_trace_pos) Node!val!2)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M17_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M18_trace_pos, S1, N1) == False,
;      held(Model_M18_trace_pos, S1, N2) == False,
;      transfer(Model_M18_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M18_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M18_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M18_trace_pos, S1, E2, N2) == False,
;      locked(Model_M18_trace_pos, S1, E1, N1) == False,
;      locked(Model_M18_trace_pos, S1, E1, N2) == False,
;      locked(Model_M18_trace_pos, S1, E2, N1) == False,
;      locked(Model_M18_trace_pos, S1, E2, N2) == False,
;      le(Model_M18_trace_pos,
;         E1,
;         ep(Model_M18_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M18_trace_pos,
;         E2,
;         ep(Model_M18_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M18_trace_pos,
;         ep(Model_M18_trace_pos, S1, N1),
;         ep(Model_M18_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M18_trace_pos,
;         ep(Model_M18_trace_pos, S1, N2),
;         ep(Model_M18_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M18_trace_pos,
;         E1,
;         ep(Model_M18_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M18_trace_pos,
;         E2,
;         ep(Model_M18_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M18_trace_pos) != N1,
;      first(Model_M18_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M18_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M18_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M18_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M18_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M18_trace_pos S1 Node!val!0) false)
     (= (held Model_M18_trace_pos S1 Node!val!1) false)
     (= (held Model_M18_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M18_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M18_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M18_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M18_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M18_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M18_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M18_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M18_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M18_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M18_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M18_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M18_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M18_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M18_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M18_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M18_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M18_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M18_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M18_trace_pos) Epoch!val!3)
     (= (one Model_M18_trace_pos) Epoch!val!3)
     (= (first Model_M18_trace_pos) Node!val!2)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M18_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M19_trace_pos, S1, N1) == False,
;      held(Model_M19_trace_pos, S1, N2) == True,
;      transfer(Model_M19_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M19_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M19_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M19_trace_pos, S1, E2, N2) == False,
;      locked(Model_M19_trace_pos, S1, E1, N1) == False,
;      locked(Model_M19_trace_pos, S1, E1, N2) == False,
;      locked(Model_M19_trace_pos, S1, E2, N1) == True,
;      locked(Model_M19_trace_pos, S1, E2, N2) == False,
;      le(Model_M19_trace_pos,
;         E1,
;         ep(Model_M19_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M19_trace_pos,
;         E2,
;         ep(Model_M19_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M19_trace_pos,
;         ep(Model_M19_trace_pos, S1, N1),
;         ep(Model_M19_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M19_trace_pos,
;         ep(Model_M19_trace_pos, S1, N2),
;         ep(Model_M19_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M19_trace_pos,
;         E1,
;         ep(Model_M19_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M19_trace_pos,
;         E2,
;         ep(Model_M19_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M19_trace_pos) != N1,
;      first(Model_M19_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M19_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M19_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M19_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M19_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M19_trace_pos S1 Node!val!0) false)
     (= (held Model_M19_trace_pos S1 Node!val!1) true)
     (= (held Model_M19_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M19_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M19_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M19_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M19_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M19_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M19_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M19_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M19_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M19_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M19_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M19_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M19_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M19_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M19_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M19_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M19_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M19_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M19_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M19_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M19_trace_pos) Epoch!val!3)
     (= (one Model_M19_trace_pos) Epoch!val!3)
     (= (first Model_M19_trace_pos) Node!val!2)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M19_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M20_trace_pos, S1, N1) == False,
;      held(Model_M20_trace_pos, S1, N2) == True,
;      transfer(Model_M20_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M20_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M20_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M20_trace_pos, S1, E2, N2) == False,
;      locked(Model_M20_trace_pos, S1, E1, N1) == False,
;      locked(Model_M20_trace_pos, S1, E1, N2) == False,
;      locked(Model_M20_trace_pos, S1, E2, N1) == False,
;      locked(Model_M20_trace_pos, S1, E2, N2) == False,
;      le(Model_M20_trace_pos,
;         E1,
;         ep(Model_M20_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M20_trace_pos,
;         E2,
;         ep(Model_M20_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M20_trace_pos,
;         ep(Model_M20_trace_pos, S1, N1),
;         ep(Model_M20_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M20_trace_pos,
;         ep(Model_M20_trace_pos, S1, N2),
;         ep(Model_M20_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M20_trace_pos,
;         E1,
;         ep(Model_M20_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M20_trace_pos,
;         E2,
;         ep(Model_M20_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M20_trace_pos) != N1,
;      first(Model_M20_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M20_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M20_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M20_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M20_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M20_trace_pos S1 Node!val!0) false)
     (= (held Model_M20_trace_pos S1 Node!val!1) true)
     (= (held Model_M20_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M20_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M20_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M20_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M20_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M20_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M20_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M20_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M20_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M20_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M20_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M20_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M20_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M20_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M20_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M20_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M20_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M20_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M20_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M20_trace_pos) Epoch!val!3)
     (= (one Model_M20_trace_pos) Epoch!val!3)
     (= (first Model_M20_trace_pos) Node!val!2)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M20_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M21_trace_pos, S1, N1) == True,
;      held(Model_M21_trace_pos, S1, N2) == False,
;      transfer(Model_M21_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M21_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M21_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M21_trace_pos, S1, E2, N2) == False,
;      locked(Model_M21_trace_pos, S1, E1, N1) == False,
;      locked(Model_M21_trace_pos, S1, E1, N2) == True,
;      locked(Model_M21_trace_pos, S1, E2, N1) == True,
;      locked(Model_M21_trace_pos, S1, E2, N2) == False,
;      le(Model_M21_trace_pos,
;         E1,
;         ep(Model_M21_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M21_trace_pos,
;         E2,
;         ep(Model_M21_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M21_trace_pos,
;         ep(Model_M21_trace_pos, S1, N1),
;         ep(Model_M21_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M21_trace_pos,
;         ep(Model_M21_trace_pos, S1, N2),
;         ep(Model_M21_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M21_trace_pos,
;         E1,
;         ep(Model_M21_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M21_trace_pos,
;         E2,
;         ep(Model_M21_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M21_trace_pos) != N1,
;      first(Model_M21_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M21_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     false
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     false
;     true)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     false
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     false
;     true)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M21_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M21_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M21_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M21_trace_pos S1 Node!val!0) true)
     (= (held Model_M21_trace_pos S1 Node!val!1) false)
     (= (held Model_M21_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!3 Node!val!0) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!3 Node!val!1) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!3 Node!val!2) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!0 Node!val!2) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!2 Node!val!0) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!2 Node!val!1) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!2 Node!val!2) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M21_trace_pos S1 Epoch!val!1 Node!val!2) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!3 Node!val!0) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!3 Node!val!1) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!3 Node!val!2) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M21_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!0 Node!val!2) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!2 Node!val!0) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!2 Node!val!1) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!2 Node!val!2) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M21_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M21_trace_pos S1 Epoch!val!1 Node!val!2) true)
     (= (le Model_M21_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M21_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M21_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M21_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M21_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M21_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M21_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M21_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M21_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M21_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M21_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M21_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M21_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M21_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M21_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M21_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M21_trace_pos) Epoch!val!3)
     (= (one Model_M21_trace_pos) Epoch!val!3)
     (= (first Model_M21_trace_pos) Node!val!2)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M21_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M22_trace_pos, S1, N1) == False,
;      held(Model_M22_trace_pos, S1, N2) == False,
;      transfer(Model_M22_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M22_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M22_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M22_trace_pos, S1, E2, N2) == False,
;      locked(Model_M22_trace_pos, S1, E1, N1) == False,
;      locked(Model_M22_trace_pos, S1, E1, N2) == False,
;      locked(Model_M22_trace_pos, S1, E2, N1) == True,
;      locked(Model_M22_trace_pos, S1, E2, N2) == False,
;      le(Model_M22_trace_pos,
;         E1,
;         ep(Model_M22_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M22_trace_pos,
;         E2,
;         ep(Model_M22_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M22_trace_pos,
;         ep(Model_M22_trace_pos, S1, N1),
;         ep(Model_M22_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M22_trace_pos,
;         ep(Model_M22_trace_pos, S1, N2),
;         ep(Model_M22_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M22_trace_pos,
;         E1,
;         ep(Model_M22_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M22_trace_pos,
;         E2,
;         ep(Model_M22_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M22_trace_pos) != N1,
;      first(Model_M22_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M22_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M22_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M22_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M22_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M22_trace_pos S1 Node!val!0) false)
     (= (held Model_M22_trace_pos S1 Node!val!1) false)
     (= (held Model_M22_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M22_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M22_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M22_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M22_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M22_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M22_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M22_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M22_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M22_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M22_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M22_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M22_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M22_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M22_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M22_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M22_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M22_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M22_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M22_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M22_trace_pos) Epoch!val!3)
     (= (one Model_M22_trace_pos) Epoch!val!3)
     (= (first Model_M22_trace_pos) Node!val!2)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M22_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M23_trace_pos, S1, N1) == False,
;      held(Model_M23_trace_pos, S1, N2) == False,
;      transfer(Model_M23_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M23_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M23_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M23_trace_pos, S1, E2, N2) == False,
;      locked(Model_M23_trace_pos, S1, E1, N1) == False,
;      locked(Model_M23_trace_pos, S1, E1, N2) == True,
;      locked(Model_M23_trace_pos, S1, E2, N1) == False,
;      locked(Model_M23_trace_pos, S1, E2, N2) == False,
;      le(Model_M23_trace_pos,
;         E1,
;         ep(Model_M23_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M23_trace_pos,
;         E2,
;         ep(Model_M23_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M23_trace_pos,
;         ep(Model_M23_trace_pos, S1, N1),
;         ep(Model_M23_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M23_trace_pos,
;         ep(Model_M23_trace_pos, S1, N2),
;         ep(Model_M23_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M23_trace_pos,
;         E1,
;         ep(Model_M23_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M23_trace_pos,
;         E2,
;         ep(Model_M23_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M23_trace_pos) != N1,
;      first(Model_M23_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M23_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M23_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M23_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M23_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M23_trace_pos S1 Node!val!0) false)
     (= (held Model_M23_trace_pos S1 Node!val!1) false)
     (= (held Model_M23_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M23_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M23_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M23_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M23_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M23_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M23_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M23_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M23_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M23_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M23_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M23_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M23_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M23_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M23_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M23_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M23_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M23_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M23_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M23_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M23_trace_pos) Epoch!val!3)
     (= (one Model_M23_trace_pos) Epoch!val!3)
     (= (first Model_M23_trace_pos) Node!val!2)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M23_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M24_trace_pos, S1, N1) == False,
;      held(Model_M24_trace_pos, S1, N2) == False,
;      transfer(Model_M24_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M24_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M24_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M24_trace_pos, S1, E2, N2) == False,
;      locked(Model_M24_trace_pos, S1, E1, N1) == False,
;      locked(Model_M24_trace_pos, S1, E1, N2) == False,
;      locked(Model_M24_trace_pos, S1, E2, N1) == False,
;      locked(Model_M24_trace_pos, S1, E2, N2) == False,
;      le(Model_M24_trace_pos,
;         E1,
;         ep(Model_M24_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M24_trace_pos,
;         E2,
;         ep(Model_M24_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M24_trace_pos,
;         ep(Model_M24_trace_pos, S1, N1),
;         ep(Model_M24_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M24_trace_pos,
;         ep(Model_M24_trace_pos, S1, N2),
;         ep(Model_M24_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M24_trace_pos,
;         E1,
;         ep(Model_M24_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M24_trace_pos,
;         E2,
;         ep(Model_M24_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M24_trace_pos) != N1,
;      first(Model_M24_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M24_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M24_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M24_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M24_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M24_trace_pos S1 Node!val!0) false)
     (= (held Model_M24_trace_pos S1 Node!val!1) false)
     (= (held Model_M24_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M24_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M24_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M24_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M24_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M24_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M24_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M24_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M24_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M24_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M24_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M24_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M24_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M24_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M24_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M24_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M24_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M24_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M24_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M24_trace_pos) Epoch!val!3)
     (= (one Model_M24_trace_pos) Epoch!val!3)
     (= (first Model_M24_trace_pos) Node!val!2)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M24_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M25_trace_pos, S1, N1) == False,
;      held(Model_M25_trace_pos, S1, N2) == False,
;      transfer(Model_M25_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M25_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M25_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M25_trace_pos, S1, E2, N2) == False,
;      locked(Model_M25_trace_pos, S1, E1, N1) == False,
;      locked(Model_M25_trace_pos, S1, E1, N2) == False,
;      locked(Model_M25_trace_pos, S1, E2, N1) == True,
;      locked(Model_M25_trace_pos, S1, E2, N2) == False,
;      le(Model_M25_trace_pos,
;         E1,
;         ep(Model_M25_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M25_trace_pos,
;         E2,
;         ep(Model_M25_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M25_trace_pos,
;         ep(Model_M25_trace_pos, S1, N1),
;         ep(Model_M25_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M25_trace_pos,
;         ep(Model_M25_trace_pos, S1, N2),
;         ep(Model_M25_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M25_trace_pos,
;         E1,
;         ep(Model_M25_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M25_trace_pos,
;         E2,
;         ep(Model_M25_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M25_trace_pos) != N1,
;      first(Model_M25_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M25_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M25_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M25_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M25_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M25_trace_pos S1 Node!val!0) false)
     (= (held Model_M25_trace_pos S1 Node!val!1) false)
     (= (held Model_M25_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M25_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_M25_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M25_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M25_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M25_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M25_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M25_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M25_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M25_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M25_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M25_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M25_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M25_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M25_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M25_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M25_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M25_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M25_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M25_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M25_trace_pos) Epoch!val!3)
     (= (one Model_M25_trace_pos) Epoch!val!3)
     (= (first Model_M25_trace_pos) Node!val!2)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M25_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M26_trace_pos, S1, N1) == False,
;      held(Model_M26_trace_pos, S1, N2) == False,
;      transfer(Model_M26_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M26_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M26_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M26_trace_pos, S1, E2, N2) == False,
;      locked(Model_M26_trace_pos, S1, E1, N1) == False,
;      locked(Model_M26_trace_pos, S1, E1, N2) == False,
;      locked(Model_M26_trace_pos, S1, E2, N1) == False,
;      locked(Model_M26_trace_pos, S1, E2, N2) == False,
;      le(Model_M26_trace_pos,
;         E1,
;         ep(Model_M26_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M26_trace_pos,
;         E2,
;         ep(Model_M26_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M26_trace_pos,
;         ep(Model_M26_trace_pos, S1, N1),
;         ep(Model_M26_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M26_trace_pos,
;         ep(Model_M26_trace_pos, S1, N2),
;         ep(Model_M26_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M26_trace_pos,
;         E1,
;         ep(Model_M26_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M26_trace_pos,
;         E2,
;         ep(Model_M26_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M26_trace_pos) != N1,
;      first(Model_M26_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M26_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M26_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M26_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M26_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M26_trace_pos S1 Node!val!0) false)
     (= (held Model_M26_trace_pos S1 Node!val!1) false)
     (= (held Model_M26_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M26_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M26_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M26_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M26_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M26_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M26_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M26_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M26_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M26_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M26_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M26_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M26_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M26_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M26_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M26_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M26_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M26_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M26_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M26_trace_pos) Epoch!val!3)
     (= (one Model_M26_trace_pos) Epoch!val!3)
     (= (first Model_M26_trace_pos) Node!val!2)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M26_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M27_trace_pos, S1, N1) == True,
;      held(Model_M27_trace_pos, S1, N2) == False,
;      transfer(Model_M27_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M27_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M27_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M27_trace_pos, S1, E2, N2) == True,
;      locked(Model_M27_trace_pos, S1, E1, N1) == False,
;      locked(Model_M27_trace_pos, S1, E1, N2) == True,
;      locked(Model_M27_trace_pos, S1, E2, N1) == False,
;      locked(Model_M27_trace_pos, S1, E2, N2) == True,
;      le(Model_M27_trace_pos,
;         E1,
;         ep(Model_M27_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M27_trace_pos,
;         E2,
;         ep(Model_M27_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M27_trace_pos,
;         ep(Model_M27_trace_pos, S1, N1),
;         ep(Model_M27_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M27_trace_pos,
;         ep(Model_M27_trace_pos, S1, N2),
;         ep(Model_M27_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M27_trace_pos,
;         E1,
;         ep(Model_M27_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M27_trace_pos,
;         E2,
;         ep(Model_M27_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M27_trace_pos) != N1,
;      first(Model_M27_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M27_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;     true))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M27_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M27_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M27_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M27_trace_pos S1 Node!val!0) true)
     (= (held Model_M27_trace_pos S1 Node!val!1) false)
     (= (held Model_M27_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M27_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M27_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M27_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M27_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M27_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M27_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M27_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M27_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M27_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M27_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M27_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M27_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M27_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M27_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M27_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M27_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M27_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M27_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M27_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M27_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M27_trace_pos) Epoch!val!3)
     (= (one Model_M27_trace_pos) Epoch!val!3)
     (= (first Model_M27_trace_pos) Node!val!2)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M27_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M28_trace_pos, S1, N1) == True,
;      held(Model_M28_trace_pos, S1, N2) == False,
;      transfer(Model_M28_trace_pos, S1, E1, N1) == True,
;      transfer(Model_M28_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M28_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M28_trace_pos, S1, E2, N2) == False,
;      locked(Model_M28_trace_pos, S1, E1, N1) == True,
;      locked(Model_M28_trace_pos, S1, E1, N2) == False,
;      locked(Model_M28_trace_pos, S1, E2, N1) == False,
;      locked(Model_M28_trace_pos, S1, E2, N2) == False,
;      le(Model_M28_trace_pos,
;         E1,
;         ep(Model_M28_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M28_trace_pos,
;         E2,
;         ep(Model_M28_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M28_trace_pos,
;         ep(Model_M28_trace_pos, S1, N1),
;         ep(Model_M28_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M28_trace_pos,
;         ep(Model_M28_trace_pos, S1, N2),
;         ep(Model_M28_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M28_trace_pos,
;         E1,
;         ep(Model_M28_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M28_trace_pos,
;         E2,
;         ep(Model_M28_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M28_trace_pos) != N1,
;      first(Model_M28_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_M28_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!2)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M28_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M28_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M28_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M28_trace_pos S1 Node!val!0) true)
     (= (held Model_M28_trace_pos S1 Node!val!1) false)
     (= (held Model_M28_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M28_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_M28_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M28_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M28_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M28_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M28_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M28_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M28_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M28_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M28_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M28_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M28_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M28_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M28_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M28_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M28_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M28_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M28_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M28_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M28_trace_pos) Epoch!val!3)
     (= (one Model_M28_trace_pos) Epoch!val!3)
     (= (first Model_M28_trace_pos) Node!val!2)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M28_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M29_trace_pos, S1, N1) == True,
;      held(Model_M29_trace_pos, S1, N2) == False,
;      transfer(Model_M29_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M29_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M29_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M29_trace_pos, S1, E2, N2) == False,
;      locked(Model_M29_trace_pos, S1, E1, N1) == False,
;      locked(Model_M29_trace_pos, S1, E1, N2) == False,
;      locked(Model_M29_trace_pos, S1, E2, N1) == False,
;      locked(Model_M29_trace_pos, S1, E2, N2) == False,
;      le(Model_M29_trace_pos,
;         E1,
;         ep(Model_M29_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M29_trace_pos,
;         E2,
;         ep(Model_M29_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M29_trace_pos,
;         ep(Model_M29_trace_pos, S1, N1),
;         ep(Model_M29_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M29_trace_pos,
;         ep(Model_M29_trace_pos, S1, N2),
;         ep(Model_M29_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M29_trace_pos,
;         E1,
;         ep(Model_M29_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M29_trace_pos,
;         E2,
;         ep(Model_M29_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M29_trace_pos) != N1,
;      first(Model_M29_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M29_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M29_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M29_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M29_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M29_trace_pos S1 Node!val!0) true)
     (= (held Model_M29_trace_pos S1 Node!val!1) false)
     (= (held Model_M29_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M29_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M29_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M29_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M29_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M29_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M29_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M29_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M29_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M29_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M29_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M29_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M29_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M29_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M29_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M29_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M29_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M29_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M29_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M29_trace_pos) Epoch!val!3)
     (= (one Model_M29_trace_pos) Epoch!val!3)
     (= (first Model_M29_trace_pos) Node!val!2)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M29_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M30_trace_pos, S1, N1) == False,
;      held(Model_M30_trace_pos, S1, N2) == True,
;      transfer(Model_M30_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M30_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M30_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M30_trace_pos, S1, E2, N2) == False,
;      locked(Model_M30_trace_pos, S1, E1, N1) == False,
;      locked(Model_M30_trace_pos, S1, E1, N2) == True,
;      locked(Model_M30_trace_pos, S1, E2, N1) == False,
;      locked(Model_M30_trace_pos, S1, E2, N2) == False,
;      le(Model_M30_trace_pos,
;         E1,
;         ep(Model_M30_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M30_trace_pos,
;         E2,
;         ep(Model_M30_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M30_trace_pos,
;         ep(Model_M30_trace_pos, S1, N1),
;         ep(Model_M30_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M30_trace_pos,
;         ep(Model_M30_trace_pos, S1, N2),
;         ep(Model_M30_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M30_trace_pos,
;         E1,
;         ep(Model_M30_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M30_trace_pos,
;         E2,
;         ep(Model_M30_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M30_trace_pos) != N1,
;      first(Model_M30_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M30_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M30_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M30_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M30_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M30_trace_pos S1 Node!val!0) false)
     (= (held Model_M30_trace_pos S1 Node!val!1) true)
     (= (held Model_M30_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M30_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M30_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M30_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M30_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M30_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M30_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M30_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M30_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M30_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M30_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M30_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M30_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M30_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M30_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M30_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M30_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M30_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M30_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M30_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M30_trace_pos) Epoch!val!3)
     (= (one Model_M30_trace_pos) Epoch!val!3)
     (= (first Model_M30_trace_pos) Node!val!2)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M30_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M31_trace_pos, S1, N1) == False,
;      held(Model_M31_trace_pos, S1, N2) == False,
;      transfer(Model_M31_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M31_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M31_trace_pos, S1, E2, N1) == True,
;      transfer(Model_M31_trace_pos, S1, E2, N2) == False,
;      locked(Model_M31_trace_pos, S1, E1, N1) == False,
;      locked(Model_M31_trace_pos, S1, E1, N2) == False,
;      locked(Model_M31_trace_pos, S1, E2, N1) == False,
;      locked(Model_M31_trace_pos, S1, E2, N2) == False,
;      le(Model_M31_trace_pos,
;         E1,
;         ep(Model_M31_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M31_trace_pos,
;         E2,
;         ep(Model_M31_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M31_trace_pos,
;         ep(Model_M31_trace_pos, S1, N1),
;         ep(Model_M31_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M31_trace_pos,
;         ep(Model_M31_trace_pos, S1, N2),
;         ep(Model_M31_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M31_trace_pos,
;         E1,
;         ep(Model_M31_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M31_trace_pos,
;         E2,
;         ep(Model_M31_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M31_trace_pos) != N1,
;      first(Model_M31_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M31_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M31_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M31_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M31_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M31_trace_pos S1 Node!val!0) false)
     (= (held Model_M31_trace_pos S1 Node!val!1) false)
     (= (held Model_M31_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M31_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M31_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M31_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M31_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M31_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M31_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M31_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M31_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M31_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M31_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M31_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M31_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M31_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M31_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M31_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M31_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M31_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M31_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M31_trace_pos) Epoch!val!3)
     (= (one Model_M31_trace_pos) Epoch!val!3)
     (= (first Model_M31_trace_pos) Node!val!2)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M31_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M32_trace_pos, S1, N1) == False,
;      held(Model_M32_trace_pos, S1, N2) == True,
;      transfer(Model_M32_trace_pos, S1, E1, N1) == True,
;      transfer(Model_M32_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M32_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M32_trace_pos, S1, E2, N2) == True,
;      locked(Model_M32_trace_pos, S1, E1, N1) == True,
;      locked(Model_M32_trace_pos, S1, E1, N2) == False,
;      locked(Model_M32_trace_pos, S1, E2, N1) == False,
;      locked(Model_M32_trace_pos, S1, E2, N2) == True,
;      le(Model_M32_trace_pos,
;         E1,
;         ep(Model_M32_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M32_trace_pos,
;         E2,
;         ep(Model_M32_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M32_trace_pos,
;         ep(Model_M32_trace_pos, S1, N1),
;         ep(Model_M32_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M32_trace_pos,
;         ep(Model_M32_trace_pos, S1, N2),
;         ep(Model_M32_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M32_trace_pos,
;         E1,
;         ep(Model_M32_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M32_trace_pos,
;         E2,
;         ep(Model_M32_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M32_trace_pos) != N1,
;      first(Model_M32_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M32_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M32_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M32_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M32_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M32_trace_pos S1 Node!val!0) false)
     (= (held Model_M32_trace_pos S1 Node!val!1) true)
     (= (held Model_M32_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M32_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_M32_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M32_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M32_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M32_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M32_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M32_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M32_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M32_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M32_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M32_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M32_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M32_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M32_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M32_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M32_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M32_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M32_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M32_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M32_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M32_trace_pos) Epoch!val!3)
     (= (one Model_M32_trace_pos) Epoch!val!3)
     (= (first Model_M32_trace_pos) Node!val!2)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M32_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M33_trace_pos, S1, N1) == False,
;      held(Model_M33_trace_pos, S1, N2) == False,
;      transfer(Model_M33_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M33_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M33_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M33_trace_pos, S1, E2, N2) == False,
;      locked(Model_M33_trace_pos, S1, E1, N1) == False,
;      locked(Model_M33_trace_pos, S1, E1, N2) == False,
;      locked(Model_M33_trace_pos, S1, E2, N1) == False,
;      locked(Model_M33_trace_pos, S1, E2, N2) == False,
;      le(Model_M33_trace_pos,
;         E1,
;         ep(Model_M33_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M33_trace_pos,
;         E2,
;         ep(Model_M33_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M33_trace_pos,
;         ep(Model_M33_trace_pos, S1, N1),
;         ep(Model_M33_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M33_trace_pos,
;         ep(Model_M33_trace_pos, S1, N2),
;         ep(Model_M33_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M33_trace_pos,
;         E1,
;         ep(Model_M33_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M33_trace_pos,
;         E2,
;         ep(Model_M33_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M33_trace_pos) != N1,
;      first(Model_M33_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M33_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M33_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M33_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M33_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M33_trace_pos S1 Node!val!0) false)
     (= (held Model_M33_trace_pos S1 Node!val!1) false)
     (= (held Model_M33_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M33_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M33_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M33_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M33_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M33_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M33_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M33_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M33_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M33_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M33_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M33_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M33_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M33_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M33_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M33_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M33_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M33_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M33_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M33_trace_pos) Epoch!val!3)
     (= (one Model_M33_trace_pos) Epoch!val!3)
     (= (first Model_M33_trace_pos) Node!val!2)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M33_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M34_trace_pos, S1, N1) == True,
;      held(Model_M34_trace_pos, S1, N2) == False,
;      transfer(Model_M34_trace_pos, S1, E1, N1) == True,
;      transfer(Model_M34_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M34_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M34_trace_pos, S1, E2, N2) == False,
;      locked(Model_M34_trace_pos, S1, E1, N1) == True,
;      locked(Model_M34_trace_pos, S1, E1, N2) == False,
;      locked(Model_M34_trace_pos, S1, E2, N1) == False,
;      locked(Model_M34_trace_pos, S1, E2, N2) == False,
;      le(Model_M34_trace_pos,
;         E1,
;         ep(Model_M34_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M34_trace_pos,
;         E2,
;         ep(Model_M34_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M34_trace_pos,
;         ep(Model_M34_trace_pos, S1, N1),
;         ep(Model_M34_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M34_trace_pos,
;         ep(Model_M34_trace_pos, S1, N2),
;         ep(Model_M34_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M34_trace_pos,
;         E1,
;         ep(Model_M34_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M34_trace_pos,
;         E2,
;         ep(Model_M34_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M34_trace_pos) != N1,
;      first(Model_M34_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M34_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!2)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M34_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M34_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M34_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M34_trace_pos S1 Node!val!0) true)
     (= (held Model_M34_trace_pos S1 Node!val!1) false)
     (= (held Model_M34_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M34_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_M34_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M34_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M34_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M34_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M34_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M34_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M34_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M34_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M34_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M34_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M34_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M34_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M34_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M34_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M34_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M34_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M34_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M34_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M34_trace_pos) Epoch!val!3)
     (= (one Model_M34_trace_pos) Epoch!val!3)
     (= (first Model_M34_trace_pos) Node!val!2)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M34_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M35_trace_pos, S1, N1) == True,
;      held(Model_M35_trace_pos, S1, N2) == False,
;      transfer(Model_M35_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M35_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M35_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M35_trace_pos, S1, E2, N2) == False,
;      locked(Model_M35_trace_pos, S1, E1, N1) == False,
;      locked(Model_M35_trace_pos, S1, E1, N2) == False,
;      locked(Model_M35_trace_pos, S1, E2, N1) == False,
;      locked(Model_M35_trace_pos, S1, E2, N2) == False,
;      le(Model_M35_trace_pos,
;         E1,
;         ep(Model_M35_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M35_trace_pos,
;         E2,
;         ep(Model_M35_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M35_trace_pos,
;         ep(Model_M35_trace_pos, S1, N1),
;         ep(Model_M35_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M35_trace_pos,
;         ep(Model_M35_trace_pos, S1, N2),
;         ep(Model_M35_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M35_trace_pos,
;         E1,
;         ep(Model_M35_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M35_trace_pos,
;         E2,
;         ep(Model_M35_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M35_trace_pos) != N1,
;      first(Model_M35_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M35_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M35_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M35_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M35_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M35_trace_pos S1 Node!val!0) true)
     (= (held Model_M35_trace_pos S1 Node!val!1) false)
     (= (held Model_M35_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M35_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M35_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M35_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M35_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M35_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M35_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M35_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M35_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M35_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M35_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M35_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M35_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M35_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M35_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M35_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M35_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M35_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M35_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M35_trace_pos) Epoch!val!3)
     (= (one Model_M35_trace_pos) Epoch!val!3)
     (= (first Model_M35_trace_pos) Node!val!2)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M35_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M36_trace_pos, S1, N1) == False,
;      held(Model_M36_trace_pos, S1, N2) == True,
;      transfer(Model_M36_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M36_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M36_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M36_trace_pos, S1, E2, N2) == False,
;      locked(Model_M36_trace_pos, S1, E1, N1) == False,
;      locked(Model_M36_trace_pos, S1, E1, N2) == False,
;      locked(Model_M36_trace_pos, S1, E2, N1) == False,
;      locked(Model_M36_trace_pos, S1, E2, N2) == False,
;      le(Model_M36_trace_pos,
;         E1,
;         ep(Model_M36_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M36_trace_pos,
;         E2,
;         ep(Model_M36_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M36_trace_pos,
;         ep(Model_M36_trace_pos, S1, N1),
;         ep(Model_M36_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M36_trace_pos,
;         ep(Model_M36_trace_pos, S1, N2),
;         ep(Model_M36_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M36_trace_pos,
;         E1,
;         ep(Model_M36_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M36_trace_pos,
;         E2,
;         ep(Model_M36_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M36_trace_pos) != N1,
;      first(Model_M36_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M36_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M36_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M36_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M36_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M36_trace_pos S1 Node!val!0) false)
     (= (held Model_M36_trace_pos S1 Node!val!1) true)
     (= (held Model_M36_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M36_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M36_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M36_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M36_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M36_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M36_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M36_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M36_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M36_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M36_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M36_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M36_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M36_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M36_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M36_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M36_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M36_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M36_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M36_trace_pos) Epoch!val!3)
     (= (one Model_M36_trace_pos) Epoch!val!3)
     (= (first Model_M36_trace_pos) Node!val!2)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M36_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M37_trace_pos, S1, N1) == True,
;      held(Model_M37_trace_pos, S1, N2) == False,
;      transfer(Model_M37_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M37_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M37_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M37_trace_pos, S1, E2, N2) == False,
;      locked(Model_M37_trace_pos, S1, E1, N1) == False,
;      locked(Model_M37_trace_pos, S1, E1, N2) == False,
;      locked(Model_M37_trace_pos, S1, E2, N1) == False,
;      locked(Model_M37_trace_pos, S1, E2, N2) == False,
;      le(Model_M37_trace_pos,
;         E1,
;         ep(Model_M37_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M37_trace_pos,
;         E2,
;         ep(Model_M37_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M37_trace_pos,
;         ep(Model_M37_trace_pos, S1, N1),
;         ep(Model_M37_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M37_trace_pos,
;         ep(Model_M37_trace_pos, S1, N2),
;         ep(Model_M37_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M37_trace_pos,
;         E1,
;         ep(Model_M37_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M37_trace_pos,
;         E2,
;         ep(Model_M37_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M37_trace_pos) != N1,
;      first(Model_M37_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M37_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) false
;     true))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M37_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M37_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M37_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M37_trace_pos S1 Node!val!0) true)
     (= (held Model_M37_trace_pos S1 Node!val!1) false)
     (= (held Model_M37_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M37_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M37_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M37_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M37_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M37_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M37_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M37_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M37_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M37_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M37_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M37_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M37_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M37_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M37_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M37_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M37_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M37_trace_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_M37_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M37_trace_pos) Epoch!val!3)
     (= (one Model_M37_trace_pos) Epoch!val!3)
     (= (first Model_M37_trace_pos) Node!val!2)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M37_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M38_trace_pos, S1, N1) == False,
;      held(Model_M38_trace_pos, S1, N2) == True,
;      transfer(Model_M38_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M38_trace_pos, S1, E1, N2) == True,
;      transfer(Model_M38_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M38_trace_pos, S1, E2, N2) == False,
;      locked(Model_M38_trace_pos, S1, E1, N1) == False,
;      locked(Model_M38_trace_pos, S1, E1, N2) == True,
;      locked(Model_M38_trace_pos, S1, E2, N1) == False,
;      locked(Model_M38_trace_pos, S1, E2, N2) == False,
;      le(Model_M38_trace_pos,
;         E1,
;         ep(Model_M38_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M38_trace_pos,
;         E2,
;         ep(Model_M38_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M38_trace_pos,
;         ep(Model_M38_trace_pos, S1, N1),
;         ep(Model_M38_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M38_trace_pos,
;         ep(Model_M38_trace_pos, S1, N2),
;         ep(Model_M38_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M38_trace_pos,
;         E1,
;         ep(Model_M38_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M38_trace_pos,
;         E2,
;         ep(Model_M38_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M38_trace_pos) != N1,
;      first(Model_M38_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun Model_M38_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M38_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M38_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M38_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M38_trace_pos S1 Node!val!0) false)
     (= (held Model_M38_trace_pos S1 Node!val!1) true)
     (= (held Model_M38_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M38_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_M38_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M38_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M38_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M38_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M38_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M38_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M38_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M38_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M38_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M38_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M38_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M38_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M38_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M38_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M38_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M38_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M38_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M38_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M38_trace_pos) Epoch!val!3)
     (= (one Model_M38_trace_pos) Epoch!val!3)
     (= (first Model_M38_trace_pos) Node!val!2)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M38_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M39_trace_pos, S1, N1) == False,
;      held(Model_M39_trace_pos, S1, N2) == True,
;      transfer(Model_M39_trace_pos, S1, E1, N1) == True,
;      transfer(Model_M39_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M39_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M39_trace_pos, S1, E2, N2) == True,
;      locked(Model_M39_trace_pos, S1, E1, N1) == True,
;      locked(Model_M39_trace_pos, S1, E1, N2) == False,
;      locked(Model_M39_trace_pos, S1, E2, N1) == False,
;      locked(Model_M39_trace_pos, S1, E2, N2) == True,
;      le(Model_M39_trace_pos,
;         E1,
;         ep(Model_M39_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M39_trace_pos,
;         E2,
;         ep(Model_M39_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M39_trace_pos,
;         ep(Model_M39_trace_pos, S1, N1),
;         ep(Model_M39_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M39_trace_pos,
;         ep(Model_M39_trace_pos, S1, N2),
;         ep(Model_M39_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M39_trace_pos,
;         E1,
;         ep(Model_M39_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M39_trace_pos,
;         E2,
;         ep(Model_M39_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M39_trace_pos) != N1,
;      first(Model_M39_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M39_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!0)
;             (= x!3 Node!val!0))
;     true
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M39_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M39_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M39_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M39_trace_pos S1 Node!val!0) false)
     (= (held Model_M39_trace_pos S1 Node!val!1) true)
     (= (held Model_M39_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M39_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_M39_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M39_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M39_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M39_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M39_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M39_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M39_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M39_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M39_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M39_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M39_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M39_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M39_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M39_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M39_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M39_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M39_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M39_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M39_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M39_trace_pos) Epoch!val!3)
     (= (one Model_M39_trace_pos) Epoch!val!3)
     (= (first Model_M39_trace_pos) Node!val!2)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M39_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M40_trace_pos, S1, N1) == False,
;      held(Model_M40_trace_pos, S1, N2) == False,
;      transfer(Model_M40_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M40_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M40_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M40_trace_pos, S1, E2, N2) == True,
;      locked(Model_M40_trace_pos, S1, E1, N1) == False,
;      locked(Model_M40_trace_pos, S1, E1, N2) == False,
;      locked(Model_M40_trace_pos, S1, E2, N1) == False,
;      locked(Model_M40_trace_pos, S1, E2, N2) == False,
;      le(Model_M40_trace_pos,
;         E1,
;         ep(Model_M40_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M40_trace_pos,
;         E2,
;         ep(Model_M40_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M40_trace_pos,
;         ep(Model_M40_trace_pos, S1, N1),
;         ep(Model_M40_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M40_trace_pos,
;         ep(Model_M40_trace_pos, S1, N2),
;         ep(Model_M40_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M40_trace_pos,
;         E1,
;         ep(Model_M40_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M40_trace_pos,
;         E2,
;         ep(Model_M40_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M40_trace_pos) != N1,
;      first(Model_M40_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M40_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M40_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M40_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M40_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M40_trace_pos S1 Node!val!0) false)
     (= (held Model_M40_trace_pos S1 Node!val!1) false)
     (= (held Model_M40_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M40_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M40_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M40_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M40_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M40_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M40_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M40_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M40_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M40_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M40_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M40_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M40_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M40_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M40_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M40_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M40_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M40_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M40_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M40_trace_pos) Epoch!val!3)
     (= (one Model_M40_trace_pos) Epoch!val!3)
     (= (first Model_M40_trace_pos) Node!val!2)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M40_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M41_trace_pos, S1, N1) == False,
;      held(Model_M41_trace_pos, S1, N2) == False,
;      transfer(Model_M41_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M41_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M41_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M41_trace_pos, S1, E2, N2) == False,
;      locked(Model_M41_trace_pos, S1, E1, N1) == False,
;      locked(Model_M41_trace_pos, S1, E1, N2) == False,
;      locked(Model_M41_trace_pos, S1, E2, N1) == False,
;      locked(Model_M41_trace_pos, S1, E2, N2) == False,
;      le(Model_M41_trace_pos,
;         E1,
;         ep(Model_M41_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M41_trace_pos,
;         E2,
;         ep(Model_M41_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M41_trace_pos,
;         ep(Model_M41_trace_pos, S1, N1),
;         ep(Model_M41_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M41_trace_pos,
;         ep(Model_M41_trace_pos, S1, N2),
;         ep(Model_M41_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M41_trace_pos,
;         E1,
;         ep(Model_M41_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M41_trace_pos,
;         E2,
;         ep(Model_M41_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M41_trace_pos) != N1,
;      first(Model_M41_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M41_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M41_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M41_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M41_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M41_trace_pos S1 Node!val!0) false)
     (= (held Model_M41_trace_pos S1 Node!val!1) false)
     (= (held Model_M41_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M41_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M41_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M41_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M41_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M41_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M41_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M41_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M41_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M41_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M41_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M41_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M41_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M41_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M41_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M41_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M41_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M41_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M41_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M41_trace_pos) Epoch!val!3)
     (= (one Model_M41_trace_pos) Epoch!val!3)
     (= (first Model_M41_trace_pos) Node!val!2)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M41_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M42_trace_pos, S1, N1) == False,
;      held(Model_M42_trace_pos, S1, N2) == True,
;      transfer(Model_M42_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M42_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M42_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M42_trace_pos, S1, E2, N2) == True,
;      locked(Model_M42_trace_pos, S1, E1, N1) == False,
;      locked(Model_M42_trace_pos, S1, E1, N2) == False,
;      locked(Model_M42_trace_pos, S1, E2, N1) == False,
;      locked(Model_M42_trace_pos, S1, E2, N2) == True,
;      le(Model_M42_trace_pos,
;         E1,
;         ep(Model_M42_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M42_trace_pos,
;         E2,
;         ep(Model_M42_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M42_trace_pos,
;         ep(Model_M42_trace_pos, S1, N1),
;         ep(Model_M42_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M42_trace_pos,
;         ep(Model_M42_trace_pos, S1, N2),
;         ep(Model_M42_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M42_trace_pos,
;         E1,
;         ep(Model_M42_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M42_trace_pos,
;         E2,
;         ep(Model_M42_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M42_trace_pos) != N1,
;      first(Model_M42_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M42_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M42_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M42_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M42_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M42_trace_pos S1 Node!val!0) false)
     (= (held Model_M42_trace_pos S1 Node!val!1) true)
     (= (held Model_M42_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M42_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M42_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M42_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M42_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M42_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M42_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M42_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M42_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M42_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M42_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M42_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M42_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M42_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M42_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M42_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M42_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M42_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M42_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M42_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M42_trace_pos) Epoch!val!3)
     (= (one Model_M42_trace_pos) Epoch!val!3)
     (= (first Model_M42_trace_pos) Node!val!2)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M42_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M43_trace_pos, S1, N1) == False,
;      held(Model_M43_trace_pos, S1, N2) == False,
;      transfer(Model_M43_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M43_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M43_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M43_trace_pos, S1, E2, N2) == True,
;      locked(Model_M43_trace_pos, S1, E1, N1) == False,
;      locked(Model_M43_trace_pos, S1, E1, N2) == False,
;      locked(Model_M43_trace_pos, S1, E2, N1) == False,
;      locked(Model_M43_trace_pos, S1, E2, N2) == False,
;      le(Model_M43_trace_pos,
;         E1,
;         ep(Model_M43_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M43_trace_pos,
;         E2,
;         ep(Model_M43_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M43_trace_pos,
;         ep(Model_M43_trace_pos, S1, N1),
;         ep(Model_M43_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M43_trace_pos,
;         ep(Model_M43_trace_pos, S1, N2),
;         ep(Model_M43_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M43_trace_pos,
;         E1,
;         ep(Model_M43_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M43_trace_pos,
;         E2,
;         ep(Model_M43_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M43_trace_pos) != N1,
;      first(Model_M43_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M43_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M43_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M43_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M43_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M43_trace_pos S1 Node!val!0) false)
     (= (held Model_M43_trace_pos S1 Node!val!1) false)
     (= (held Model_M43_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M43_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M43_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M43_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M43_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M43_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M43_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M43_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M43_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M43_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M43_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M43_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M43_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M43_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M43_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M43_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M43_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M43_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M43_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M43_trace_pos) Epoch!val!3)
     (= (one Model_M43_trace_pos) Epoch!val!3)
     (= (first Model_M43_trace_pos) Node!val!2)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M43_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M44_trace_pos, S1, N1) == True,
;      held(Model_M44_trace_pos, S1, N2) == False,
;      transfer(Model_M44_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M44_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M44_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M44_trace_pos, S1, E2, N2) == False,
;      locked(Model_M44_trace_pos, S1, E1, N1) == False,
;      locked(Model_M44_trace_pos, S1, E1, N2) == False,
;      locked(Model_M44_trace_pos, S1, E2, N1) == False,
;      locked(Model_M44_trace_pos, S1, E2, N2) == False,
;      le(Model_M44_trace_pos,
;         E1,
;         ep(Model_M44_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M44_trace_pos,
;         E2,
;         ep(Model_M44_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M44_trace_pos,
;         ep(Model_M44_trace_pos, S1, N1),
;         ep(Model_M44_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M44_trace_pos,
;         ep(Model_M44_trace_pos, S1, N2),
;         ep(Model_M44_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M44_trace_pos,
;         E1,
;         ep(Model_M44_trace_pos, S1, N2)) ==
;      False,
;      le(Model_M44_trace_pos,
;         E2,
;         ep(Model_M44_trace_pos, S1, N2)) ==
;      False,
;      first(Model_M44_trace_pos) != N1,
;      first(Model_M44_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_M44_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!2)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) true
;     false)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     false
;     true))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M44_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M44_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M44_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M44_trace_pos S1 Node!val!0) true)
     (= (held Model_M44_trace_pos S1 Node!val!1) false)
     (= (held Model_M44_trace_pos S1 Node!val!2) true)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M44_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M44_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M44_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M44_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M44_trace_pos Epoch!val!3 Epoch!val!2) true)
     (= (le Model_M44_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M44_trace_pos Epoch!val!0 Epoch!val!3) false)
     (= (le Model_M44_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M44_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M44_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M44_trace_pos Epoch!val!2 Epoch!val!3) false)
     (= (le Model_M44_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M44_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M44_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M44_trace_pos Epoch!val!1 Epoch!val!3) false)
     (= (le Model_M44_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M44_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M44_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M44_trace_pos) Epoch!val!3)
     (= (one Model_M44_trace_pos) Epoch!val!3)
     (= (first Model_M44_trace_pos) Node!val!2)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M44_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M45_trace_pos, S1, N1) == False,
;      held(Model_M45_trace_pos, S1, N2) == True,
;      transfer(Model_M45_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M45_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M45_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M45_trace_pos, S1, E2, N2) == False,
;      locked(Model_M45_trace_pos, S1, E1, N1) == False,
;      locked(Model_M45_trace_pos, S1, E1, N2) == False,
;      locked(Model_M45_trace_pos, S1, E2, N1) == False,
;      locked(Model_M45_trace_pos, S1, E2, N2) == False,
;      le(Model_M45_trace_pos,
;         E1,
;         ep(Model_M45_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M45_trace_pos,
;         E2,
;         ep(Model_M45_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M45_trace_pos,
;         ep(Model_M45_trace_pos, S1, N1),
;         ep(Model_M45_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M45_trace_pos,
;         ep(Model_M45_trace_pos, S1, N2),
;         ep(Model_M45_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M45_trace_pos,
;         E1,
;         ep(Model_M45_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M45_trace_pos,
;         E2,
;         ep(Model_M45_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M45_trace_pos) != N1,
;      first(Model_M45_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M45_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M45_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M45_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M45_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M45_trace_pos S1 Node!val!0) false)
     (= (held Model_M45_trace_pos S1 Node!val!1) true)
     (= (held Model_M45_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M45_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M45_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M45_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M45_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M45_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M45_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M45_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M45_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M45_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M45_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M45_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M45_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M45_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M45_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M45_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M45_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M45_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M45_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M45_trace_pos) Epoch!val!3)
     (= (one Model_M45_trace_pos) Epoch!val!3)
     (= (first Model_M45_trace_pos) Node!val!2)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M45_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M46_trace_pos, S1, N1) == False,
;      held(Model_M46_trace_pos, S1, N2) == True,
;      transfer(Model_M46_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M46_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M46_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M46_trace_pos, S1, E2, N2) == True,
;      locked(Model_M46_trace_pos, S1, E1, N1) == False,
;      locked(Model_M46_trace_pos, S1, E1, N2) == False,
;      locked(Model_M46_trace_pos, S1, E2, N1) == False,
;      locked(Model_M46_trace_pos, S1, E2, N2) == True,
;      le(Model_M46_trace_pos,
;         E1,
;         ep(Model_M46_trace_pos, S1, N1)) ==
;      True,
;      le(Model_M46_trace_pos,
;         E2,
;         ep(Model_M46_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M46_trace_pos,
;         ep(Model_M46_trace_pos, S1, N1),
;         ep(Model_M46_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M46_trace_pos,
;         ep(Model_M46_trace_pos, S1, N2),
;         ep(Model_M46_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M46_trace_pos,
;         E1,
;         ep(Model_M46_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M46_trace_pos,
;         E2,
;         ep(Model_M46_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M46_trace_pos) != N1,
;      first(Model_M46_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M46_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!2)) false
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!2)) false
;     true)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M46_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M46_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M46_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M46_trace_pos S1 Node!val!0) false)
     (= (held Model_M46_trace_pos S1 Node!val!1) true)
     (= (held Model_M46_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M46_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M46_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M46_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M46_trace_pos Epoch!val!3 Epoch!val!3) true)
     (= (le Model_M46_trace_pos Epoch!val!3 Epoch!val!0) true)
     (= (le Model_M46_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M46_trace_pos Epoch!val!3 Epoch!val!1) true)
     (= (le Model_M46_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M46_trace_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_M46_trace_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_M46_trace_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_M46_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M46_trace_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_M46_trace_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_M46_trace_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_M46_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M46_trace_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_M46_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M46_trace_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_M46_trace_pos) Epoch!val!3)
     (= (one Model_M46_trace_pos) Epoch!val!3)
     (= (first Model_M46_trace_pos) Node!val!2)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M46_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M47_trace_pos, S1, N1) == False,
;      held(Model_M47_trace_pos, S1, N2) == False,
;      transfer(Model_M47_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M47_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M47_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M47_trace_pos, S1, E2, N2) == True,
;      locked(Model_M47_trace_pos, S1, E1, N1) == False,
;      locked(Model_M47_trace_pos, S1, E1, N2) == False,
;      locked(Model_M47_trace_pos, S1, E2, N1) == False,
;      locked(Model_M47_trace_pos, S1, E2, N2) == True,
;      le(Model_M47_trace_pos,
;         E1,
;         ep(Model_M47_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M47_trace_pos,
;         E2,
;         ep(Model_M47_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M47_trace_pos,
;         ep(Model_M47_trace_pos, S1, N1),
;         ep(Model_M47_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M47_trace_pos,
;         ep(Model_M47_trace_pos, S1, N2),
;         ep(Model_M47_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M47_trace_pos,
;         E1,
;         ep(Model_M47_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M47_trace_pos,
;         E2,
;         ep(Model_M47_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M47_trace_pos) != N1,
;      first(Model_M47_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun Model_M47_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) true
;     false))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M47_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M47_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M47_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M47_trace_pos S1 Node!val!0) false)
     (= (held Model_M47_trace_pos S1 Node!val!1) false)
     (= (held Model_M47_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M47_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M47_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M47_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M47_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M47_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M47_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M47_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M47_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M47_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M47_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M47_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M47_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M47_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M47_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M47_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M47_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M47_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M47_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M47_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M47_trace_pos) Epoch!val!3)
     (= (one Model_M47_trace_pos) Epoch!val!3)
     (= (first Model_M47_trace_pos) Node!val!2)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M47_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M48_trace_pos, S1, N1) == False,
;      held(Model_M48_trace_pos, S1, N2) == False,
;      transfer(Model_M48_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M48_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M48_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M48_trace_pos, S1, E2, N2) == False,
;      locked(Model_M48_trace_pos, S1, E1, N1) == False,
;      locked(Model_M48_trace_pos, S1, E1, N2) == False,
;      locked(Model_M48_trace_pos, S1, E2, N1) == False,
;      locked(Model_M48_trace_pos, S1, E2, N2) == False,
;      le(Model_M48_trace_pos,
;         E1,
;         ep(Model_M48_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M48_trace_pos,
;         E2,
;         ep(Model_M48_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M48_trace_pos,
;         ep(Model_M48_trace_pos, S1, N1),
;         ep(Model_M48_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M48_trace_pos,
;         ep(Model_M48_trace_pos, S1, N2),
;         ep(Model_M48_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M48_trace_pos,
;         E1,
;         ep(Model_M48_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M48_trace_pos,
;         E2,
;         ep(Model_M48_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M48_trace_pos) != N1,
;      first(Model_M48_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_M48_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) true
;     false))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   false)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M48_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M48_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M48_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M48_trace_pos S1 Node!val!0) false)
     (= (held Model_M48_trace_pos S1 Node!val!1) false)
     (= (held Model_M48_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (transfer Model_M48_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_M48_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M48_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M48_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M48_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M48_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M48_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M48_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M48_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M48_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M48_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M48_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M48_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M48_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M48_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M48_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M48_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M48_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M48_trace_pos) Epoch!val!3)
     (= (one Model_M48_trace_pos) Epoch!val!3)
     (= (first Model_M48_trace_pos) Node!val!2)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M48_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [And(held(Model_M49_trace_pos, S1, N1) == False,
;      held(Model_M49_trace_pos, S1, N2) == True,
;      transfer(Model_M49_trace_pos, S1, E1, N1) == False,
;      transfer(Model_M49_trace_pos, S1, E1, N2) == False,
;      transfer(Model_M49_trace_pos, S1, E2, N1) == False,
;      transfer(Model_M49_trace_pos, S1, E2, N2) == True,
;      locked(Model_M49_trace_pos, S1, E1, N1) == False,
;      locked(Model_M49_trace_pos, S1, E1, N2) == False,
;      locked(Model_M49_trace_pos, S1, E2, N1) == False,
;      locked(Model_M49_trace_pos, S1, E2, N2) == True,
;      le(Model_M49_trace_pos,
;         E1,
;         ep(Model_M49_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M49_trace_pos,
;         E2,
;         ep(Model_M49_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M49_trace_pos,
;         ep(Model_M49_trace_pos, S1, N1),
;         ep(Model_M49_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M49_trace_pos,
;         ep(Model_M49_trace_pos, S1, N2),
;         ep(Model_M49_trace_pos, S1, N1)) ==
;      False,
;      le(Model_M49_trace_pos,
;         E1,
;         ep(Model_M49_trace_pos, S1, N2)) ==
;      True,
;      le(Model_M49_trace_pos,
;         E2,
;         ep(Model_M49_trace_pos, S1, N2)) ==
;      True,
;      first(Model_M49_trace_pos) != N1,
;      first(Model_M49_trace_pos) != N2)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_M49_trace_pos () ModelId
;   ModelId!val!0)
; (define-fun N2 () Node
;   Node!val!1)
; (define-fun E2 () Epoch
;   Epoch!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun N1 () Node
;   Node!val!0)
; (define-fun E1 () Epoch
;   Epoch!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!3)) true
;   (ite (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!3)) true
;     false))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)) true
;     false))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (= x!2 Epoch!val!1)
;             (= x!3 Node!val!1))
;     true
;     false))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_M49_trace_pos S1 Node!val!0) Epoch!val!2)
     (= (ep Model_M49_trace_pos S1 Node!val!1) Epoch!val!3)
     (= (ep Model_M49_trace_pos S1 Node!val!2) Epoch!val!2)
     (= (held Model_M49_trace_pos S1 Node!val!0) false)
     (= (held Model_M49_trace_pos S1 Node!val!1) true)
     (= (held Model_M49_trace_pos S1 Node!val!2) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (transfer Model_M49_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!3 Node!val!2) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!0 Node!val!0) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!0 Node!val!1) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!0 Node!val!2) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!2 Node!val!1) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!2 Node!val!2) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!1 Node!val!0) false)
     (= (locked Model_M49_trace_pos S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_M49_trace_pos S1 Epoch!val!1 Node!val!2) false)
     (= (le Model_M49_trace_pos Epoch!val!3 Epoch!val!3) false)
     (= (le Model_M49_trace_pos Epoch!val!3 Epoch!val!0) false)
     (= (le Model_M49_trace_pos Epoch!val!3 Epoch!val!2) false)
     (= (le Model_M49_trace_pos Epoch!val!3 Epoch!val!1) false)
     (= (le Model_M49_trace_pos Epoch!val!0 Epoch!val!3) true)
     (= (le Model_M49_trace_pos Epoch!val!0 Epoch!val!0) false)
     (= (le Model_M49_trace_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_M49_trace_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_M49_trace_pos Epoch!val!2 Epoch!val!3) true)
     (= (le Model_M49_trace_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_M49_trace_pos Epoch!val!2 Epoch!val!2) false)
     (= (le Model_M49_trace_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_M49_trace_pos Epoch!val!1 Epoch!val!3) true)
     (= (le Model_M49_trace_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_M49_trace_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_M49_trace_pos Epoch!val!1 Epoch!val!1) false)
     (= (zero Model_M49_trace_pos) Epoch!val!3)
     (= (one Model_M49_trace_pos) Epoch!val!3)
     (= (first Model_M49_trace_pos) Node!val!2)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!3)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_M49_trace_pos S1 Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(False)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!1
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_0_pos init Node!val!0) Epoch!val!1)
     (= (held Model_0_pos init Node!val!0) true)
     (= (transfer Model_0_pos init Epoch!val!0 Node!val!0) false)
     (= (transfer Model_0_pos init Epoch!val!2 Node!val!0) false)
     (= (transfer Model_0_pos init Epoch!val!1 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!0 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!2 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!1 Node!val!0) false)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_0_pos) Epoch!val!2)
     (= (one Model_0_pos) Epoch!val!1)
     (= (first Model_0_pos) Node!val!0)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.NegativeCEX'>)
; True
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_2_neg, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_2_neg,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_neg,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_2_neg,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_2_neg,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_neg,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_2_neg,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_2_neg,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_2_neg,
;                              zero(Model_2_neg),
;                              Epoch_1),
;                           one(Model_2_neg) !=
;                           zero(Model_2_neg))))),
;  And(True,
;      ForAll([n1, e1],
;             Or(Not(locked(Model_2_neg, S1, e1, n1)),
;                transfer(Model_2_neg, S1, e1, n1)))),
;  True,
;  Not(ForAll(Epoch_1,
;             ForAll(Node_1,
;                    ForAll(Node_2,
;                           Implies(And(locked(Model_2_neg,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                       locked(Model_2_neg,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                                   Node_1 == Node_2)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_2_neg () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!3 Node!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!3 Node!val!0)))))
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_2_neg S1 Node!val!0) Epoch!val!0)
     (= (ep Model_2_neg S1 Node!val!1) Epoch!val!0)
     (= (held Model_2_neg S1 Node!val!0) false)
     (= (held Model_2_neg S1 Node!val!1) false)
     (= (transfer Model_2_neg S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_2_neg S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_2_neg S1 Epoch!val!2 Node!val!0) true)
     (= (transfer Model_2_neg S1 Epoch!val!2 Node!val!1) true)
     (= (transfer Model_2_neg S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_2_neg S1 Epoch!val!1 Node!val!1) true)
     (= (locked Model_2_neg S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_2_neg S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_2_neg S1 Epoch!val!2 Node!val!0) true)
     (= (locked Model_2_neg S1 Epoch!val!2 Node!val!1) true)
     (= (locked Model_2_neg S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_2_neg S1 Epoch!val!1 Node!val!1) true)
     (= (le Model_2_neg Epoch!val!0 Epoch!val!0) true)
     (= (le Model_2_neg Epoch!val!0 Epoch!val!2) false)
     (= (le Model_2_neg Epoch!val!0 Epoch!val!1) false)
     (= (le Model_2_neg Epoch!val!2 Epoch!val!0) true)
     (= (le Model_2_neg Epoch!val!2 Epoch!val!2) true)
     (= (le Model_2_neg Epoch!val!2 Epoch!val!1) true)
     (= (le Model_2_neg Epoch!val!1 Epoch!val!0) true)
     (= (le Model_2_neg Epoch!val!1 Epoch!val!2) false)
     (= (le Model_2_neg Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_2_neg) Epoch!val!2)
     (= (one Model_2_neg) Epoch!val!1)
     (= (first Model_2_neg) Node!val!0)
     (not (and (inv Model_2_neg S1 Node!val!0 Node!val!0 Epoch!val!0)
               (inv Model_2_neg S1 Node!val!0 Node!val!0 Epoch!val!2)
               (inv Model_2_neg S1 Node!val!0 Node!val!0 Epoch!val!1)
               (inv Model_2_neg S1 Node!val!0 Node!val!1 Epoch!val!0)
               (inv Model_2_neg S1 Node!val!0 Node!val!1 Epoch!val!2)
               (inv Model_2_neg S1 Node!val!0 Node!val!1 Epoch!val!1)
               (inv Model_2_neg S1 Node!val!1 Node!val!0 Epoch!val!0)
               (inv Model_2_neg S1 Node!val!1 Node!val!0 Epoch!val!2)
               (inv Model_2_neg S1 Node!val!1 Node!val!0 Epoch!val!1)
               (inv Model_2_neg S1 Node!val!1 Node!val!1 Epoch!val!0)
               (inv Model_2_neg S1 Node!val!1 Node!val!1 Epoch!val!2)
               (inv Model_2_neg S1 Node!val!1 Node!val!1 Epoch!val!1)))))



;(declare-fun DUMMYMODEL () ModelId)
;(declare-fun DUMMYSTATE () StateId)
(declare-fun N1 () Node)
(declare-fun N2 () Node)
(declare-fun E1 () Epoch)


;(assert (not (= (inv DUMMYMODEL DUMMYSTATE N1 N2 E1) true)))


        (check-sat)
(get-value (inv_b0 inv_b1 inv_b2 inv_b3 inv_b4 inv_b5 inv_b6 inv_b7 inv_b8 inv_b9 inv_b10 inv_b11 inv_b12 inv_b13 inv_b14 inv_b15 inv_b16 inv_b17 inv_b18 inv_b19 inv_b20 inv_b21 inv_b22 inv_b23 inv_b24 inv_b25 inv_b26 inv_b27 inv_b28 inv_b29 inv_b30 inv_b31 inv_b32 inv_b33 inv_b34 inv_b35 inv_b36 inv_b37 inv_b38 inv_b39 inv_b40 inv_b41 inv_b42 inv_b43 inv_b44 inv_b45 inv_b46 inv_b47 inv_b48 inv_b49 inv_b50 inv_b51 inv_b52 inv_b53 inv_b54 inv_b55 inv_b56 inv_b57 inv_b58 inv_b59 inv_b60 inv_b61 inv_b62 inv_b63 inv_b64 inv_b65 inv_b66 inv_b67 inv_b68 inv_b69 inv_b70 inv_b71 inv_b72 inv_b73 inv_b74 inv_b75 inv_b76 inv_b77 inv_b78 inv_b79 inv_b80 inv_b81 inv_b82 inv_b83 inv_b84 inv_b85 inv_b86 inv_b87 inv_b88 inv_b89 inv_b90 inv_b91 inv_b92 inv_b93 inv_b94 inv_b95 inv_b96 inv_b97 inv_b98 inv_b99 inv_b100 inv_b101 inv_b102 inv_b103 inv_b104 inv_b105 inv_b106 inv_b107 inv_b108 inv_b109 inv_b110 inv_b111 inv_b112 inv_b113 inv_b114 inv_b115 inv_b116 inv_b117 inv_b118 inv_b119 inv_b120 inv_b121 inv_b122 inv_b123 inv_b124 inv_b125 inv_b126 inv_b127 inv_b128 inv_b129 inv_b130 inv_b131 inv_b132 inv_b133 inv_b134 inv_b135 inv_b136 inv_b137 inv_b138 inv_b139 inv_b140 inv_b141 inv_b142 inv_b143 inv_b144 inv_b145 inv_b146 inv_b147 inv_b148 inv_b149 inv_b150 inv_b151 inv_b152 inv_b153 inv_b154 inv_b155 inv_b156 inv_b157 inv_b158 inv_b159 inv_b160 inv_b161 inv_b162 inv_b163 inv_b164 inv_b165 inv_b166 inv_b167 inv_b168 inv_b169 inv_b170 inv_b171 inv_b172 inv_b173 inv_b174 inv_b175 inv_b176 inv_b177 inv_b178 inv_b179 inv_b180 inv_b181 inv_b182 inv_b183 inv_b184 inv_b185 inv_b186 inv_b187 inv_b188 inv_b189 inv_b190 inv_b191 inv_b192 inv_b193 inv_b194 inv_b195 inv_b196 inv_b197 inv_b198 inv_b199 inv_b200 inv_b201 inv_b202 inv_b203 inv_b204 inv_b205 inv_b206 inv_b207 inv_b208 inv_b209 inv_b210 inv_b211 inv_b212 inv_b213 inv_b214 inv_b215 inv_b216 inv_b217 inv_b218 inv_b219 inv_b220 inv_b221 inv_b222 inv_b223 inv_b224 inv_b225 inv_b226 inv_b227 inv_b228 inv_b229 inv_b230 inv_b231 inv_b232 inv_b233 inv_b234 inv_b235 inv_b236 inv_b237 inv_b238 inv_b239 inv_b240 inv_b241 inv_b242 inv_b243 inv_b244 inv_b245 inv_b246 inv_b247 inv_b248 inv_b249 inv_b250 inv_b251 inv_b252 inv_b253 inv_b254 inv_b255 inv_b256 inv_b257 inv_b258 inv_b259 inv_b260 inv_b261 inv_b262 inv_b263 inv_b264 inv_b265 inv_b266 inv_b267 inv_b268 inv_b269 inv_b270 inv_b271 inv_b272 inv_b273 inv_b274 inv_b275 inv_b276 inv_b277 inv_b278 inv_b279 inv_b280 inv_b281 inv_b282 inv_b283 inv_b284 inv_b285 inv_b286 inv_b287 inv_b288 inv_b289 inv_b290 inv_b291 inv_b292 inv_b293 inv_b294 inv_b295 inv_b296 inv_b297 inv_b298 inv_b299 inv_b300 inv_b301 inv_b302 inv_b303 inv_b304 inv_b305 inv_b306 inv_b307 inv_b308 inv_b309 inv_b310 inv_b311 inv_b312 inv_b313 inv_b314 inv_b315 inv_b316 inv_b317 inv_b318 inv_b319 inv_b320 inv_b321 inv_b322 inv_b323 inv_b324 inv_b325 inv_b326 inv_b327 inv_b328 inv_b329 inv_b330 inv_b331 inv_b332 inv_b333 inv_b334 inv_b335 inv_b336 inv_b337 inv_b338 inv_b339 inv_b340 inv_b341 inv_b342 inv_b343 inv_b344 inv_b345 inv_b346 inv_b347 inv_b348 inv_b349 inv_b350 inv_b351 inv_b352 inv_b353 inv_b354 inv_b355 inv_b356 inv_b357 inv_b358 inv_b359 inv_b360 inv_b361 inv_b362 inv_b363 inv_b364 inv_b365 inv_b366 inv_b367 inv_b368 inv_b369 inv_b370 inv_b371 inv_b372 inv_b373 inv_b374 inv_b375 inv_b376 inv_b377 inv_b378 inv_b379 inv_b380 inv_b381 inv_b382 inv_b383 inv_b384 inv_b385 inv_b386 inv_b387 inv_b388 inv_b389 inv_b390 inv_b391 inv_b392 inv_b393 inv_b394 inv_b395 inv_b396 inv_b397 inv_b398 inv_b399 inv_b400 inv_b401 inv_b402 inv_b403 inv_b404 inv_b405 inv_b406 inv_b407 inv_b408 inv_b409 inv_b410 inv_b411 inv_b412 inv_b413 inv_b414 inv_b415 inv_b416 inv_b417 inv_b418 inv_b419 inv_b420 inv_b421 inv_b422 inv_b423 inv_b424 inv_b425 inv_b426 inv_b427 inv_b428 inv_b429 inv_b430 inv_b431 inv_b432 inv_b433 inv_b434 inv_b435 inv_b436 inv_b437 inv_b438 inv_b439 inv_b440 inv_b441 inv_b442 inv_b443 inv_b444 inv_b445 inv_b446 inv_b447 inv_b448 inv_b449 inv_b450 inv_b451 inv_b452 inv_b453 inv_b454 inv_b455 inv_b456 inv_b457 inv_b458 inv_b459 inv_b460 inv_b461 inv_b462 inv_b463 inv_b464 inv_b465 inv_b466 inv_b467 inv_b468 inv_b469 inv_b470 inv_b471 inv_b472 inv_b473 inv_b474 inv_b475 inv_b476 inv_b477 inv_b478 inv_b479 inv_b480 inv_b481 inv_b482 inv_b483 inv_b484 inv_b485 inv_b486 inv_b487 inv_b488 inv_b489 inv_b490 inv_b491 inv_b492 inv_b493 inv_b494 inv_b495 inv_b496 inv_b497 inv_b498 inv_b499 inv_b500 inv_b501 inv_b502 inv_b503 inv_b504 inv_b505 inv_b506 inv_b507 inv_b508 inv_b509 inv_b510 inv_b511 inv_b512 inv_b513 inv_b514 inv_b515 inv_b516 inv_b517 inv_b518 inv_b519 inv_b520 inv_b521 inv_b522 inv_b523 inv_b524 inv_b525 inv_b526 inv_b527 inv_b528 inv_b529 inv_b530 inv_b531 inv_b532 inv_b533 inv_b534 inv_b535 inv_b536 inv_b537 inv_b538 inv_b539 inv_b540 inv_b541 inv_b542 inv_b543 inv_b544 inv_b545 inv_b546 inv_b547 inv_b548 inv_b549 inv_b550 inv_b551 inv_b552 inv_b553 inv_b554 inv_b555 inv_b556 inv_b557 inv_b558 inv_b559 inv_b560 inv_b561 inv_b562 inv_b563 inv_b564 inv_b565 inv_b566 inv_b567 inv_b568 inv_b569 inv_b570 inv_b571 inv_b572 inv_b573 inv_b574 inv_b575 inv_b576 inv_b577 inv_b578 inv_b579 inv_b580 inv_b581 inv_b582 inv_b583 inv_b584 inv_b585 inv_b586 inv_b587 inv_b588 inv_b589 inv_b590 inv_b591 inv_b592 inv_b593 inv_b594 inv_b595 inv_b596 inv_b597 inv_b598 inv_b599 inv_b600 inv_b601 inv_b602 inv_b603 inv_b604 inv_b605 inv_b606 inv_b607 inv_b608 inv_b609 inv_b610 inv_b611 inv_b612 inv_b613 inv_b614 inv_b615 inv_b616 inv_b617 inv_b618 inv_b619 inv_b620 inv_b621 inv_b622 inv_b623 inv_b624 inv_b625 inv_b626 inv_b627 inv_b628 inv_b629 inv_b630 inv_b631 inv_b632 inv_b633 inv_b634 inv_b635 inv_b636 inv_b637 inv_b638 inv_b639 inv_b640 inv_b641 inv_b642 inv_b643 inv_b644 inv_b645 inv_b646 inv_b647 inv_b648 inv_b649 inv_b650 inv_b651 inv_b652 inv_b653 inv_b654 inv_b655 inv_b656 inv_b657 inv_b658 inv_b659 inv_b660 inv_b661 inv_b662 inv_b663 inv_b664 inv_b665 inv_b666 inv_b667 inv_b668 inv_b669 inv_b670 inv_b671 inv_b672 inv_b673 inv_b674 inv_b675 inv_b676 inv_b677 inv_b678 inv_b679 inv_b680 inv_b681 inv_b682 inv_b683 inv_b684 inv_b685 inv_b686 inv_b687 inv_b688 inv_b689 inv_b690 inv_b691 inv_b692 inv_b693 inv_b694 inv_b695 inv_b696 inv_b697 inv_b698 inv_b699 inv_b700 inv_b701 inv_b702 inv_b703 inv_b704 inv_b705 inv_b706 inv_b707 inv_b708 inv_b709 inv_b710 inv_b711 inv_b712 inv_b713 inv_b714 inv_b715 inv_b716 inv_b717 inv_b718 inv_b719 inv_b720 inv_b721 inv_b722 inv_b723 inv_b724 inv_b725 inv_b726 inv_b727 inv_b728 inv_b729 inv_b730 inv_b731 inv_b732 inv_b733 inv_b734 inv_b735 inv_b736 inv_b737 inv_b738 inv_b739 inv_b740 inv_b741 inv_b742 inv_b743 inv_b744 inv_b745 inv_b746 inv_b747 inv_b748 inv_b749 inv_b750 inv_b751 inv_b752 inv_b753 inv_b754 inv_b755 inv_b756 inv_b757 inv_b758 inv_b759 inv_b760 inv_b761 inv_b762 inv_b763 inv_b764 inv_b765 inv_b766 inv_b767 inv_b768 inv_b769 inv_b770 inv_b771))