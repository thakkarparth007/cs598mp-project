
(set-logic ALL)

(set-option :random-seed 123)

(declare-datatypes ( (Node 0) ) ((
(Node!val!0) 
(Node!val!2) 
(Node!val!1) 
)))

(declare-datatypes ( (Epoch 0) ) ((
(Epoch!val!0) 
(Epoch!val!3) 
(Epoch!val!2) 
(Epoch!val!1) 
)))

(declare-datatypes ( (ModelId 0) ) ((
(Model_DUMMYMODEL) 
(Model_219_ice) 
(Model_233_ice) 
(Model_231_ice) 
(Model_217_ice) 
(Model_104_pos) 
(Model_214_ice) 
(Model_220_ice) 
(Model_0_pos) 
(Model_213_ice) 
(Model_227_ice) 
(Model_229_ice) 
(Model_215_ice) 
(Model_221_ice) 
(Model_226_ice) 
(Model_230_ice) 
(Model_218_ice) 
(Model_223_ice) 
(Model_232_ice) 
(Model_2_pos) 
(Model_224_ice) 
(Model_228_ice) 
(Model_216_ice) 
(Model_145_pos) 
(Model_222_ice) 
(Model_225_ice) 
)))

(declare-datatypes ( (StateId 0) ) ((
(DUMMYSTATE) 
(S2) 
(S1) 
(init) 
)))

;; definitions of functions defining models.
(declare-fun ep_dummy (ModelId StateId Node) Epoch)
(define-fun ep ((a0 ModelId) (a1 StateId) (a2 Node)) Epoch
(ite (= a0 Model_DUMMYMODEL) (ep_dummy a0 a1 a2 )
    (ite (= a0 Model_2_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_145_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!1
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_213_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_214_ice)
        (ite (= a1 S1)
            Epoch!val!1
;        if a1 IN [S2, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_215_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_216_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!0
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_217_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_218_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                Epoch!val!2
;            if a2 IN [Node!val!1, ] 
                Epoch!val!1
            )
;        if a1 IN [S1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_219_ice)
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!0, Node!val!2, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_220_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!0
        )
    (ite (= a0 Model_221_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, Node!val!2, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_222_ice)
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!0, Node!val!2, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_223_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!1
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_225_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!1
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!2
        ))
    (ite (= a0 Model_226_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_227_ice)
        (ite (= a1 S1)
            Epoch!val!1
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_228_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_229_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_230_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_231_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!0
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!1
        ))
    (ite (= a0 Model_232_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!1
        ))
    (ite (= a0 Model_233_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!1
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!0
        ))
    (ite (= a0 Model_224_ice)
        Epoch!val!3
;    if a0 IN [Model_0_pos, Model_104_pos, ] 
        Epoch!val!1
    )))))))))))))))))))))))
))

(declare-fun held_dummy (ModelId StateId Node) Bool)
(define-fun held ((a0 ModelId) (a1 StateId) (a2 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (held_dummy a0 a1 a2 )
    (ite (= a2 Node!val!0)
        (ite (= a0 Model_213_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_214_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_217_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_223_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_224_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_226_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_227_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_228_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_229_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (or (= a0 Model_0_pos) (= a0 Model_104_pos) )
            true
;        if a0 IN [Model_231_ice, Model_219_ice, Model_230_ice, Model_220_ice, Model_218_ice, Model_215_ice, Model_216_ice, Model_145_pos, Model_232_ice, Model_222_ice, Model_2_pos, Model_233_ice, Model_221_ice, Model_225_ice, ] 
            false
        ))))))))))
    (ite (= a2 Node!val!1)
        (ite (= a0 Model_215_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_216_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_218_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_219_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_220_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_221_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_222_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_225_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_230_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_231_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_232_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a0 Model_233_ice)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (or (= a0 Model_2_pos) (= a0 Model_145_pos) )
            true
;        if a0 IN [Model_217_ice, Model_226_ice, Model_223_ice, Model_213_ice, Model_228_ice, Model_229_ice, ] 
            false
        )))))))))))))
;    if a2 IN [Node!val!2, ] 
        false
    ))
))

(declare-fun transfer_dummy (ModelId StateId Epoch Node) Bool)
(define-fun transfer ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (transfer_dummy a0 a1 a2 a3 )
    (ite (= a0 Model_213_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_214_ice)
        (ite (= a2 Epoch!val!2)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_215_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        ))
    (ite (= a0 Model_216_ice)
        (ite (= a2 Epoch!val!0)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_217_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_218_ice)
        (ite (= a3 Node!val!1)
            (ite (= a2 Epoch!val!0)
                false
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                true
            )
;        if a3 IN [Node!val!0, ] 
            false
        )
    (ite (= a0 Model_219_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_220_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_221_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_222_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            ))
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_223_ice)
        (ite (= a2 Epoch!val!0)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_224_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a2 Epoch!val!3)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        ))
    (ite (= a0 Model_225_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!3, ] 
            false
        ))
    (ite (= a0 Model_226_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!3, ] 
            false
        ))
    (ite (= a0 Model_227_ice)
        (ite (or (= a2 Epoch!val!1) (= a2 Epoch!val!3) )
            true
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_228_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_229_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_230_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!3, ] 
            false
        ))
    (ite (= a0 Model_231_ice)
        (ite (= a2 Epoch!val!0)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_232_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            ))
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_233_ice)
        (ite (= a2 Epoch!val!0)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            false
        )
;    if a0 IN [Model_2_pos, Model_145_pos, Model_0_pos, Model_104_pos, ] 
        false
    )))))))))))))))))))))
))

(declare-fun locked_dummy (ModelId StateId Epoch Node) Bool)
(define-fun locked ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (locked_dummy a0 a1 a2 a3 )
    (ite (= a0 Model_214_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_215_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        ))
    (ite (= a0 Model_216_ice)
        (ite (= a2 Epoch!val!0)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_218_ice)
        (ite (= a3 Node!val!1)
            (ite (= a2 Epoch!val!1)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
            (ite (= a2 Epoch!val!0)
                false
;            if a2 IN [Epoch!val!2, ] 
                true
            ))
;        if a3 IN [Node!val!0, ] 
            false
        )
    (ite (= a0 Model_220_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_222_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        )
    (ite (= a0 Model_224_ice)
        (ite (= a2 Epoch!val!3)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_225_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_226_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_227_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!2, ] 
            false
        ))
    (ite (= a0 Model_230_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!3, ] 
            false
        ))
    (ite (= a0 Model_232_ice)
        (ite (= a2 Epoch!val!1)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
            false
        )
;    if a0 IN [Model_231_ice, Model_217_ice, Model_219_ice, Model_104_pos, Model_0_pos, Model_223_ice, Model_213_ice, Model_228_ice, Model_145_pos, Model_229_ice, Model_2_pos, Model_233_ice, Model_221_ice, ] 
        false
    ))))))))))))
))

(declare-fun le_dummy (ModelId Epoch Epoch) Bool)
(define-fun le ((a0 ModelId) (a1 Epoch) (a2 Epoch)) Bool
(ite (= a0 Model_DUMMYMODEL) (le_dummy a0 a1 a2 )
    (ite (= a1 Epoch!val!0)
        (ite (= a0 Model_0_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_2_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_104_pos)
            (ite (= a2 Epoch!val!2)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, ] 
                true
            )
        (ite (= a0 Model_145_pos)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_216_ice)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_223_ice)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_231_ice)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_233_ice)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
;        if a0 IN [Model_217_ice, Model_219_ice, Model_226_ice, Model_230_ice, Model_214_ice, Model_218_ice, Model_220_ice, Model_213_ice, Model_227_ice, Model_228_ice, Model_232_ice, Model_229_ice, Model_222_ice, Model_215_ice, Model_224_ice, Model_221_ice, Model_225_ice, ] 
            true
        ))))))))
    (ite (= a1 Epoch!val!2)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_231_ice) (= a0 Model_104_pos) (= a0 Model_0_pos) (= a0 Model_223_ice) (= a0 Model_2_pos) (= a0 Model_233_ice) )
                true
;            if a0 IN [Model_219_ice, Model_217_ice, Model_214_ice, Model_220_ice, Model_213_ice, Model_227_ice, Model_229_ice, Model_215_ice, Model_221_ice, Model_226_ice, Model_230_ice, Model_218_ice, Model_232_ice, Model_224_ice, Model_228_ice, Model_216_ice, Model_145_pos, Model_222_ice, Model_225_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_231_ice) (= a0 Model_230_ice) (= a0 Model_214_ice) (= a0 Model_220_ice) (= a0 Model_216_ice) (= a0 Model_145_pos) (= a0 Model_229_ice) (= a0 Model_215_ice) (= a0 Model_224_ice) (= a0 Model_233_ice) )
                false
;            if a0 IN [Model_217_ice, Model_219_ice, Model_226_ice, Model_104_pos, Model_218_ice, Model_0_pos, Model_223_ice, Model_213_ice, Model_227_ice, Model_228_ice, Model_232_ice, Model_222_ice, Model_2_pos, Model_221_ice, Model_225_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_227_ice) (= a0 Model_230_ice) (= a0 Model_232_ice) )
                true
;            if a0 IN [Model_226_ice, Model_228_ice, Model_229_ice, Model_215_ice, Model_224_ice, Model_225_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!2, ] 
            true
        )))
    (ite (= a1 Epoch!val!1)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_231_ice) (= a0 Model_0_pos) (= a0 Model_223_ice) (= a0 Model_216_ice) (= a0 Model_145_pos) (= a0 Model_2_pos) (= a0 Model_233_ice) )
                true
;            if a0 IN [Model_217_ice, Model_219_ice, Model_226_ice, Model_104_pos, Model_230_ice, Model_214_ice, Model_218_ice, Model_220_ice, Model_213_ice, Model_227_ice, Model_228_ice, Model_232_ice, Model_229_ice, Model_222_ice, Model_215_ice, Model_224_ice, Model_221_ice, Model_225_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_231_ice) (= a0 Model_230_ice) (= a0 Model_214_ice) (= a0 Model_220_ice) (= a0 Model_216_ice) (= a0 Model_145_pos) (= a0 Model_229_ice) (= a0 Model_215_ice) (= a0 Model_224_ice) (= a0 Model_233_ice) )
                true
;            if a0 IN [Model_217_ice, Model_219_ice, Model_226_ice, Model_104_pos, Model_218_ice, Model_0_pos, Model_223_ice, Model_213_ice, Model_227_ice, Model_228_ice, Model_232_ice, Model_222_ice, Model_2_pos, Model_221_ice, Model_225_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_228_ice) (= a0 Model_226_ice) (= a0 Model_225_ice) )
                false
;            if a0 IN [Model_230_ice, Model_227_ice, Model_232_ice, Model_229_ice, Model_215_ice, Model_224_ice, ] 
                true
            )
;        if a2 IN [Epoch!val!1, ] 
            true
        )))
;    if a1 IN [Epoch!val!3, ] 
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_227_ice) (= a0 Model_230_ice) (= a0 Model_232_ice) )
                false
;            if a0 IN [Model_226_ice, Model_228_ice, Model_229_ice, Model_215_ice, Model_224_ice, Model_225_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_228_ice) (= a0 Model_226_ice) (= a0 Model_225_ice) )
                true
;            if a0 IN [Model_230_ice, Model_227_ice, Model_232_ice, Model_229_ice, Model_215_ice, Model_224_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            true
;        if a2 IN [Epoch!val!0, ] 
            false
        )))
    )))
))

(declare-fun zero_dummy (ModelId) Epoch)
(define-fun zero ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (zero_dummy a0 )
    (ite (or (= a0 Model_2_pos) (= a0 Model_0_pos) (= a0 Model_223_ice) (= a0 Model_104_pos) )
        Epoch!val!2
    (ite (or (= a0 Model_231_ice) (= a0 Model_216_ice) (= a0 Model_145_pos) (= a0 Model_233_ice) )
        Epoch!val!1
;    if a0 IN [Model_217_ice, Model_219_ice, Model_226_ice, Model_230_ice, Model_214_ice, Model_218_ice, Model_220_ice, Model_213_ice, Model_227_ice, Model_228_ice, Model_232_ice, Model_229_ice, Model_222_ice, Model_215_ice, Model_224_ice, Model_221_ice, Model_225_ice, ] 
        Epoch!val!0
    ))
))

(declare-fun one_dummy (ModelId) Epoch)
(define-fun one ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (one_dummy a0 )
    (ite (= a0 Model_215_ice)
        Epoch!val!3
    (ite (or (= a0 Model_231_ice) (= a0 Model_233_ice) )
        Epoch!val!0
    (ite (or (= a0 Model_226_ice) (= a0 Model_218_ice) (= a0 Model_213_ice) (= a0 Model_227_ice) (= a0 Model_216_ice) (= a0 Model_145_pos) (= a0 Model_221_ice) (= a0 Model_225_ice) )
        Epoch!val!2
;    if a0 IN [Model_217_ice, Model_219_ice, Model_104_pos, Model_230_ice, Model_214_ice, Model_220_ice, Model_0_pos, Model_223_ice, Model_228_ice, Model_232_ice, Model_229_ice, Model_222_ice, Model_2_pos, Model_224_ice, ] 
        Epoch!val!1
    )))
))

(declare-fun first_dummy (ModelId) Node)
(define-fun first ((a0 ModelId)) Node
(ite (= a0 Model_DUMMYMODEL) (first_dummy a0 )
    (ite (or (= a0 Model_232_ice) (= a0 Model_233_ice) )
        Node!val!2
    (ite (or (= a0 Model_217_ice) (= a0 Model_226_ice) (= a0 Model_230_ice) (= a0 Model_220_ice) (= a0 Model_228_ice) (= a0 Model_145_pos) (= a0 Model_229_ice) (= a0 Model_2_pos) (= a0 Model_221_ice) )
        Node!val!1
;    if a0 IN [Model_231_ice, Model_219_ice, Model_104_pos, Model_214_ice, Model_218_ice, Model_0_pos, Model_223_ice, Model_213_ice, Model_227_ice, Model_216_ice, Model_222_ice, Model_215_ice, Model_224_ice, Model_225_ice, ] 
        Node!val!0
    ))
))

(synth-fun inv ((m ModelId) (s StateId) (n1 Node)) Bool

    ;; Declare the non-terminals that would be used in the grammar

    (
        (Start Bool)
        (Atom Bool)
        (Node_ Node)
		(Epoch_ Epoch)
    )

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool
            (
                (le m Epoch_ Epoch_)
				(held m s Node_)
				(transfer m s Epoch_ Node_)
				(locked m s Epoch_ Node_)

                (= n1 (first m))
				(= (zero m) (one m))
				(= (zero m) (ep m s Node_))
				(= (one m) (ep m s Node_))

                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Node_ Node (
			n1
			(first m)
		))
		(Epoch_ Epoch (
			(zero m)
			(one m)
			(ep m s Node_)
		))
    )
)

; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QForAll object at 0x7fba690975e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(ForAll(Bool_1, False))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_0_pos init Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba6901e610>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_2_pos, init, Node_1) ==
;                    (Node_1 == first(Model_2_pos)),
;                    Implies(Node_1 != first(Model_2_pos),
;                            ep(Model_2_pos, init, Node_1) ==
;                            zero(Model_2_pos)),
;                    ep(Model_2_pos, init, first(Model_2_pos)) ==
;                    one(Model_2_pos),
;                    transfer(Model_2_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_2_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_2_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_2_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_2_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_2_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_2_pos,
;                              zero(Model_2_pos),
;                              Epoch_1),
;                           one(Model_2_pos) !=
;                           zero(Model_2_pos))))),
;  Not(ForAll(Node_1, held(Model_2_pos, init, Node_1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_2_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_2_pos init Node!val!0) (inv Model_2_pos init Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68edbfa0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_104_pos, init, Node_1) ==
;                    (Node_1 == first(Model_104_pos)),
;                    Implies(Node_1 != first(Model_104_pos),
;                            ep(Model_104_pos, init, Node_1) ==
;                            zero(Model_104_pos)),
;                    ep(Model_104_pos,
;                       init,
;                       first(Model_104_pos)) ==
;                    one(Model_104_pos),
;                    transfer(Model_104_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_104_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_104_pos,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_104_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_104_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_104_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_104_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_104_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_104_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_104_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_104_pos,
;                              zero(Model_104_pos),
;                              Epoch_1),
;                           one(Model_104_pos) !=
;                           zero(Model_104_pos))))),
;  Not(ForAll(Epoch_1,
;             Or(Not(le(Model_104_pos,
;                       Epoch_1,
;                       one(Model_104_pos))),
;                Epoch_1 == one(Model_104_pos),
;                Epoch_1 == zero(Model_104_pos))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_104_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_104_pos init Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f40c760>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_145_pos, init, Node_1) ==
;                    (Node_1 == first(Model_145_pos)),
;                    Implies(Node_1 != first(Model_145_pos),
;                            ep(Model_145_pos, init, Node_1) ==
;                            zero(Model_145_pos)),
;                    ep(Model_145_pos,
;                       init,
;                       first(Model_145_pos)) ==
;                    one(Model_145_pos),
;                    transfer(Model_145_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_145_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_145_pos,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_145_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_145_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_145_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_145_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_145_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_145_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_145_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_145_pos,
;                              zero(Model_145_pos),
;                              Epoch_1),
;                           one(Model_145_pos) !=
;                           zero(Model_145_pos))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Node_1 == first(Model_145_pos),
;                       Epoch_1 == zero(Model_145_pos),
;                       le(Model_145_pos,
;                          one(Model_145_pos),
;                          Epoch_1)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; (define-fun Model_145_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     Epoch!val!1))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_145_pos init Node!val!0) (inv Model_145_pos init Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f38a310>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_213_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_213_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_213_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_213_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_213_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_213_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_213_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_213_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_213_ice,
;                              zero(Model_213_ice),
;                              Epoch_1),
;                           one(Model_213_ice) !=
;                           zero(Model_213_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_213_ice,
;                          S1,
;                          zero(Model_213_ice),
;                          first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_213_ice) ==
;                 ep(Model_213_ice, S1, first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S1,
;                        zero(Model_213_ice),
;                        first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_213_ice,
;                          S1,
;                          zero(Model_213_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S1,
;                        zero(Model_213_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_213_ice,
;                           S1,
;                           one(Model_213_ice),
;                           Node_1)),
;                transfer(Model_213_ice,
;                         S1,
;                         one(Model_213_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_213_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_213_ice))),
;                transfer(Model_213_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_213_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_213_ice,
;                       S1,
;                       first(Model_213_ice))),
;                le(Model_213_ice,
;                   one(Model_213_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S1,
;                        one(Model_213_ice),
;                        first(Model_213_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_213_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_213_ice))),
;                le(Model_213_ice,
;                   one(Model_213_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_213_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_213_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_213_ice, S1, Node_1),
;                     zero(Model_213_ice) ==
;                     ep(Model_213_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_213_ice) ==
;                           ep(Model_213_ice,
;                              S1,
;                              first(Model_213_ice))),
;                       zero(Model_213_ice) ==
;                       one(Model_213_ice))),
;                transfer(Model_213_ice,
;                         S1,
;                         ep(Model_213_ice,
;                            S1,
;                            first(Model_213_ice)),
;                         first(Model_213_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_213_ice) ==
;                ep(Model_213_ice, S1, first(Model_213_ice)),
;                locked(Model_213_ice,
;                       S1,
;                       ep(Model_213_ice,
;                          S1,
;                          first(Model_213_ice)),
;                       first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_213_ice,
;                            S1,
;                            one(Model_213_ice),
;                            Node_1),
;                     zero(Model_213_ice) ==
;                     ep(Model_213_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         held(Model_213_ice, S1, first(Model_213_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_213_ice,
;                          S2,
;                          zero(Model_213_ice),
;                          first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_213_ice) ==
;                 ep(Model_213_ice, S2, first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S2,
;                        zero(Model_213_ice),
;                        first(Model_213_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_213_ice,
;                          S2,
;                          zero(Model_213_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S2,
;                        zero(Model_213_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_213_ice,
;                           S2,
;                           one(Model_213_ice),
;                           Node_1)),
;                transfer(Model_213_ice,
;                         S2,
;                         one(Model_213_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_213_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_213_ice))),
;                transfer(Model_213_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_213_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_213_ice,
;                       S2,
;                       first(Model_213_ice))),
;                le(Model_213_ice,
;                   one(Model_213_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_213_ice,
;                        S2,
;                        one(Model_213_ice),
;                        first(Model_213_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_213_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_213_ice))),
;                le(Model_213_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_213_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!2
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!1)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_213_ice S1 Node!val!0)
              (inv Model_213_ice S1 Node!val!1)))
    (and (and (inv Model_213_ice S1 Node!val!0)
              (inv Model_213_ice S1 Node!val!1))
         (inv Model_213_ice S2 Node!val!0)
         (inv Model_213_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f28f640>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_214_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_214_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_214_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_214_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_214_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_214_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_214_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_214_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_214_ice,
;                              zero(Model_214_ice),
;                              Epoch_1),
;                           one(Model_214_ice) !=
;                           zero(Model_214_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_214_ice,
;                          S1,
;                          zero(Model_214_ice),
;                          first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_214_ice) ==
;                 ep(Model_214_ice, S1, first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S1,
;                        zero(Model_214_ice),
;                        first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_214_ice,
;                          S1,
;                          zero(Model_214_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S1,
;                        zero(Model_214_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_214_ice,
;                           S1,
;                           one(Model_214_ice),
;                           Node_1)),
;                transfer(Model_214_ice,
;                         S1,
;                         one(Model_214_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_214_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_214_ice))),
;                transfer(Model_214_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_214_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_214_ice,
;                       S1,
;                       first(Model_214_ice))),
;                le(Model_214_ice,
;                   one(Model_214_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S1,
;                        one(Model_214_ice),
;                        first(Model_214_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_214_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_214_ice))),
;                le(Model_214_ice,
;                   one(Model_214_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_214_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_214_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_214_ice, S1, Node_1),
;                     zero(Model_214_ice) ==
;                     ep(Model_214_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_214_ice) ==
;                           ep(Model_214_ice,
;                              S1,
;                              first(Model_214_ice))),
;                       zero(Model_214_ice) ==
;                       one(Model_214_ice))),
;                transfer(Model_214_ice,
;                         S1,
;                         ep(Model_214_ice,
;                            S1,
;                            first(Model_214_ice)),
;                         first(Model_214_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_214_ice) ==
;                ep(Model_214_ice, S1, first(Model_214_ice)),
;                locked(Model_214_ice,
;                       S1,
;                       ep(Model_214_ice,
;                          S1,
;                          first(Model_214_ice)),
;                       first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_214_ice,
;                            S1,
;                            one(Model_214_ice),
;                            Node_1),
;                     zero(Model_214_ice) ==
;                     ep(Model_214_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         one(Model_214_ice) ==
;         ep(Model_214_ice, S1, first(Model_214_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_214_ice,
;                          S2,
;                          zero(Model_214_ice),
;                          first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_214_ice) ==
;                 ep(Model_214_ice, S2, first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S2,
;                        zero(Model_214_ice),
;                        first(Model_214_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_214_ice,
;                          S2,
;                          zero(Model_214_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S2,
;                        zero(Model_214_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_214_ice,
;                           S2,
;                           one(Model_214_ice),
;                           Node_1)),
;                transfer(Model_214_ice,
;                         S2,
;                         one(Model_214_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_214_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_214_ice))),
;                transfer(Model_214_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_214_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_214_ice,
;                       S2,
;                       first(Model_214_ice))),
;                le(Model_214_ice,
;                   one(Model_214_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_214_ice,
;                        S2,
;                        one(Model_214_ice),
;                        first(Model_214_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_214_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_214_ice))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_214_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;        Epoch!val!2
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;             Epoch!val!1
;             Epoch!val!0)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_214_ice S1 Node!val!0)))
    (and (and (inv Model_214_ice S1 Node!val!0))
         (inv Model_214_ice S2 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3d4550>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_215_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_215_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_215_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_215_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_215_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_215_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_215_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_215_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_215_ice,
;                              zero(Model_215_ice),
;                              Epoch_1),
;                           one(Model_215_ice) !=
;                           zero(Model_215_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_215_ice,
;                          S1,
;                          zero(Model_215_ice),
;                          first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_215_ice) ==
;                 ep(Model_215_ice, S1, first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S1,
;                        zero(Model_215_ice),
;                        first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_215_ice,
;                          S1,
;                          zero(Model_215_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S1,
;                        zero(Model_215_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_215_ice,
;                           S1,
;                           one(Model_215_ice),
;                           Node_1)),
;                transfer(Model_215_ice,
;                         S1,
;                         one(Model_215_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_215_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_215_ice))),
;                transfer(Model_215_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_215_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_215_ice,
;                       S1,
;                       first(Model_215_ice))),
;                le(Model_215_ice,
;                   one(Model_215_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S1,
;                        one(Model_215_ice),
;                        first(Model_215_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_215_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_215_ice))),
;                le(Model_215_ice,
;                   one(Model_215_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_215_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_215_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_215_ice, S1, Node_1),
;                     zero(Model_215_ice) ==
;                     ep(Model_215_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_215_ice) ==
;                           ep(Model_215_ice,
;                              S1,
;                              first(Model_215_ice))),
;                       zero(Model_215_ice) ==
;                       one(Model_215_ice))),
;                transfer(Model_215_ice,
;                         S1,
;                         ep(Model_215_ice,
;                            S1,
;                            first(Model_215_ice)),
;                         first(Model_215_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_215_ice) ==
;                ep(Model_215_ice, S1, first(Model_215_ice)),
;                locked(Model_215_ice,
;                       S1,
;                       ep(Model_215_ice,
;                          S1,
;                          first(Model_215_ice)),
;                       first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_215_ice,
;                            S1,
;                            one(Model_215_ice),
;                            Node_1),
;                     zero(Model_215_ice) ==
;                     ep(Model_215_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(locked(Model_215_ice,
;                    S1,
;                    one(Model_215_ice),
;                    Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_215_ice,
;                          S2,
;                          zero(Model_215_ice),
;                          first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_215_ice) ==
;                 ep(Model_215_ice, S2, first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S2,
;                        zero(Model_215_ice),
;                        first(Model_215_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_215_ice,
;                          S2,
;                          zero(Model_215_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S2,
;                        zero(Model_215_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_215_ice,
;                           S2,
;                           one(Model_215_ice),
;                           Node_1)),
;                transfer(Model_215_ice,
;                         S2,
;                         one(Model_215_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_215_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_215_ice))),
;                transfer(Model_215_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_215_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_215_ice,
;                       S2,
;                       first(Model_215_ice))),
;                le(Model_215_ice,
;                   one(Model_215_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_215_ice,
;                        S2,
;                        one(Model_215_ice),
;                        first(Model_215_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_215_ice,
;                           S2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_215_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!3
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_215_ice S1 Node!val!0)
              (inv Model_215_ice S1 Node!val!1)))
    (and (and (inv Model_215_ice S1 Node!val!0)
              (inv Model_215_ice S1 Node!val!1))
         (inv Model_215_ice S2 Node!val!0)
         (inv Model_215_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68d5ac10>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_216_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_216_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_216_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_216_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_216_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_216_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_216_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_216_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_216_ice,
;                              zero(Model_216_ice),
;                              Epoch_1),
;                           one(Model_216_ice) !=
;                           zero(Model_216_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_216_ice,
;                          S1,
;                          zero(Model_216_ice),
;                          first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_216_ice) ==
;                 ep(Model_216_ice, S1, first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S1,
;                        zero(Model_216_ice),
;                        first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_216_ice,
;                          S1,
;                          zero(Model_216_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S1,
;                        zero(Model_216_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_216_ice,
;                           S1,
;                           one(Model_216_ice),
;                           Node_1)),
;                transfer(Model_216_ice,
;                         S1,
;                         one(Model_216_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_216_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_216_ice))),
;                transfer(Model_216_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_216_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_216_ice,
;                       S1,
;                       first(Model_216_ice))),
;                le(Model_216_ice,
;                   one(Model_216_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S1,
;                        one(Model_216_ice),
;                        first(Model_216_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_216_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_216_ice))),
;                le(Model_216_ice,
;                   one(Model_216_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_216_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_216_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_216_ice, S1, Node_1),
;                     zero(Model_216_ice) ==
;                     ep(Model_216_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_216_ice) ==
;                           ep(Model_216_ice,
;                              S1,
;                              first(Model_216_ice))),
;                       zero(Model_216_ice) ==
;                       one(Model_216_ice))),
;                transfer(Model_216_ice,
;                         S1,
;                         ep(Model_216_ice,
;                            S1,
;                            first(Model_216_ice)),
;                         first(Model_216_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_216_ice) ==
;                ep(Model_216_ice, S1, first(Model_216_ice)),
;                locked(Model_216_ice,
;                       S1,
;                       ep(Model_216_ice,
;                          S1,
;                          first(Model_216_ice)),
;                       first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_216_ice,
;                            S1,
;                            one(Model_216_ice),
;                            Node_1),
;                     zero(Model_216_ice) ==
;                     ep(Model_216_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(zero(Model_216_ice) ==
;            ep(Model_216_ice, S1, Node_1),
;            Node_1 == first(Model_216_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_216_ice,
;                          S2,
;                          zero(Model_216_ice),
;                          first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_216_ice) ==
;                 ep(Model_216_ice, S2, first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S2,
;                        zero(Model_216_ice),
;                        first(Model_216_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_216_ice,
;                          S2,
;                          zero(Model_216_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S2,
;                        zero(Model_216_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_216_ice,
;                           S2,
;                           one(Model_216_ice),
;                           Node_1)),
;                transfer(Model_216_ice,
;                         S2,
;                         one(Model_216_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_216_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_216_ice))),
;                transfer(Model_216_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_216_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_216_ice,
;                       S2,
;                       first(Model_216_ice))),
;                le(Model_216_ice,
;                   one(Model_216_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_216_ice,
;                        S2,
;                        one(Model_216_ice),
;                        first(Model_216_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_216_ice,
;                           S2,
;                           Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_216_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!0
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_216_ice S1 Node!val!0)
              (inv Model_216_ice S1 Node!val!1)))
    (and (and (inv Model_216_ice S1 Node!val!0)
              (inv Model_216_ice S1 Node!val!1))
         (inv Model_216_ice S2 Node!val!0)
         (inv Model_216_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f38aa60>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_217_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_217_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_217_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_217_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_217_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_217_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_217_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_217_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_217_ice,
;                              zero(Model_217_ice),
;                              Epoch_1),
;                           one(Model_217_ice) !=
;                           zero(Model_217_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_217_ice,
;                          S1,
;                          zero(Model_217_ice),
;                          first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_217_ice) ==
;                 ep(Model_217_ice, S1, first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S1,
;                        zero(Model_217_ice),
;                        first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_217_ice,
;                          S1,
;                          zero(Model_217_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S1,
;                        zero(Model_217_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_217_ice,
;                           S1,
;                           one(Model_217_ice),
;                           Node_1)),
;                transfer(Model_217_ice,
;                         S1,
;                         one(Model_217_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_217_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_217_ice))),
;                transfer(Model_217_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_217_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_217_ice,
;                       S1,
;                       first(Model_217_ice))),
;                le(Model_217_ice,
;                   one(Model_217_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S1,
;                        one(Model_217_ice),
;                        first(Model_217_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_217_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_217_ice))),
;                le(Model_217_ice,
;                   one(Model_217_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_217_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_217_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_217_ice, S1, Node_1),
;                     zero(Model_217_ice) ==
;                     ep(Model_217_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_217_ice) ==
;                           ep(Model_217_ice,
;                              S1,
;                              first(Model_217_ice))),
;                       zero(Model_217_ice) ==
;                       one(Model_217_ice))),
;                transfer(Model_217_ice,
;                         S1,
;                         ep(Model_217_ice,
;                            S1,
;                            first(Model_217_ice)),
;                         first(Model_217_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_217_ice) ==
;                ep(Model_217_ice, S1, first(Model_217_ice)),
;                locked(Model_217_ice,
;                       S1,
;                       ep(Model_217_ice,
;                          S1,
;                          first(Model_217_ice)),
;                       first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_217_ice,
;                            S1,
;                            one(Model_217_ice),
;                            Node_1),
;                     zero(Model_217_ice) ==
;                     ep(Model_217_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(transfer(Model_217_ice,
;                      S1,
;                      one(Model_217_ice),
;                      first(Model_217_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_217_ice,
;                          S2,
;                          zero(Model_217_ice),
;                          first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_217_ice) ==
;                 ep(Model_217_ice, S2, first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S2,
;                        zero(Model_217_ice),
;                        first(Model_217_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_217_ice,
;                          S2,
;                          zero(Model_217_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S2,
;                        zero(Model_217_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_217_ice,
;                           S2,
;                           one(Model_217_ice),
;                           Node_1)),
;                transfer(Model_217_ice,
;                         S2,
;                         one(Model_217_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_217_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_217_ice))),
;                transfer(Model_217_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_217_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_217_ice,
;                       S2,
;                       first(Model_217_ice))),
;                le(Model_217_ice,
;                   one(Model_217_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_217_ice,
;                        S2,
;                        one(Model_217_ice),
;                        first(Model_217_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_217_ice,
;                           S2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_217_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!2
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!1)
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_217_ice S1 Node!val!0)
              (inv Model_217_ice S1 Node!val!1)))
    (and (and (inv Model_217_ice S1 Node!val!0)
              (inv Model_217_ice S1 Node!val!1))
         (inv Model_217_ice S2 Node!val!0)
         (inv Model_217_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3d9610>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_218_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_218_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_218_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_218_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_218_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_218_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_218_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_218_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_218_ice,
;                              zero(Model_218_ice),
;                              Epoch_1),
;                           one(Model_218_ice) !=
;                           zero(Model_218_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_218_ice,
;                          S1,
;                          zero(Model_218_ice),
;                          first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_218_ice) ==
;                 ep(Model_218_ice, S1, first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S1,
;                        zero(Model_218_ice),
;                        first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_218_ice,
;                          S1,
;                          zero(Model_218_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S1,
;                        zero(Model_218_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_218_ice,
;                           S1,
;                           one(Model_218_ice),
;                           Node_1)),
;                transfer(Model_218_ice,
;                         S1,
;                         one(Model_218_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_218_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_218_ice))),
;                transfer(Model_218_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_218_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_218_ice,
;                       S1,
;                       first(Model_218_ice))),
;                le(Model_218_ice,
;                   one(Model_218_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S1,
;                        one(Model_218_ice),
;                        first(Model_218_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_218_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_218_ice))),
;                le(Model_218_ice,
;                   one(Model_218_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_218_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_218_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_218_ice, S1, Node_1),
;                     zero(Model_218_ice) ==
;                     ep(Model_218_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_218_ice) ==
;                           ep(Model_218_ice,
;                              S1,
;                              first(Model_218_ice))),
;                       zero(Model_218_ice) ==
;                       one(Model_218_ice))),
;                transfer(Model_218_ice,
;                         S1,
;                         ep(Model_218_ice,
;                            S1,
;                            first(Model_218_ice)),
;                         first(Model_218_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_218_ice) ==
;                ep(Model_218_ice, S1, first(Model_218_ice)),
;                locked(Model_218_ice,
;                       S1,
;                       ep(Model_218_ice,
;                          S1,
;                          first(Model_218_ice)),
;                       first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_218_ice,
;                            S1,
;                            one(Model_218_ice),
;                            Node_1),
;                     zero(Model_218_ice) ==
;                     ep(Model_218_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(locked(Model_218_ice,
;                       S1,
;                       one(Model_218_ice),
;                       Node_1)),
;            one(Model_218_ice) ==
;            ep(Model_218_ice, S1, Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_218_ice,
;                          S2,
;                          zero(Model_218_ice),
;                          first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_218_ice) ==
;                 ep(Model_218_ice, S2, first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S2,
;                        zero(Model_218_ice),
;                        first(Model_218_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_218_ice,
;                          S2,
;                          zero(Model_218_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S2,
;                        zero(Model_218_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_218_ice,
;                           S2,
;                           one(Model_218_ice),
;                           Node_1)),
;                transfer(Model_218_ice,
;                         S2,
;                         one(Model_218_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_218_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_218_ice))),
;                transfer(Model_218_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_218_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_218_ice,
;                       S2,
;                       first(Model_218_ice))),
;                le(Model_218_ice,
;                   one(Model_218_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_218_ice,
;                        S2,
;                        one(Model_218_ice),
;                        first(Model_218_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_218_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_218_ice S1 Node!val!0)
              (inv Model_218_ice S1 Node!val!1)))
    (and (and (inv Model_218_ice S1 Node!val!0)
              (inv Model_218_ice S1 Node!val!1))
         (inv Model_218_ice S2 Node!val!0)
         (inv Model_218_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f29cdf0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_219_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_219_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_219_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_219_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_219_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_219_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_219_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_219_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_219_ice,
;                              zero(Model_219_ice),
;                              Epoch_1),
;                           one(Model_219_ice) !=
;                           zero(Model_219_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_219_ice,
;                          S1,
;                          zero(Model_219_ice),
;                          first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_219_ice) ==
;                 ep(Model_219_ice, S1, first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S1,
;                        zero(Model_219_ice),
;                        first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_219_ice,
;                          S1,
;                          zero(Model_219_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S1,
;                        zero(Model_219_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_219_ice,
;                           S1,
;                           one(Model_219_ice),
;                           Node_1)),
;                transfer(Model_219_ice,
;                         S1,
;                         one(Model_219_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_219_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_219_ice))),
;                transfer(Model_219_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_219_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_219_ice,
;                       S1,
;                       first(Model_219_ice))),
;                le(Model_219_ice,
;                   one(Model_219_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S1,
;                        one(Model_219_ice),
;                        first(Model_219_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_219_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_219_ice))),
;                le(Model_219_ice,
;                   one(Model_219_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_219_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_219_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_219_ice, S1, Node_1),
;                     zero(Model_219_ice) ==
;                     ep(Model_219_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_219_ice) ==
;                           ep(Model_219_ice,
;                              S1,
;                              first(Model_219_ice))),
;                       zero(Model_219_ice) ==
;                       one(Model_219_ice))),
;                transfer(Model_219_ice,
;                         S1,
;                         ep(Model_219_ice,
;                            S1,
;                            first(Model_219_ice)),
;                         first(Model_219_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_219_ice) ==
;                ep(Model_219_ice, S1, first(Model_219_ice)),
;                locked(Model_219_ice,
;                       S1,
;                       ep(Model_219_ice,
;                          S1,
;                          first(Model_219_ice)),
;                       first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_219_ice,
;                            S1,
;                            one(Model_219_ice),
;                            Node_1),
;                     zero(Model_219_ice) ==
;                     ep(Model_219_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_219_ice,
;                         S1,
;                         one(Model_219_ice),
;                         Node_1)),
;            Node_1 == first(Model_219_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_219_ice,
;                          S2,
;                          zero(Model_219_ice),
;                          first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_219_ice) ==
;                 ep(Model_219_ice, S2, first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S2,
;                        zero(Model_219_ice),
;                        first(Model_219_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_219_ice,
;                          S2,
;                          zero(Model_219_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S2,
;                        zero(Model_219_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_219_ice,
;                           S2,
;                           one(Model_219_ice),
;                           Node_1)),
;                transfer(Model_219_ice,
;                         S2,
;                         one(Model_219_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_219_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_219_ice))),
;                transfer(Model_219_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_219_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_219_ice,
;                       S2,
;                       first(Model_219_ice))),
;                le(Model_219_ice,
;                   one(Model_219_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_219_ice,
;                        S2,
;                        one(Model_219_ice),
;                        first(Model_219_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_219_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_219_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
;        Epoch!val!2
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!1)
;        (not (= x!3 Node!val!0))
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_219_ice S1 Node!val!0)
                (inv Model_219_ice S1 Node!val!1)
                (inv Model_219_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_219_ice S2 Node!val!0)
           (inv Model_219_ice S2 Node!val!1)
           (inv Model_219_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68d1bf70>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_220_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_220_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_220_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_220_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_220_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_220_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_220_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_220_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_220_ice,
;                              zero(Model_220_ice),
;                              Epoch_1),
;                           one(Model_220_ice) !=
;                           zero(Model_220_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_220_ice,
;                          S1,
;                          zero(Model_220_ice),
;                          first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_220_ice) ==
;                 ep(Model_220_ice, S1, first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S1,
;                        zero(Model_220_ice),
;                        first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_220_ice,
;                          S1,
;                          zero(Model_220_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S1,
;                        zero(Model_220_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_220_ice,
;                           S1,
;                           one(Model_220_ice),
;                           Node_1)),
;                transfer(Model_220_ice,
;                         S1,
;                         one(Model_220_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_220_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_220_ice))),
;                transfer(Model_220_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_220_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_220_ice,
;                       S1,
;                       first(Model_220_ice))),
;                le(Model_220_ice,
;                   one(Model_220_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S1,
;                        one(Model_220_ice),
;                        first(Model_220_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_220_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_220_ice))),
;                le(Model_220_ice,
;                   one(Model_220_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_220_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_220_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_220_ice, S1, Node_1),
;                     zero(Model_220_ice) ==
;                     ep(Model_220_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_220_ice) ==
;                           ep(Model_220_ice,
;                              S1,
;                              first(Model_220_ice))),
;                       zero(Model_220_ice) ==
;                       one(Model_220_ice))),
;                transfer(Model_220_ice,
;                         S1,
;                         ep(Model_220_ice,
;                            S1,
;                            first(Model_220_ice)),
;                         first(Model_220_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_220_ice) ==
;                ep(Model_220_ice, S1, first(Model_220_ice)),
;                locked(Model_220_ice,
;                       S1,
;                       ep(Model_220_ice,
;                          S1,
;                          first(Model_220_ice)),
;                       first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_220_ice,
;                            S1,
;                            one(Model_220_ice),
;                            Node_1),
;                     zero(Model_220_ice) ==
;                     ep(Model_220_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Node_1 == first(Model_220_ice),
;            one(Model_220_ice) ==
;            ep(Model_220_ice, S1, first(Model_220_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_220_ice,
;                          S2,
;                          zero(Model_220_ice),
;                          first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_220_ice) ==
;                 ep(Model_220_ice, S2, first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S2,
;                        zero(Model_220_ice),
;                        first(Model_220_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_220_ice,
;                          S2,
;                          zero(Model_220_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S2,
;                        zero(Model_220_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_220_ice,
;                           S2,
;                           one(Model_220_ice),
;                           Node_1)),
;                transfer(Model_220_ice,
;                         S2,
;                         one(Model_220_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_220_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_220_ice))),
;                transfer(Model_220_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_220_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_220_ice,
;                       S2,
;                       first(Model_220_ice))),
;                le(Model_220_ice,
;                   one(Model_220_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_220_ice,
;                        S2,
;                        one(Model_220_ice),
;                        first(Model_220_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_220_ice,
;                           S2,
;                           Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_220_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (= x!3 Node!val!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!2
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!0)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_220_ice S1 Node!val!0)
              (inv Model_220_ice S1 Node!val!1)))
    (and (and (inv Model_220_ice S1 Node!val!0)
              (inv Model_220_ice S1 Node!val!1))
         (inv Model_220_ice S2 Node!val!0)
         (inv Model_220_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68d30a60>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_221_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_221_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_221_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_221_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_221_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_221_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_221_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_221_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_221_ice,
;                              zero(Model_221_ice),
;                              Epoch_1),
;                           one(Model_221_ice) !=
;                           zero(Model_221_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_221_ice,
;                          S1,
;                          zero(Model_221_ice),
;                          first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_221_ice) ==
;                 ep(Model_221_ice, S1, first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S1,
;                        zero(Model_221_ice),
;                        first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_221_ice,
;                          S1,
;                          zero(Model_221_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S1,
;                        zero(Model_221_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_221_ice,
;                           S1,
;                           one(Model_221_ice),
;                           Node_1)),
;                transfer(Model_221_ice,
;                         S1,
;                         one(Model_221_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_221_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_221_ice))),
;                transfer(Model_221_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_221_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_221_ice,
;                       S1,
;                       first(Model_221_ice))),
;                le(Model_221_ice,
;                   one(Model_221_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S1,
;                        one(Model_221_ice),
;                        first(Model_221_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_221_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_221_ice))),
;                le(Model_221_ice,
;                   one(Model_221_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_221_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_221_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_221_ice, S1, Node_1),
;                     zero(Model_221_ice) ==
;                     ep(Model_221_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_221_ice) ==
;                           ep(Model_221_ice,
;                              S1,
;                              first(Model_221_ice))),
;                       zero(Model_221_ice) ==
;                       one(Model_221_ice))),
;                transfer(Model_221_ice,
;                         S1,
;                         ep(Model_221_ice,
;                            S1,
;                            first(Model_221_ice)),
;                         first(Model_221_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_221_ice) ==
;                ep(Model_221_ice, S1, first(Model_221_ice)),
;                locked(Model_221_ice,
;                       S1,
;                       ep(Model_221_ice,
;                          S1,
;                          first(Model_221_ice)),
;                       first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_221_ice,
;                            S1,
;                            one(Model_221_ice),
;                            Node_1),
;                     zero(Model_221_ice) ==
;                     ep(Model_221_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(zero(Model_221_ice) ==
;                ep(Model_221_ice, S1, Node_1)),
;            held(Model_221_ice, S1, first(Model_221_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_221_ice,
;                          S2,
;                          zero(Model_221_ice),
;                          first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_221_ice) ==
;                 ep(Model_221_ice, S2, first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S2,
;                        zero(Model_221_ice),
;                        first(Model_221_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_221_ice,
;                          S2,
;                          zero(Model_221_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S2,
;                        zero(Model_221_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_221_ice,
;                           S2,
;                           one(Model_221_ice),
;                           Node_1)),
;                transfer(Model_221_ice,
;                         S2,
;                         one(Model_221_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_221_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_221_ice))),
;                transfer(Model_221_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_221_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_221_ice,
;                       S2,
;                       first(Model_221_ice))),
;                le(Model_221_ice,
;                   one(Model_221_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_221_ice,
;                        S2,
;                        one(Model_221_ice),
;                        first(Model_221_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_221_ice,
;                           S2,
;                           Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_221_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2))))))
;     (ite a!1 Epoch!val!0 Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!1)
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_221_ice S1 Node!val!0)
                (inv Model_221_ice S1 Node!val!1)
                (inv Model_221_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_221_ice S2 Node!val!0)
           (inv Model_221_ice S2 Node!val!1)
           (inv Model_221_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68ce56d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_222_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_222_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_222_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_222_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_222_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_222_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_222_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_222_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_222_ice,
;                              zero(Model_222_ice),
;                              Epoch_1),
;                           one(Model_222_ice) !=
;                           zero(Model_222_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_222_ice,
;                          S1,
;                          zero(Model_222_ice),
;                          first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_222_ice) ==
;                 ep(Model_222_ice, S1, first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S1,
;                        zero(Model_222_ice),
;                        first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_222_ice,
;                          S1,
;                          zero(Model_222_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S1,
;                        zero(Model_222_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_222_ice,
;                           S1,
;                           one(Model_222_ice),
;                           Node_1)),
;                transfer(Model_222_ice,
;                         S1,
;                         one(Model_222_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_222_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_222_ice))),
;                transfer(Model_222_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_222_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_222_ice,
;                       S1,
;                       first(Model_222_ice))),
;                le(Model_222_ice,
;                   one(Model_222_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S1,
;                        one(Model_222_ice),
;                        first(Model_222_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_222_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_222_ice))),
;                le(Model_222_ice,
;                   one(Model_222_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_222_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_222_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_222_ice, S1, Node_1),
;                     zero(Model_222_ice) ==
;                     ep(Model_222_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_222_ice) ==
;                           ep(Model_222_ice,
;                              S1,
;                              first(Model_222_ice))),
;                       zero(Model_222_ice) ==
;                       one(Model_222_ice))),
;                transfer(Model_222_ice,
;                         S1,
;                         ep(Model_222_ice,
;                            S1,
;                            first(Model_222_ice)),
;                         first(Model_222_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_222_ice) ==
;                ep(Model_222_ice, S1, first(Model_222_ice)),
;                locked(Model_222_ice,
;                       S1,
;                       ep(Model_222_ice,
;                          S1,
;                          first(Model_222_ice)),
;                       first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_222_ice,
;                            S1,
;                            one(Model_222_ice),
;                            Node_1),
;                     zero(Model_222_ice) ==
;                     ep(Model_222_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(locked(Model_222_ice,
;                       S1,
;                       one(Model_222_ice),
;                       Node_1)),
;            held(Model_222_ice, S1, Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_222_ice,
;                          S2,
;                          zero(Model_222_ice),
;                          first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_222_ice) ==
;                 ep(Model_222_ice, S2, first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S2,
;                        zero(Model_222_ice),
;                        first(Model_222_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_222_ice,
;                          S2,
;                          zero(Model_222_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S2,
;                        zero(Model_222_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_222_ice,
;                           S2,
;                           one(Model_222_ice),
;                           Node_1)),
;                transfer(Model_222_ice,
;                         S2,
;                         one(Model_222_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_222_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_222_ice))),
;                transfer(Model_222_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_222_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_222_ice,
;                       S2,
;                       first(Model_222_ice))),
;                le(Model_222_ice,
;                   one(Model_222_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_222_ice,
;                        S2,
;                        one(Model_222_ice),
;                        first(Model_222_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_222_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_222_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
;        Epoch!val!2
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_222_ice S1 Node!val!0)
                (inv Model_222_ice S1 Node!val!1)
                (inv Model_222_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_222_ice S2 Node!val!0)
           (inv Model_222_ice S2 Node!val!1)
           (inv Model_222_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68d0f400>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_223_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_223_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_223_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_223_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_223_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_223_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_223_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_223_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_223_ice,
;                              zero(Model_223_ice),
;                              Epoch_1),
;                           one(Model_223_ice) !=
;                           zero(Model_223_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_223_ice,
;                          S1,
;                          zero(Model_223_ice),
;                          first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_223_ice) ==
;                 ep(Model_223_ice, S1, first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S1,
;                        zero(Model_223_ice),
;                        first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_223_ice,
;                          S1,
;                          zero(Model_223_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S1,
;                        zero(Model_223_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_223_ice,
;                           S1,
;                           one(Model_223_ice),
;                           Node_1)),
;                transfer(Model_223_ice,
;                         S1,
;                         one(Model_223_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_223_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_223_ice))),
;                transfer(Model_223_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_223_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_223_ice,
;                       S1,
;                       first(Model_223_ice))),
;                le(Model_223_ice,
;                   one(Model_223_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S1,
;                        one(Model_223_ice),
;                        first(Model_223_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_223_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_223_ice))),
;                le(Model_223_ice,
;                   one(Model_223_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_223_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_223_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_223_ice, S1, Node_1),
;                     zero(Model_223_ice) ==
;                     ep(Model_223_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_223_ice) ==
;                           ep(Model_223_ice,
;                              S1,
;                              first(Model_223_ice))),
;                       zero(Model_223_ice) ==
;                       one(Model_223_ice))),
;                transfer(Model_223_ice,
;                         S1,
;                         ep(Model_223_ice,
;                            S1,
;                            first(Model_223_ice)),
;                         first(Model_223_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_223_ice) ==
;                ep(Model_223_ice, S1, first(Model_223_ice)),
;                locked(Model_223_ice,
;                       S1,
;                       ep(Model_223_ice,
;                          S1,
;                          first(Model_223_ice)),
;                       first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_223_ice,
;                            S1,
;                            one(Model_223_ice),
;                            Node_1),
;                     zero(Model_223_ice) ==
;                     ep(Model_223_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(zero(Model_223_ice) ==
;            ep(Model_223_ice, S1, Node_1),
;            held(Model_223_ice, S1, Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_223_ice,
;                          S2,
;                          zero(Model_223_ice),
;                          first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_223_ice) ==
;                 ep(Model_223_ice, S2, first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S2,
;                        zero(Model_223_ice),
;                        first(Model_223_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_223_ice,
;                          S2,
;                          zero(Model_223_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S2,
;                        zero(Model_223_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_223_ice,
;                           S2,
;                           one(Model_223_ice),
;                           Node_1)),
;                transfer(Model_223_ice,
;                         S2,
;                         one(Model_223_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_223_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_223_ice))),
;                transfer(Model_223_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_223_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_223_ice,
;                       S2,
;                       first(Model_223_ice))),
;                le(Model_223_ice,
;                   one(Model_223_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_223_ice,
;                        S2,
;                        one(Model_223_ice),
;                        first(Model_223_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_223_ice,
;                           S2,
;                           Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_223_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!1))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!1)))
;          Epoch!val!2
;          (ite a!1 Epoch!val!1 Epoch!val!0))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!0)
;        (= x!3 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_223_ice S1 Node!val!0)
              (inv Model_223_ice S1 Node!val!1)))
    (and (and (inv Model_223_ice S1 Node!val!0)
              (inv Model_223_ice S1 Node!val!1))
         (inv Model_223_ice S2 Node!val!0)
         (inv Model_223_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3f5370>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_224_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_224_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_224_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_224_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_224_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_224_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_224_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_224_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_224_ice,
;                              zero(Model_224_ice),
;                              Epoch_1),
;                           one(Model_224_ice) !=
;                           zero(Model_224_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_224_ice,
;                          S1,
;                          zero(Model_224_ice),
;                          first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_224_ice) ==
;                 ep(Model_224_ice, S1, first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S1,
;                        zero(Model_224_ice),
;                        first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_224_ice,
;                          S1,
;                          zero(Model_224_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S1,
;                        zero(Model_224_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_224_ice,
;                           S1,
;                           one(Model_224_ice),
;                           Node_1)),
;                transfer(Model_224_ice,
;                         S1,
;                         one(Model_224_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_224_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_224_ice))),
;                transfer(Model_224_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_224_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_224_ice,
;                       S1,
;                       first(Model_224_ice))),
;                le(Model_224_ice,
;                   one(Model_224_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S1,
;                        one(Model_224_ice),
;                        first(Model_224_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_224_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_224_ice))),
;                le(Model_224_ice,
;                   one(Model_224_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_224_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_224_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_224_ice, S1, Node_1),
;                     zero(Model_224_ice) ==
;                     ep(Model_224_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_224_ice) ==
;                           ep(Model_224_ice,
;                              S1,
;                              first(Model_224_ice))),
;                       zero(Model_224_ice) ==
;                       one(Model_224_ice))),
;                transfer(Model_224_ice,
;                         S1,
;                         ep(Model_224_ice,
;                            S1,
;                            first(Model_224_ice)),
;                         first(Model_224_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_224_ice) ==
;                ep(Model_224_ice, S1, first(Model_224_ice)),
;                locked(Model_224_ice,
;                       S1,
;                       ep(Model_224_ice,
;                          S1,
;                          first(Model_224_ice)),
;                       first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_224_ice,
;                            S1,
;                            one(Model_224_ice),
;                            Node_1),
;                     zero(Model_224_ice) ==
;                     ep(Model_224_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(one(Model_224_ice) ==
;            ep(Model_224_ice, S1, first(Model_224_ice)),
;            held(Model_224_ice, S1, first(Model_224_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_224_ice,
;                          S2,
;                          zero(Model_224_ice),
;                          first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_224_ice) ==
;                 ep(Model_224_ice, S2, first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S2,
;                        zero(Model_224_ice),
;                        first(Model_224_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_224_ice,
;                          S2,
;                          zero(Model_224_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S2,
;                        zero(Model_224_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_224_ice,
;                           S2,
;                           one(Model_224_ice),
;                           Node_1)),
;                transfer(Model_224_ice,
;                         S2,
;                         one(Model_224_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_224_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_224_ice))),
;                transfer(Model_224_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_224_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_224_ice,
;                       S2,
;                       first(Model_224_ice))),
;                le(Model_224_ice,
;                   one(Model_224_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_224_ice,
;                        S2,
;                        one(Model_224_ice),
;                        first(Model_224_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_224_ice,
;                           S2,
;                           Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_224_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
;        Epoch!val!3
;        Epoch!val!1))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_224_ice S1 Node!val!0)))
    (and (and (inv Model_224_ice S1 Node!val!0))
         (inv Model_224_ice S2 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3d9490>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_225_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_225_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_225_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_225_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_225_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_225_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_225_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_225_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_225_ice,
;                              zero(Model_225_ice),
;                              Epoch_1),
;                           one(Model_225_ice) !=
;                           zero(Model_225_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_225_ice,
;                          S1,
;                          zero(Model_225_ice),
;                          first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_225_ice) ==
;                 ep(Model_225_ice, S1, first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S1,
;                        zero(Model_225_ice),
;                        first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_225_ice,
;                          S1,
;                          zero(Model_225_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S1,
;                        zero(Model_225_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_225_ice,
;                           S1,
;                           one(Model_225_ice),
;                           Node_1)),
;                transfer(Model_225_ice,
;                         S1,
;                         one(Model_225_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_225_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_225_ice))),
;                transfer(Model_225_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_225_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_225_ice,
;                       S1,
;                       first(Model_225_ice))),
;                le(Model_225_ice,
;                   one(Model_225_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S1,
;                        one(Model_225_ice),
;                        first(Model_225_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_225_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_225_ice))),
;                le(Model_225_ice,
;                   one(Model_225_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_225_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_225_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_225_ice, S1, Node_1),
;                     zero(Model_225_ice) ==
;                     ep(Model_225_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_225_ice) ==
;                           ep(Model_225_ice,
;                              S1,
;                              first(Model_225_ice))),
;                       zero(Model_225_ice) ==
;                       one(Model_225_ice))),
;                transfer(Model_225_ice,
;                         S1,
;                         ep(Model_225_ice,
;                            S1,
;                            first(Model_225_ice)),
;                         first(Model_225_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_225_ice) ==
;                ep(Model_225_ice, S1, first(Model_225_ice)),
;                locked(Model_225_ice,
;                       S1,
;                       ep(Model_225_ice,
;                          S1,
;                          first(Model_225_ice)),
;                       first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_225_ice,
;                            S1,
;                            one(Model_225_ice),
;                            Node_1),
;                     zero(Model_225_ice) ==
;                     ep(Model_225_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_225_ice,
;                         S1,
;                         one(Model_225_ice),
;                         Node_1)),
;            one(Model_225_ice) ==
;            ep(Model_225_ice, S1, first(Model_225_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_225_ice,
;                          S2,
;                          zero(Model_225_ice),
;                          first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_225_ice) ==
;                 ep(Model_225_ice, S2, first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S2,
;                        zero(Model_225_ice),
;                        first(Model_225_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_225_ice,
;                          S2,
;                          zero(Model_225_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S2,
;                        zero(Model_225_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_225_ice,
;                           S2,
;                           one(Model_225_ice),
;                           Node_1)),
;                transfer(Model_225_ice,
;                         S2,
;                         one(Model_225_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_225_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_225_ice))),
;                transfer(Model_225_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_225_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_225_ice,
;                       S2,
;                       first(Model_225_ice))),
;                le(Model_225_ice,
;                   one(Model_225_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_225_ice,
;                        S2,
;                        one(Model_225_ice),
;                        first(Model_225_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun Model_225_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!1))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!1)))
;          Epoch!val!3
;          (ite a!1 Epoch!val!1 Epoch!val!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_225_ice S1 Node!val!0)
                (inv Model_225_ice S1 Node!val!1)
                (inv Model_225_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_225_ice S2 Node!val!0)
           (inv Model_225_ice S2 Node!val!1)
           (inv Model_225_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3f0790>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_226_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_226_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_226_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_226_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_226_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_226_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_226_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_226_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_226_ice,
;                              zero(Model_226_ice),
;                              Epoch_1),
;                           one(Model_226_ice) !=
;                           zero(Model_226_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_226_ice,
;                          S1,
;                          zero(Model_226_ice),
;                          first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_226_ice) ==
;                 ep(Model_226_ice, S1, first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S1,
;                        zero(Model_226_ice),
;                        first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_226_ice,
;                          S1,
;                          zero(Model_226_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S1,
;                        zero(Model_226_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_226_ice,
;                           S1,
;                           one(Model_226_ice),
;                           Node_1)),
;                transfer(Model_226_ice,
;                         S1,
;                         one(Model_226_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_226_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_226_ice))),
;                transfer(Model_226_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_226_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_226_ice,
;                       S1,
;                       first(Model_226_ice))),
;                le(Model_226_ice,
;                   one(Model_226_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S1,
;                        one(Model_226_ice),
;                        first(Model_226_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_226_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_226_ice))),
;                le(Model_226_ice,
;                   one(Model_226_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_226_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_226_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_226_ice, S1, Node_1),
;                     zero(Model_226_ice) ==
;                     ep(Model_226_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_226_ice) ==
;                           ep(Model_226_ice,
;                              S1,
;                              first(Model_226_ice))),
;                       zero(Model_226_ice) ==
;                       one(Model_226_ice))),
;                transfer(Model_226_ice,
;                         S1,
;                         ep(Model_226_ice,
;                            S1,
;                            first(Model_226_ice)),
;                         first(Model_226_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_226_ice) ==
;                ep(Model_226_ice, S1, first(Model_226_ice)),
;                locked(Model_226_ice,
;                       S1,
;                       ep(Model_226_ice,
;                          S1,
;                          first(Model_226_ice)),
;                       first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_226_ice,
;                            S1,
;                            one(Model_226_ice),
;                            Node_1),
;                     zero(Model_226_ice) ==
;                     ep(Model_226_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_226_ice,
;                         S1,
;                         one(Model_226_ice),
;                         first(Model_226_ice))),
;            one(Model_226_ice) ==
;            ep(Model_226_ice, S1, first(Model_226_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_226_ice,
;                          S2,
;                          zero(Model_226_ice),
;                          first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_226_ice) ==
;                 ep(Model_226_ice, S2, first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S2,
;                        zero(Model_226_ice),
;                        first(Model_226_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_226_ice,
;                          S2,
;                          zero(Model_226_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S2,
;                        zero(Model_226_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_226_ice,
;                           S2,
;                           one(Model_226_ice),
;                           Node_1)),
;                transfer(Model_226_ice,
;                         S2,
;                         one(Model_226_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_226_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_226_ice))),
;                transfer(Model_226_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_226_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_226_ice,
;                       S2,
;                       first(Model_226_ice))),
;                le(Model_226_ice,
;                   one(Model_226_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_226_ice,
;                        S2,
;                        one(Model_226_ice),
;                        first(Model_226_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_226_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!1
;                   Epoch!val!2)))
;     (ite a!1 Epoch!val!3 a!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_226_ice S1 Node!val!0)
              (inv Model_226_ice S1 Node!val!1)))
    (and (and (inv Model_226_ice S1 Node!val!0)
              (inv Model_226_ice S1 Node!val!1))
         (inv Model_226_ice S2 Node!val!0)
         (inv Model_226_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3d9280>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_227_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_227_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_227_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_227_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_227_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_227_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_227_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_227_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_227_ice,
;                              zero(Model_227_ice),
;                              Epoch_1),
;                           one(Model_227_ice) !=
;                           zero(Model_227_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_227_ice,
;                          S1,
;                          zero(Model_227_ice),
;                          first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_227_ice) ==
;                 ep(Model_227_ice, S1, first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S1,
;                        zero(Model_227_ice),
;                        first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_227_ice,
;                          S1,
;                          zero(Model_227_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S1,
;                        zero(Model_227_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_227_ice,
;                           S1,
;                           one(Model_227_ice),
;                           Node_1)),
;                transfer(Model_227_ice,
;                         S1,
;                         one(Model_227_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_227_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_227_ice))),
;                transfer(Model_227_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_227_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_227_ice,
;                       S1,
;                       first(Model_227_ice))),
;                le(Model_227_ice,
;                   one(Model_227_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S1,
;                        one(Model_227_ice),
;                        first(Model_227_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_227_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_227_ice))),
;                le(Model_227_ice,
;                   one(Model_227_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_227_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_227_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_227_ice, S1, Node_1),
;                     zero(Model_227_ice) ==
;                     ep(Model_227_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_227_ice) ==
;                           ep(Model_227_ice,
;                              S1,
;                              first(Model_227_ice))),
;                       zero(Model_227_ice) ==
;                       one(Model_227_ice))),
;                transfer(Model_227_ice,
;                         S1,
;                         ep(Model_227_ice,
;                            S1,
;                            first(Model_227_ice)),
;                         first(Model_227_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_227_ice) ==
;                ep(Model_227_ice, S1, first(Model_227_ice)),
;                locked(Model_227_ice,
;                       S1,
;                       ep(Model_227_ice,
;                          S1,
;                          first(Model_227_ice)),
;                       first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_227_ice,
;                            S1,
;                            one(Model_227_ice),
;                            Node_1),
;                     zero(Model_227_ice) ==
;                     ep(Model_227_ice, S1, Node_1))))),
;  ForAll(Epoch_1,
;         Or(Not(locked(Model_227_ice,
;                       S1,
;                       Epoch_1,
;                       first(Model_227_ice))),
;            Epoch_1 ==
;            ep(Model_227_ice, S1, first(Model_227_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_227_ice,
;                          S2,
;                          zero(Model_227_ice),
;                          first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_227_ice) ==
;                 ep(Model_227_ice, S2, first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S2,
;                        zero(Model_227_ice),
;                        first(Model_227_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_227_ice,
;                          S2,
;                          zero(Model_227_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S2,
;                        zero(Model_227_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_227_ice,
;                           S2,
;                           one(Model_227_ice),
;                           Node_1)),
;                transfer(Model_227_ice,
;                         S2,
;                         one(Model_227_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_227_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_227_ice))),
;                transfer(Model_227_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_227_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_227_ice,
;                       S2,
;                       first(Model_227_ice))),
;                le(Model_227_ice,
;                   one(Model_227_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_227_ice,
;                        S2,
;                        one(Model_227_ice),
;                        first(Model_227_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_227_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!1
;        Epoch!val!3))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_227_ice S1 Node!val!0)))
    (and (and (inv Model_227_ice S1 Node!val!0))
         (inv Model_227_ice S2 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f362a60>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_228_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_228_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_228_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_228_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_228_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_228_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_228_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_228_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_228_ice,
;                              zero(Model_228_ice),
;                              Epoch_1),
;                           one(Model_228_ice) !=
;                           zero(Model_228_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_228_ice,
;                          S1,
;                          zero(Model_228_ice),
;                          first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_228_ice) ==
;                 ep(Model_228_ice, S1, first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S1,
;                        zero(Model_228_ice),
;                        first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_228_ice,
;                          S1,
;                          zero(Model_228_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S1,
;                        zero(Model_228_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_228_ice,
;                           S1,
;                           one(Model_228_ice),
;                           Node_1)),
;                transfer(Model_228_ice,
;                         S1,
;                         one(Model_228_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_228_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_228_ice))),
;                transfer(Model_228_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_228_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_228_ice,
;                       S1,
;                       first(Model_228_ice))),
;                le(Model_228_ice,
;                   one(Model_228_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S1,
;                        one(Model_228_ice),
;                        first(Model_228_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_228_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_228_ice))),
;                le(Model_228_ice,
;                   one(Model_228_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_228_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_228_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_228_ice, S1, Node_1),
;                     zero(Model_228_ice) ==
;                     ep(Model_228_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_228_ice) ==
;                           ep(Model_228_ice,
;                              S1,
;                              first(Model_228_ice))),
;                       zero(Model_228_ice) ==
;                       one(Model_228_ice))),
;                transfer(Model_228_ice,
;                         S1,
;                         ep(Model_228_ice,
;                            S1,
;                            first(Model_228_ice)),
;                         first(Model_228_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_228_ice) ==
;                ep(Model_228_ice, S1, first(Model_228_ice)),
;                locked(Model_228_ice,
;                       S1,
;                       ep(Model_228_ice,
;                          S1,
;                          first(Model_228_ice)),
;                       first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_228_ice,
;                            S1,
;                            one(Model_228_ice),
;                            Node_1),
;                     zero(Model_228_ice) ==
;                     ep(Model_228_ice, S1, Node_1))))),
;  ForAll(Epoch_1,
;         Or(Not(transfer(Model_228_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_228_ice))),
;            Epoch_1 == one(Model_228_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_228_ice,
;                          S2,
;                          zero(Model_228_ice),
;                          first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_228_ice) ==
;                 ep(Model_228_ice, S2, first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S2,
;                        zero(Model_228_ice),
;                        first(Model_228_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_228_ice,
;                          S2,
;                          zero(Model_228_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S2,
;                        zero(Model_228_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_228_ice,
;                           S2,
;                           one(Model_228_ice),
;                           Node_1)),
;                transfer(Model_228_ice,
;                         S2,
;                         one(Model_228_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_228_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_228_ice))),
;                transfer(Model_228_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_228_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_228_ice,
;                       S2,
;                       first(Model_228_ice))),
;                le(Model_228_ice,
;                   one(Model_228_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_228_ice,
;                        S2,
;                        one(Model_228_ice),
;                        first(Model_228_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_228_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_228_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!0))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!0)))
;          Epoch!val!3
;          (ite a!1 Epoch!val!1 Epoch!val!0))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_228_ice S1 Node!val!0)
              (inv Model_228_ice S1 Node!val!1)))
    (and (and (inv Model_228_ice S1 Node!val!0)
              (inv Model_228_ice S1 Node!val!1))
         (inv Model_228_ice S2 Node!val!0)
         (inv Model_228_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3b74c0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_229_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_229_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_229_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_229_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_229_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_229_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_229_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_229_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_229_ice,
;                              zero(Model_229_ice),
;                              Epoch_1),
;                           one(Model_229_ice) !=
;                           zero(Model_229_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_229_ice,
;                          S1,
;                          zero(Model_229_ice),
;                          first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_229_ice) ==
;                 ep(Model_229_ice, S1, first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S1,
;                        zero(Model_229_ice),
;                        first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_229_ice,
;                          S1,
;                          zero(Model_229_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S1,
;                        zero(Model_229_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_229_ice,
;                           S1,
;                           one(Model_229_ice),
;                           Node_1)),
;                transfer(Model_229_ice,
;                         S1,
;                         one(Model_229_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_229_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_229_ice))),
;                transfer(Model_229_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_229_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_229_ice,
;                       S1,
;                       first(Model_229_ice))),
;                le(Model_229_ice,
;                   one(Model_229_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S1,
;                        one(Model_229_ice),
;                        first(Model_229_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_229_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_229_ice))),
;                le(Model_229_ice,
;                   one(Model_229_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_229_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_229_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_229_ice, S1, Node_1),
;                     zero(Model_229_ice) ==
;                     ep(Model_229_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_229_ice) ==
;                           ep(Model_229_ice,
;                              S1,
;                              first(Model_229_ice))),
;                       zero(Model_229_ice) ==
;                       one(Model_229_ice))),
;                transfer(Model_229_ice,
;                         S1,
;                         ep(Model_229_ice,
;                            S1,
;                            first(Model_229_ice)),
;                         first(Model_229_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_229_ice) ==
;                ep(Model_229_ice, S1, first(Model_229_ice)),
;                locked(Model_229_ice,
;                       S1,
;                       ep(Model_229_ice,
;                          S1,
;                          first(Model_229_ice)),
;                       first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_229_ice,
;                            S1,
;                            one(Model_229_ice),
;                            Node_1),
;                     zero(Model_229_ice) ==
;                     ep(Model_229_ice, S1, Node_1))))),
;  ForAll(Epoch_1,
;         Or(Not(transfer(Model_229_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_229_ice))),
;            le(Model_229_ice, Epoch_1, one(Model_229_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_229_ice,
;                          S2,
;                          zero(Model_229_ice),
;                          first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_229_ice) ==
;                 ep(Model_229_ice, S2, first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S2,
;                        zero(Model_229_ice),
;                        first(Model_229_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_229_ice,
;                          S2,
;                          zero(Model_229_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S2,
;                        zero(Model_229_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_229_ice,
;                           S2,
;                           one(Model_229_ice),
;                           Node_1)),
;                transfer(Model_229_ice,
;                         S2,
;                         one(Model_229_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_229_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_229_ice))),
;                transfer(Model_229_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_229_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_229_ice,
;                       S2,
;                       first(Model_229_ice))),
;                le(Model_229_ice,
;                   one(Model_229_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_229_ice,
;                        S2,
;                        one(Model_229_ice),
;                        first(Model_229_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_229_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_229_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))))))
;     (ite a!1 Epoch!val!1 Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!0))
;        (not (= x!2 Epoch!val!3))
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_229_ice S1 Node!val!0)
              (inv Model_229_ice S1 Node!val!1)))
    (and (and (inv Model_229_ice S1 Node!val!0)
              (inv Model_229_ice S1 Node!val!1))
         (inv Model_229_ice S2 Node!val!0)
         (inv Model_229_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3b4970>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_230_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_230_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_230_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_230_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_230_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_230_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_230_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_230_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_230_ice,
;                              zero(Model_230_ice),
;                              Epoch_1),
;                           one(Model_230_ice) !=
;                           zero(Model_230_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_230_ice,
;                          S1,
;                          zero(Model_230_ice),
;                          first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_230_ice) ==
;                 ep(Model_230_ice, S1, first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S1,
;                        zero(Model_230_ice),
;                        first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_230_ice,
;                          S1,
;                          zero(Model_230_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S1,
;                        zero(Model_230_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_230_ice,
;                           S1,
;                           one(Model_230_ice),
;                           Node_1)),
;                transfer(Model_230_ice,
;                         S1,
;                         one(Model_230_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_230_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_230_ice))),
;                transfer(Model_230_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_230_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_230_ice,
;                       S1,
;                       first(Model_230_ice))),
;                le(Model_230_ice,
;                   one(Model_230_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S1,
;                        one(Model_230_ice),
;                        first(Model_230_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_230_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_230_ice))),
;                le(Model_230_ice,
;                   one(Model_230_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_230_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_230_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_230_ice, S1, Node_1),
;                     zero(Model_230_ice) ==
;                     ep(Model_230_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_230_ice) ==
;                           ep(Model_230_ice,
;                              S1,
;                              first(Model_230_ice))),
;                       zero(Model_230_ice) ==
;                       one(Model_230_ice))),
;                transfer(Model_230_ice,
;                         S1,
;                         ep(Model_230_ice,
;                            S1,
;                            first(Model_230_ice)),
;                         first(Model_230_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_230_ice) ==
;                ep(Model_230_ice, S1, first(Model_230_ice)),
;                locked(Model_230_ice,
;                       S1,
;                       ep(Model_230_ice,
;                          S1,
;                          first(Model_230_ice)),
;                       first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_230_ice,
;                            S1,
;                            one(Model_230_ice),
;                            Node_1),
;                     zero(Model_230_ice) ==
;                     ep(Model_230_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(And(held(Model_230_ice,
;                      S1,
;                      first(Model_230_ice)),
;                 locked(Model_230_ice,
;                        S1,
;                        one(Model_230_ice),
;                        Node_1)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_230_ice,
;                          S2,
;                          zero(Model_230_ice),
;                          first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_230_ice) ==
;                 ep(Model_230_ice, S2, first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S2,
;                        zero(Model_230_ice),
;                        first(Model_230_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_230_ice,
;                          S2,
;                          zero(Model_230_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S2,
;                        zero(Model_230_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_230_ice,
;                           S2,
;                           one(Model_230_ice),
;                           Node_1)),
;                transfer(Model_230_ice,
;                         S2,
;                         one(Model_230_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_230_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_230_ice))),
;                transfer(Model_230_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_230_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_230_ice,
;                       S2,
;                       first(Model_230_ice))),
;                le(Model_230_ice,
;                   one(Model_230_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_230_ice,
;                        S2,
;                        one(Model_230_ice),
;                        first(Model_230_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_230_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   Epoch!val!0)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (= x!2 Node!val!1))
;                   Epoch!val!2
;                   (ite (and (= x!0 ModelId!val!0)
;                             (= x!1 StateId!val!0)
;                             (= x!2 Node!val!1))
;                        Epoch!val!1
;                        a!1))))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!3
;          a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_230_ice S1 Node!val!0)
              (inv Model_230_ice S1 Node!val!1)))
    (and (and (inv Model_230_ice S1 Node!val!0)
              (inv Model_230_ice S1 Node!val!1))
         (inv Model_230_ice S2 Node!val!0)
         (inv Model_230_ice S2 Node!val!1))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68da7310>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_231_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_231_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_231_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_231_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_231_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_231_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_231_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_231_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_231_ice,
;                              zero(Model_231_ice),
;                              Epoch_1),
;                           one(Model_231_ice) !=
;                           zero(Model_231_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_231_ice,
;                          S1,
;                          zero(Model_231_ice),
;                          first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_231_ice) ==
;                 ep(Model_231_ice, S1, first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S1,
;                        zero(Model_231_ice),
;                        first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_231_ice,
;                          S1,
;                          zero(Model_231_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S1,
;                        zero(Model_231_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_231_ice,
;                           S1,
;                           one(Model_231_ice),
;                           Node_1)),
;                transfer(Model_231_ice,
;                         S1,
;                         one(Model_231_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_231_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_231_ice))),
;                transfer(Model_231_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_231_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_231_ice,
;                       S1,
;                       first(Model_231_ice))),
;                le(Model_231_ice,
;                   one(Model_231_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S1,
;                        one(Model_231_ice),
;                        first(Model_231_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_231_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_231_ice))),
;                le(Model_231_ice,
;                   one(Model_231_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_231_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_231_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_231_ice, S1, Node_1),
;                     zero(Model_231_ice) ==
;                     ep(Model_231_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_231_ice) ==
;                           ep(Model_231_ice,
;                              S1,
;                              first(Model_231_ice))),
;                       zero(Model_231_ice) ==
;                       one(Model_231_ice))),
;                transfer(Model_231_ice,
;                         S1,
;                         ep(Model_231_ice,
;                            S1,
;                            first(Model_231_ice)),
;                         first(Model_231_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_231_ice) ==
;                ep(Model_231_ice, S1, first(Model_231_ice)),
;                locked(Model_231_ice,
;                       S1,
;                       ep(Model_231_ice,
;                          S1,
;                          first(Model_231_ice)),
;                       first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_231_ice,
;                            S1,
;                            one(Model_231_ice),
;                            Node_1),
;                     zero(Model_231_ice) ==
;                     ep(Model_231_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(And(zero(Model_231_ice) ==
;                 ep(Model_231_ice, S1, Node_1),
;                 transfer(Model_231_ice,
;                          S1,
;                          one(Model_231_ice),
;                          Node_1)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_231_ice,
;                          S2,
;                          zero(Model_231_ice),
;                          first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_231_ice) ==
;                 ep(Model_231_ice, S2, first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S2,
;                        zero(Model_231_ice),
;                        first(Model_231_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_231_ice,
;                          S2,
;                          zero(Model_231_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S2,
;                        zero(Model_231_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_231_ice,
;                           S2,
;                           one(Model_231_ice),
;                           Node_1)),
;                transfer(Model_231_ice,
;                         S2,
;                         one(Model_231_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_231_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_231_ice))),
;                transfer(Model_231_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_231_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_231_ice,
;                       S2,
;                       first(Model_231_ice))),
;                le(Model_231_ice,
;                   one(Model_231_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_231_ice,
;                        S2,
;                        one(Model_231_ice),
;                        first(Model_231_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_231_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!1))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!1)))
;          Epoch!val!2
;          (ite a!1 Epoch!val!0 Epoch!val!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_231_ice S1 Node!val!0)
                (inv Model_231_ice S1 Node!val!1)
                (inv Model_231_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_231_ice S2 Node!val!0)
           (inv Model_231_ice S2 Node!val!1)
           (inv Model_231_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f38af10>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_232_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_232_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_232_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_232_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_232_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_232_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_232_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_232_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_232_ice,
;                              zero(Model_232_ice),
;                              Epoch_1),
;                           one(Model_232_ice) !=
;                           zero(Model_232_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_232_ice,
;                          S1,
;                          zero(Model_232_ice),
;                          first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_232_ice) ==
;                 ep(Model_232_ice, S1, first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S1,
;                        zero(Model_232_ice),
;                        first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_232_ice,
;                          S1,
;                          zero(Model_232_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S1,
;                        zero(Model_232_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_232_ice,
;                           S1,
;                           one(Model_232_ice),
;                           Node_1)),
;                transfer(Model_232_ice,
;                         S1,
;                         one(Model_232_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_232_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_232_ice))),
;                transfer(Model_232_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_232_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_232_ice,
;                       S1,
;                       first(Model_232_ice))),
;                le(Model_232_ice,
;                   one(Model_232_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S1,
;                        one(Model_232_ice),
;                        first(Model_232_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_232_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_232_ice))),
;                le(Model_232_ice,
;                   one(Model_232_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_232_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_232_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_232_ice, S1, Node_1),
;                     zero(Model_232_ice) ==
;                     ep(Model_232_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_232_ice) ==
;                           ep(Model_232_ice,
;                              S1,
;                              first(Model_232_ice))),
;                       zero(Model_232_ice) ==
;                       one(Model_232_ice))),
;                transfer(Model_232_ice,
;                         S1,
;                         ep(Model_232_ice,
;                            S1,
;                            first(Model_232_ice)),
;                         first(Model_232_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_232_ice) ==
;                ep(Model_232_ice, S1, first(Model_232_ice)),
;                locked(Model_232_ice,
;                       S1,
;                       ep(Model_232_ice,
;                          S1,
;                          first(Model_232_ice)),
;                       first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_232_ice,
;                            S1,
;                            one(Model_232_ice),
;                            Node_1),
;                     zero(Model_232_ice) ==
;                     ep(Model_232_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(And(transfer(Model_232_ice,
;                          S1,
;                          one(Model_232_ice),
;                          first(Model_232_ice)),
;                 locked(Model_232_ice,
;                        S1,
;                        one(Model_232_ice),
;                        Node_1)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_232_ice,
;                          S2,
;                          zero(Model_232_ice),
;                          first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_232_ice) ==
;                 ep(Model_232_ice, S2, first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S2,
;                        zero(Model_232_ice),
;                        first(Model_232_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_232_ice,
;                          S2,
;                          zero(Model_232_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S2,
;                        zero(Model_232_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_232_ice,
;                           S2,
;                           one(Model_232_ice),
;                           Node_1)),
;                transfer(Model_232_ice,
;                         S2,
;                         one(Model_232_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_232_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_232_ice))),
;                transfer(Model_232_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_232_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_232_ice,
;                       S2,
;                       first(Model_232_ice))),
;                le(Model_232_ice,
;                   one(Model_232_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_232_ice,
;                        S2,
;                        one(Model_232_ice),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_232_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!2))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!2)))
;                   Epoch!val!1
;                   Epoch!val!2)))
;     (ite a!1 Epoch!val!3 a!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_232_ice S1 Node!val!0)
                (inv Model_232_ice S1 Node!val!1)
                (inv Model_232_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_232_ice S2 Node!val!0)
           (inv Model_232_ice S2 Node!val!1)
           (inv Model_232_ice S2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f3b4340>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_233_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_233_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_233_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_233_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_233_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_233_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_233_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_233_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_233_ice,
;                              zero(Model_233_ice),
;                              Epoch_1),
;                           one(Model_233_ice) !=
;                           zero(Model_233_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_233_ice,
;                          S1,
;                          zero(Model_233_ice),
;                          first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_233_ice) ==
;                 ep(Model_233_ice, S1, first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S1,
;                        zero(Model_233_ice),
;                        first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_233_ice,
;                          S1,
;                          zero(Model_233_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S1,
;                        zero(Model_233_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_233_ice,
;                           S1,
;                           one(Model_233_ice),
;                           Node_1)),
;                transfer(Model_233_ice,
;                         S1,
;                         one(Model_233_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_233_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_233_ice))),
;                transfer(Model_233_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_233_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_233_ice,
;                       S1,
;                       first(Model_233_ice))),
;                le(Model_233_ice,
;                   one(Model_233_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S1,
;                        one(Model_233_ice),
;                        first(Model_233_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_233_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_233_ice))),
;                le(Model_233_ice,
;                   one(Model_233_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_233_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_233_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_233_ice, S1, Node_1),
;                     zero(Model_233_ice) ==
;                     ep(Model_233_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_233_ice) ==
;                           ep(Model_233_ice,
;                              S1,
;                              first(Model_233_ice))),
;                       zero(Model_233_ice) ==
;                       one(Model_233_ice))),
;                transfer(Model_233_ice,
;                         S1,
;                         ep(Model_233_ice,
;                            S1,
;                            first(Model_233_ice)),
;                         first(Model_233_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_233_ice) ==
;                ep(Model_233_ice, S1, first(Model_233_ice)),
;                locked(Model_233_ice,
;                       S1,
;                       ep(Model_233_ice,
;                          S1,
;                          first(Model_233_ice)),
;                       first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_233_ice,
;                            S1,
;                            one(Model_233_ice),
;                            Node_1),
;                     zero(Model_233_ice) ==
;                     ep(Model_233_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Not(And(zero(Model_233_ice) ==
;                 ep(Model_233_ice, S1, Node_1),
;                 transfer(Model_233_ice,
;                          S1,
;                          one(Model_233_ice),
;                          first(Model_233_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_233_ice,
;                          S2,
;                          zero(Model_233_ice),
;                          first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_233_ice) ==
;                 ep(Model_233_ice, S2, first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S2,
;                        zero(Model_233_ice),
;                        first(Model_233_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_233_ice,
;                          S2,
;                          zero(Model_233_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S2,
;                        zero(Model_233_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_233_ice,
;                           S2,
;                           one(Model_233_ice),
;                           Node_1)),
;                transfer(Model_233_ice,
;                         S2,
;                         one(Model_233_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_233_ice,
;                           S2,
;                           Epoch_1,
;                           first(Model_233_ice))),
;                transfer(Model_233_ice,
;                         S2,
;                         Epoch_1,
;                         first(Model_233_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_233_ice,
;                       S2,
;                       first(Model_233_ice))),
;                le(Model_233_ice,
;                   one(Model_233_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_233_ice,
;                        S2,
;                        one(Model_233_ice),
;                        first(Model_233_ice)))),
;      ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_233_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!1 (ite a!2 Epoch!val!0 Epoch!val!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_233_ice S1 Node!val!0)
                (inv Model_233_ice S1 Node!val!1)
                (inv Model_233_ice S1 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_233_ice S2 Node!val!0)
           (inv Model_233_ice S2 Node!val!1)
           (inv Model_233_ice S2 Node!val!2)))))

; this one includes assertion of axioms, so no need to assert it again
(assert (forall ((Epoch_1 Epoch))
  (forall ((Epoch_2 Epoch))
    (forall ((Epoch_3 Epoch))
      (and (le Model_DUMMYMODEL Epoch_1 Epoch_1)
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_3))
               (le Model_DUMMYMODEL Epoch_1 Epoch_3))
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_1))
               (= Epoch_1 Epoch_2))
           (or (le Model_DUMMYMODEL Epoch_1 Epoch_2)
               (le Model_DUMMYMODEL Epoch_2 Epoch_1))
           (le Model_DUMMYMODEL (zero Model_DUMMYMODEL) Epoch_1)
           (distinct (one Model_DUMMYMODEL) (zero Model_DUMMYMODEL)))))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL
                 DUMMYSTATE
                 (zero Model_DUMMYMODEL)
                 (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (= (zero Model_DUMMYMODEL)
          (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (zero Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1))
      (transfer Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1))))
(assert (forall ((Epoch_1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))
      (transfer Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))))
(assert (forall ((Epoch_1 Epoch))
  (let ((a!1 (not (= Epoch_1
                     (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
    (or a!1 (le Model_DUMMYMODEL (one Model_DUMMYMODEL) Epoch_1)))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (one Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Epoch_1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))
      (le Model_DUMMYMODEL (one Model_DUMMYMODEL) Epoch_1))))
(assert (forall ((Node_1 Node))
  (forall ((Epoch_1 Epoch))
    (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 Node_1))
        (transfer Model_DUMMYMODEL DUMMYSTATE Epoch_1 Node_1)))))
(assert (forall ((Node_1 Node))
  (not (and (held Model_DUMMYMODEL DUMMYSTATE Node_1)
            (= (zero Model_DUMMYMODEL) (ep Model_DUMMYMODEL DUMMYSTATE Node_1))))))
(assert (forall ((Node_1 Node))
  (let ((a!1 (not (= (one Model_DUMMYMODEL)
                     (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
  (let ((a!2 (not (or a!1 (= (zero Model_DUMMYMODEL) (one Model_DUMMYMODEL))))))
    (or a!2
        (transfer Model_DUMMYMODEL
                  DUMMYSTATE
                  (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
                  (first Model_DUMMYMODEL)))))))
(assert (forall ((Node_1 Node))
  (or (= (one Model_DUMMYMODEL)
         (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
      (locked Model_DUMMYMODEL
              DUMMYSTATE
              (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
              (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (and (locked Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1)
            (= (zero Model_DUMMYMODEL) (ep Model_DUMMYMODEL DUMMYSTATE Node_1))))))
(assert (not (inv Model_DUMMYMODEL DUMMYSTATE Node!val!0)))

; the following is to assert that we don't get True as an invariant
(declare-fun N1 () Node)
;(assert (not (inv Model_DUMMYMODEL DUMMYSTATE N1)))

(check-synth)

