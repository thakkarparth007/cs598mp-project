
(set-option :random-seed 123)

;(declare-sort ModelId)
;(declare-sort StateId)
;(declare-sort Node)
;(declare-sort Epoch)

(declare-datatypes ( (Node 0) ) ((
(Node!val!0) 
(Node!val!2) 
(Node!val!1) 
)))

(declare-datatypes ( (Epoch 0) ) ((
(Epoch!val!2) 
(Epoch!val!1) 
(Epoch!val!0) 
(Epoch!val!5) 
(Epoch!val!4) 
(Epoch!val!3) 
)))

(declare-datatypes ( (ModelId 0) ) ((
(Model_DUMMYMODEL) 
(Model_83_ice) 
(Model_1_pos) 
(Model_87_ice) 
(Model_94_ice) 
(Model_85_ice) 
(Model_98_ice) 
(Model_90_ice) 
(Model_86_ice) 
(Model_82_ice) 
(Model_95_ice) 
(Model_96_ice) 
(Model_97_ice) 
(Model_84_ice) 
(Model_0_pos) 
(Model_88_ice) 
(Model_92_ice) 
(Model_93_ice) 
(Model_89_ice) 
(Model_91_ice) 
(Model_99_ice) 
(Model_81_ice) 
)))

(declare-datatypes ( (StateId 0) ) ((
(DUMMYSTATE) 
(S2) 
(S1) 
(init) 
)))


;(declare-fun held (ModelId StateId Node) Bool)
;(declare-fun locked (ModelId StateId Epoch Node) Bool)
;(declare-fun transfer (ModelId StateId Epoch Node) Bool)
;(declare-fun ep (ModelId StateId Node) Epoch)
;(declare-fun le (ModelId Epoch Epoch) Bool)
;(declare-fun zero (ModelId) Epoch)
;(declare-fun one (ModelId) Epoch)
;(declare-fun first (ModelId) Node)

(declare-fun held_dummy (ModelId StateId Node) Bool)
(define-fun held ((a0 ModelId) (a1 StateId) (a2 Node)) Bool
    (ite (= a0 Model_DUMMYMODEL) (held_dummy a0 a1 a2 )
    (ite (= a0 Model_1_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_81_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_82_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_83_ice)
        (ite (= a1 S1)
            true
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_84_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_85_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_86_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            true
        )
    (ite (= a0 Model_87_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_88_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            true
        )
    (ite (= a0 Model_89_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_90_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_91_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            true
        )
    (ite (= a0 Model_92_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_93_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_94_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_95_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_96_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_97_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!2, ] 
            true
        ))
    (ite (= a0 Model_98_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_99_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a2 Node!val!0)
            true
;        if a2 IN [Node!val!2, ] 
            false
        ))
;    if a0 IN [Model_0_pos, ] 
        true
    ))))))))))))))))))))
)
)
(declare-fun locked_dummy (ModelId StateId Epoch Node) Bool)
(define-fun locked ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
    (ite (= a0 Model_DUMMYMODEL) (locked_dummy a0 a1 a2 a3 )
    (ite (= a0 Model_82_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_83_ice)
        (ite (or (= a2 Epoch!val!0) (= a2 Epoch!val!4) )
            true
;        if a2 IN [Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_85_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_87_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a2 Epoch!val!2)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        ))
    (ite (= a0 Model_89_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_90_ice)
        (ite (= a2 Epoch!val!4)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_92_ice)
        (ite (= a2 Epoch!val!4)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_93_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!1, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_94_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!1, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_95_ice)
        (ite (= a2 Epoch!val!5)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
;        if a2 IN [Epoch!val!2, Epoch!val!1, Epoch!val!0, Epoch!val!4, Epoch!val!3, ] 
            false
        )
    (ite (= a0 Model_97_ice)
        (ite (= a2 Epoch!val!4)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!3, ] 
            false
        ))
    (ite (= a0 Model_98_ice)
        (ite (= a2 Epoch!val!3)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!2, Epoch!val!1, ] 
            false
        )
    (ite (= a0 Model_99_ice)
        (ite (= a2 Epoch!val!2)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
;        if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!1, Epoch!val!3, ] 
            false
        )
;    if a0 IN [Model_96_ice, Model_84_ice, Model_1_pos, Model_0_pos, Model_91_ice, Model_88_ice, Model_86_ice, Model_81_ice, ] 
        false
    )))))))))))))
)
)
(declare-fun transfer_dummy (ModelId StateId Epoch Node) Bool)
(define-fun transfer ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
    (ite (= a0 Model_DUMMYMODEL) (transfer_dummy a0 a1 a2 a3 )
    (ite (= a2 Epoch!val!0)
        (ite (= a0 Model_81_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_96_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_83_ice)
            true
;        if a0 IN [Model_95_ice, Model_99_ice, Model_92_ice, Model_84_ice, Model_97_ice, Model_93_ice, Model_1_pos, Model_0_pos, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_90_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
            false
        )))
    (ite (= a2 Epoch!val!2)
        (ite (= a0 Model_86_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_88_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_89_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_90_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_93_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_94_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_95_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_97_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_99_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_87_ice)
            true
;        if a0 IN [Model_96_ice, Model_92_ice, Model_84_ice, Model_83_ice, Model_1_pos, Model_0_pos, Model_91_ice, Model_85_ice, Model_98_ice, Model_81_ice, Model_82_ice, ] 
            false
        ))))))))))
    (ite (= a2 Epoch!val!3)
        (ite (= a0 Model_83_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_84_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_89_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_91_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_93_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_97_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_98_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_99_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (or (= a0 Model_87_ice) (= a0 Model_85_ice) (= a0 Model_82_ice) )
            true
;        if a0 IN [Model_95_ice, Model_96_ice, Model_92_ice, Model_88_ice, Model_94_ice, Model_90_ice, Model_86_ice, Model_81_ice, ] 
            false
        )))))))))
    (ite (= a2 Epoch!val!4)
        (ite (= a0 Model_90_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_92_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_94_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_97_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_83_ice)
            true
;        if a0 IN [Model_95_ice, Model_96_ice, Model_93_ice, Model_88_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_89_ice, Model_86_ice, ] 
            false
        )))))
    (ite (= a2 Epoch!val!5)
        (ite (= a3 Node!val!2)
            true
;        if a3 IN [Node!val!0, Node!val!1, ] 
            false
        )
;    if a2 IN [Epoch!val!1, ] 
        false
    )))))
)
)
(declare-fun ep_dummy (ModelId StateId Node) Epoch)
(define-fun ep ((a0 ModelId) (a1 StateId) (a2 Node)) Epoch
    (ite (= a0 Model_DUMMYMODEL) (ep_dummy a0 a1 a2 )
    (ite (= a0 Model_1_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_82_ice)
        (ite (= a1 S1)
            Epoch!val!2
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_84_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_85_ice)
        (ite (= a1 S1)
            Epoch!val!4
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_86_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_87_ice)
        (ite (= a1 S1)
            Epoch!val!2
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_88_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_89_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_90_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_91_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_92_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!0
;            if a1 IN [S2, ] 
                Epoch!val!4
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_93_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_94_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_95_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!5
        ))
    (ite (= a0 Model_96_ice)
        (ite (= a2 Node!val!1)
            Epoch!val!1
;        if a2 IN [Node!val!0, Node!val!2, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_97_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_98_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_99_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_83_ice)
        Epoch!val!4
;    if a0 IN [Model_0_pos, Model_81_ice, ] 
        Epoch!val!1
    )))))))))))))))))))
)
)
(declare-fun le_dummy (ModelId Epoch Epoch) Bool)
(define-fun le ((a0 ModelId) (a1 Epoch) (a2 Epoch)) Bool
    (ite (= a0 Model_DUMMYMODEL) (le_dummy a0 a1 a2 )
    (ite (= a1 Epoch!val!0)
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_97_ice) (= a0 Model_83_ice) (= a0 Model_87_ice) (= a0 Model_94_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) )
                true
;            if a0 IN [Model_95_ice, Model_96_ice, Model_92_ice, Model_84_ice, Model_93_ice, Model_1_pos, Model_0_pos, Model_91_ice, Model_88_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_86_ice, Model_81_ice, Model_82_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_85_ice) (= a0 Model_92_ice) (= a0 Model_1_pos) (= a0 Model_90_ice) )
                true
;            if a0 IN [Model_95_ice, Model_96_ice, Model_97_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_0_pos, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_99_ice, Model_89_ice, Model_86_ice, Model_81_ice, Model_82_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_92_ice) (= a0 Model_84_ice) (= a0 Model_83_ice) (= a0 Model_97_ice) (= a0 Model_87_ice) (= a0 Model_94_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) (= a0 Model_82_ice) )
                true
;            if a0 IN [Model_95_ice, Model_96_ice, Model_93_ice, Model_91_ice, Model_88_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_86_ice, Model_81_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_92_ice) (= a0 Model_83_ice) (= a0 Model_94_ice) (= a0 Model_98_ice) (= a0 Model_90_ice) )
                true
;            if a0 IN [Model_95_ice, Model_96_ice, Model_97_ice, Model_93_ice, Model_88_ice, Model_85_ice, Model_99_ice, Model_89_ice, Model_86_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!0)
            true
;        if a2 IN [Epoch!val!5, ] 
            false
        )))))
    (ite (= a1 Epoch!val!2)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_97_ice) (= a0 Model_83_ice) (= a0 Model_87_ice) (= a0 Model_94_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) )
                false
;            if a0 IN [Model_95_ice, Model_96_ice, Model_92_ice, Model_84_ice, Model_93_ice, Model_1_pos, Model_0_pos, Model_91_ice, Model_88_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_86_ice, Model_81_ice, Model_82_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_96_ice) (= a0 Model_92_ice) (= a0 Model_1_pos) (= a0 Model_0_pos) (= a0 Model_85_ice) (= a0 Model_81_ice) )
                true
;            if a0 IN [Model_95_ice, Model_99_ice, Model_97_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_90_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_95_ice) (= a0 Model_96_ice) (= a0 Model_88_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) (= a0 Model_86_ice) (= a0 Model_81_ice) )
                false
;            if a0 IN [Model_92_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_97_ice, Model_87_ice, Model_91_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_82_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_95_ice) (= a0 Model_97_ice) (= a0 Model_88_ice) (= a0 Model_99_ice) (= a0 Model_89_ice) )
                false
;            if a0 IN [Model_96_ice, Model_92_ice, Model_83_ice, Model_93_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_90_ice, Model_86_ice, ] 
                true
            )
;        if a2 IN [Epoch!val!5, Epoch!val!2, ] 
            true
        ))))
    (ite (= a1 Epoch!val!1)
        (ite (= a0 Model_0_pos)
            (ite (= a2 Epoch!val!2)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, ] 
                true
            )
        (ite (= a0 Model_1_pos)
            (ite (= a2 Epoch!val!1)
                true
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                false
            )
        (ite (= a0 Model_81_ice)
            (ite (or (= a2 Epoch!val!2) (= a2 Epoch!val!3) )
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, ] 
                true
            )
        (ite (= a0 Model_85_ice)
            (ite (= a2 Epoch!val!1)
                true
;            if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!2, Epoch!val!3, ] 
                false
            )
        (ite (= a0 Model_90_ice)
            (ite (= a2 Epoch!val!0)
                false
;            if a2 IN [Epoch!val!4, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_92_ice)
            (ite (= a2 Epoch!val!1)
                true
;            if a2 IN [Epoch!val!0, Epoch!val!4, Epoch!val!2, Epoch!val!3, ] 
                false
            )
        (ite (= a0 Model_96_ice)
            (ite (or (= a2 Epoch!val!0) (= a2 Epoch!val!1) )
                true
;            if a2 IN [Epoch!val!4, Epoch!val!2, Epoch!val!3, ] 
                false
            )
;        if a0 IN [Model_95_ice, Model_97_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_99_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
            true
        )))))))
    (ite (= a1 Epoch!val!3)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_92_ice) (= a0 Model_84_ice) (= a0 Model_83_ice) (= a0 Model_97_ice) (= a0 Model_87_ice) (= a0 Model_94_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) (= a0 Model_82_ice) )
                false
;            if a0 IN [Model_95_ice, Model_96_ice, Model_93_ice, Model_91_ice, Model_88_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_86_ice, Model_81_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_95_ice) (= a0 Model_96_ice) (= a0 Model_88_ice) (= a0 Model_90_ice) (= a0 Model_89_ice) (= a0 Model_86_ice) (= a0 Model_81_ice) )
                true
;            if a0 IN [Model_92_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_97_ice, Model_87_ice, Model_91_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_99_ice, Model_82_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_96_ice) (= a0 Model_92_ice) (= a0 Model_85_ice) (= a0 Model_81_ice) )
                true
;            if a0 IN [Model_95_ice, Model_99_ice, Model_97_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_90_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_96_ice) (= a0 Model_93_ice) (= a0 Model_94_ice) (= a0 Model_98_ice) (= a0 Model_90_ice) (= a0 Model_86_ice) )
                true
;            if a0 IN [Model_95_ice, Model_92_ice, Model_97_ice, Model_83_ice, Model_88_ice, Model_85_ice, Model_99_ice, Model_89_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!5, Epoch!val!3, ] 
            true
        ))))
    (ite (= a1 Epoch!val!4)
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_96_ice) (= a0 Model_93_ice) (= a0 Model_94_ice) (= a0 Model_98_ice) (= a0 Model_90_ice) (= a0 Model_86_ice) )
                false
;            if a0 IN [Model_95_ice, Model_92_ice, Model_97_ice, Model_83_ice, Model_88_ice, Model_85_ice, Model_99_ice, Model_89_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_92_ice) (= a0 Model_83_ice) (= a0 Model_94_ice) (= a0 Model_98_ice) (= a0 Model_90_ice) )
                false
;            if a0 IN [Model_95_ice, Model_96_ice, Model_97_ice, Model_93_ice, Model_88_ice, Model_85_ice, Model_99_ice, Model_89_ice, Model_86_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_95_ice) (= a0 Model_97_ice) (= a0 Model_88_ice) (= a0 Model_99_ice) (= a0 Model_89_ice) )
                true
;            if a0 IN [Model_96_ice, Model_92_ice, Model_83_ice, Model_93_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_90_ice, Model_86_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_96_ice) (= a0 Model_92_ice) (= a0 Model_85_ice) )
                true
;            if a0 IN [Model_95_ice, Model_99_ice, Model_97_ice, Model_83_ice, Model_93_ice, Model_88_ice, Model_94_ice, Model_98_ice, Model_90_ice, Model_89_ice, Model_86_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!4, Epoch!val!5, ] 
            true
        ))))
;    if a1 IN [Epoch!val!5, ] 
        (ite (or (= a2 Epoch!val!0) (= a2 Epoch!val!5) )
            true
;        if a2 IN [Epoch!val!4, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
            false
        )
    )))))
)
)
(declare-fun zero_dummy (ModelId) Epoch)
(define-fun zero ((a0 ModelId)) Epoch
    (ite (= a0 Model_DUMMYMODEL) (zero_dummy a0 )
    (ite (= a0 Model_90_ice)
        Epoch!val!0
    (ite (or (= a0 Model_96_ice) (= a0 Model_81_ice) )
        Epoch!val!3
    (ite (or (= a0 Model_85_ice) (= a0 Model_1_pos) (= a0 Model_92_ice) (= a0 Model_0_pos) )
        Epoch!val!2
;    if a0 IN [Model_95_ice, Model_97_ice, Model_84_ice, Model_83_ice, Model_93_ice, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_99_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
        Epoch!val!1
    )))
)
)
(declare-fun one_dummy (ModelId) Epoch)
(define-fun one ((a0 ModelId)) Epoch
    (ite (= a0 Model_DUMMYMODEL) (one_dummy a0 )
    (ite (or (= a0 Model_96_ice) (= a0 Model_81_ice) (= a0 Model_83_ice) )
        Epoch!val!2
    (ite (or (= a0 Model_92_ice) (= a0 Model_1_pos) (= a0 Model_0_pos) (= a0 Model_85_ice) (= a0 Model_90_ice) )
        Epoch!val!1
;    if a0 IN [Model_95_ice, Model_97_ice, Model_84_ice, Model_93_ice, Model_87_ice, Model_88_ice, Model_91_ice, Model_94_ice, Model_98_ice, Model_99_ice, Model_89_ice, Model_86_ice, Model_82_ice, ] 
        Epoch!val!0
    ))
)
)
(declare-fun first_dummy (ModelId) Node)
(define-fun first ((a0 ModelId)) Node
    (ite (= a0 Model_DUMMYMODEL) (first_dummy a0 )
    (ite (= a0 Model_1_pos)
        Node!val!1
;    if a0 IN [Model_83_ice, Model_87_ice, Model_94_ice, Model_85_ice, Model_98_ice, Model_90_ice, Model_86_ice, Model_82_ice, Model_95_ice, Model_96_ice, Model_97_ice, Model_84_ice, Model_0_pos, Model_88_ice, Model_92_ice, Model_93_ice, Model_89_ice, Model_91_ice, Model_99_ice, Model_81_ice, ] 
        Node!val!0
    )
)
)

(synth-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool 
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool 
            (
                (held m s Node_)
                (locked m s Epoch_ Node_)
                (transfer m s Epoch_ Node_)
                (le m Epoch_ Epoch_)

                (= Node_ Node_)
                (= Epoch_ Epoch_)

                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)     
            )
        )

        (Node_ Node
            (
                n1
n2
            )
        )

        (Epoch_ Epoch
            (
                
                (ep m s Node_)
            )
        )
    
    )
)

; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QForAll object at 0x7fe2e17529d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(ForAll(Node_1, False))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!1
;        Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_0_pos init Node!val!0 Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e16e1730>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_1_pos, init, Node_1) ==
;                    (Node_1 == first(Model_1_pos)),
;                    Implies(Node_1 != first(Model_1_pos),
;                            ep(Model_1_pos, init, Node_1) ==
;                            zero(Model_1_pos)),
;                    ep(Model_1_pos, init, first(Model_1_pos)) ==
;                    one(Model_1_pos),
;                    transfer(Model_1_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_1_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_1_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_1_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_1_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_1_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_1_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_1_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_1_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_1_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_1_pos,
;                              zero(Model_1_pos),
;                              Epoch_1),
;                           one(Model_1_pos) !=
;                           zero(Model_1_pos))))),
;  Not(ForAll(Node_1, held(Model_1_pos, init, Node_1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_1_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (not (= x!2 Node!val!1)))
;        Epoch!val!2
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;             Epoch!val!1
;             Epoch!val!0)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_1_pos init Node!val!0 Node!val!0)
     (inv Model_1_pos init Node!val!0 Node!val!1)
     (inv Model_1_pos init Node!val!1 Node!val!0)
     (inv Model_1_pos init Node!val!1 Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e151ce50>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_81_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_81_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_81_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_81_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_81_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_81_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_81_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_81_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_81_ice,
;                              zero(Model_81_ice),
;                              Epoch_1),
;                           one(Model_81_ice) !=
;                           zero(Model_81_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_81_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_81_ice, S1, Node_1),
;                le(Model_81_ice,
;                   ep(Model_81_ice, S1, Node_1),
;                   ep(Model_81_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_81_ice,
;                ep(Model_81_ice, S1, Node_1),
;                ep(Model_81_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_81_ice,
;                           S1,
;                           ep(Model_81_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_81_ice,
;                         S1,
;                         ep(Model_81_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_81_ice,
;                          Epoch_1,
;                          ep(Model_81_ice, S1, Node_1)),
;                       le(Model_81_ice,
;                          ep(Model_81_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_81_ice,
;                                S1,
;                                ep(Model_81_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_81_ice,
;                              S1,
;                              ep(Model_81_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_81_ice,
;                          Epoch_1,
;                          ep(Model_81_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_81_ice, S1, Node_1),
;                       Not(le(Model_81_ice,
;                              ep(Model_81_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_81_ice,
;                              Epoch_1,
;                              ep(Model_81_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Not(transfer(Model_81_ice,
;                             S1,
;                             Epoch_1,
;                             Node_1)))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_81_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_81_ice, S2, Node_1),
;                le(Model_81_ice,
;                   ep(Model_81_ice, S2, Node_1),
;                   ep(Model_81_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_81_ice,
;                ep(Model_81_ice, S2, Node_1),
;                ep(Model_81_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_81_ice,
;                           S2,
;                           ep(Model_81_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_81_ice,
;                         S2,
;                         ep(Model_81_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_81_ice,
;                          Epoch_1,
;                          ep(Model_81_ice, S2, Node_1)),
;                       le(Model_81_ice,
;                          ep(Model_81_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_81_ice,
;                                S2,
;                                ep(Model_81_ice, S2, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_81_ice,
;                              S2,
;                              ep(Model_81_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_81_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_81_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_81_ice,
;                          Epoch_1,
;                          ep(Model_81_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_81_ice, S2, Node_1),
;                       Not(le(Model_81_ice,
;                              ep(Model_81_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_81_ice,
;                              Epoch_1,
;                              ep(Model_81_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Not(transfer(Model_81_ice,
;                                 S2,
;                                 Epoch_1,
;                                 Node_1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_81_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_81_ice () ModelId
;   ModelId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1))))
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_81_ice S1 Node!val!0 Node!val!0)
                (inv Model_81_ice S1 Node!val!0 Node!val!1)
                (inv Model_81_ice S1 Node!val!1 Node!val!0)
                (inv Model_81_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_81_ice S2 Node!val!0 Node!val!0)
           (inv Model_81_ice S2 Node!val!0 Node!val!1)
           (inv Model_81_ice S2 Node!val!1 Node!val!0)
           (inv Model_81_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15f2130>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_82_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_82_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_82_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_82_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_82_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_82_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_82_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_82_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_82_ice,
;                              zero(Model_82_ice),
;                              Epoch_1),
;                           one(Model_82_ice) !=
;                           zero(Model_82_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_82_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_82_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_82_ice, S1, Node_1),
;                le(Model_82_ice,
;                   ep(Model_82_ice, S1, Node_1),
;                   ep(Model_82_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_82_ice,
;                ep(Model_82_ice, S1, Node_1),
;                ep(Model_82_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_82_ice,
;                           S1,
;                           ep(Model_82_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_82_ice,
;                         S1,
;                         ep(Model_82_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_82_ice,
;                          Epoch_1,
;                          ep(Model_82_ice, S1, Node_1)),
;                       le(Model_82_ice,
;                          ep(Model_82_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_82_ice,
;                                S1,
;                                ep(Model_82_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_82_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_82_ice,
;                              S1,
;                              ep(Model_82_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_82_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_82_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_82_ice,
;                          Epoch_1,
;                          ep(Model_82_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_82_ice,
;                              Epoch_1,
;                              ep(Model_82_ice, S1, Node_1))),
;                       Not(le(Model_82_ice,
;                              ep(Model_82_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_82_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Not(locked(Model_82_ice, S1, Epoch_1, Node_1)))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_82_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_82_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_82_ice, S2, Node_1),
;                le(Model_82_ice,
;                   ep(Model_82_ice, S2, Node_1),
;                   ep(Model_82_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_82_ice,
;                ep(Model_82_ice, S2, Node_1),
;                ep(Model_82_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_82_ice,
;                           S2,
;                           ep(Model_82_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_82_ice,
;                         S2,
;                         ep(Model_82_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_82_ice,
;                          Epoch_1,
;                          ep(Model_82_ice, S2, Node_1)),
;                       le(Model_82_ice,
;                          ep(Model_82_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_82_ice,
;                                S2,
;                                ep(Model_82_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_82_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_82_ice,
;                              S2,
;                              ep(Model_82_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_82_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_82_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_82_ice,
;                          Epoch_1,
;                          ep(Model_82_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_82_ice, S2, Node_1),
;                       Not(le(Model_82_ice,
;                              Epoch_1,
;                              ep(Model_82_ice, S2, Node_1))),
;                       Not(le(Model_82_ice,
;                              ep(Model_82_ice, S2, Node_1),
;                              Epoch_1)))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Not(locked(Model_82_ice,
;                               S2,
;                               Epoch_1,
;                               Node_1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_82_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_82_ice,
;                                         S1,
;                                         Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_82_ice () ModelId
;   ModelId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!3
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;             Epoch!val!2
;             Epoch!val!0)))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_82_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_82_ice S1 Node!val!0 Node!val!0))
         (inv Model_82_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15c0e80>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_83_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_83_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_83_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_83_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_83_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_83_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_83_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_83_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_83_ice,
;                              zero(Model_83_ice),
;                              Epoch_1),
;                           one(Model_83_ice) !=
;                           zero(Model_83_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_83_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_83_ice, S1, Node_1),
;                le(Model_83_ice,
;                   ep(Model_83_ice, S1, Node_1),
;                   ep(Model_83_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_83_ice,
;                ep(Model_83_ice, S1, Node_1),
;                ep(Model_83_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_83_ice,
;                           S1,
;                           ep(Model_83_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_83_ice,
;                         S1,
;                         ep(Model_83_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_83_ice,
;                          ep(Model_83_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_83_ice,
;                          Epoch_1,
;                          ep(Model_83_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_83_ice,
;                                S1,
;                                ep(Model_83_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_83_ice,
;                              S1,
;                              ep(Model_83_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_83_ice,
;                          Epoch_1,
;                          ep(Model_83_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_83_ice, S1, Node_1),
;                       Not(le(Model_83_ice,
;                              Epoch_1,
;                              ep(Model_83_ice, S1, Node_1))),
;                       Not(le(Model_83_ice,
;                              ep(Model_83_ice, S1, Node_1),
;                              Epoch_1)))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(locked(Model_83_ice,
;                              S1,
;                              Epoch_1,
;                              Node_1)),
;                   held(Model_83_ice, S1, Node_1)))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_83_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_83_ice, S2, Node_1),
;                le(Model_83_ice,
;                   ep(Model_83_ice, S2, Node_1),
;                   ep(Model_83_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_83_ice,
;                ep(Model_83_ice, S2, Node_1),
;                ep(Model_83_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_83_ice,
;                           S2,
;                           ep(Model_83_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_83_ice,
;                         S2,
;                         ep(Model_83_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_83_ice,
;                          Epoch_1,
;                          ep(Model_83_ice, S2, Node_1)),
;                       le(Model_83_ice,
;                          ep(Model_83_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_83_ice,
;                                S2,
;                                ep(Model_83_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_83_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_83_ice,
;                              S2,
;                              ep(Model_83_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_83_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_83_ice,
;                          Epoch_1,
;                          ep(Model_83_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_83_ice,
;                              ep(Model_83_ice, S2, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_83_ice, S2, Node_1),
;                       Not(le(Model_83_ice,
;                              Epoch_1,
;                              ep(Model_83_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_83_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       held(Model_83_ice, S2, Node_1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_83_ice,
;                                         S1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_83_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
;        Epoch!val!4
;        Epoch!val!3))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_83_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_83_ice S1 Node!val!0 Node!val!0))
         (inv Model_83_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e14b4700>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_84_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_84_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_84_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_84_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_84_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_84_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_84_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_84_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_84_ice,
;                              zero(Model_84_ice),
;                              Epoch_1),
;                           one(Model_84_ice) !=
;                           zero(Model_84_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_84_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_84_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_84_ice, S1, Node_1),
;                le(Model_84_ice,
;                   ep(Model_84_ice, S1, Node_1),
;                   ep(Model_84_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_84_ice,
;                ep(Model_84_ice, S1, Node_1),
;                ep(Model_84_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_84_ice,
;                           S1,
;                           ep(Model_84_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_84_ice,
;                         S1,
;                         ep(Model_84_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_84_ice,
;                          ep(Model_84_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_84_ice,
;                          Epoch_1,
;                          ep(Model_84_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_84_ice,
;                                S1,
;                                ep(Model_84_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_84_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_84_ice,
;                              S1,
;                              ep(Model_84_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_84_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_84_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_84_ice,
;                          Epoch_1,
;                          ep(Model_84_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_84_ice,
;                              Epoch_1,
;                              ep(Model_84_ice, S1, Node_1))),
;                       Not(le(Model_84_ice,
;                              ep(Model_84_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_84_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_84_ice,
;                         S1,
;                         ep(Model_84_ice, S1, Node_1),
;                         Node_1)),
;            locked(Model_84_ice,
;                   S1,
;                   ep(Model_84_ice, S1, Node_1),
;                   Node_1))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_84_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_84_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_84_ice, S2, Node_1),
;                le(Model_84_ice,
;                   ep(Model_84_ice, S2, Node_1),
;                   ep(Model_84_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_84_ice,
;                ep(Model_84_ice, S2, Node_1),
;                ep(Model_84_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_84_ice,
;                           S2,
;                           ep(Model_84_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_84_ice,
;                         S2,
;                         ep(Model_84_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_84_ice,
;                          ep(Model_84_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_84_ice,
;                          Epoch_1,
;                          ep(Model_84_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_84_ice,
;                                S2,
;                                ep(Model_84_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_84_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_84_ice,
;                              S2,
;                              ep(Model_84_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_84_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_84_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_84_ice,
;                          Epoch_1,
;                          ep(Model_84_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_84_ice,
;                              ep(Model_84_ice, S2, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_84_ice, S2, Node_1),
;                       Not(le(Model_84_ice,
;                              Epoch_1,
;                              ep(Model_84_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             Or(Not(transfer(Model_84_ice,
;                             S2,
;                             ep(Model_84_ice, S2, Node_1),
;                             Node_1)),
;                locked(Model_84_ice,
;                       S2,
;                       ep(Model_84_ice, S2, Node_1),
;                       Node_1)))),
;  ForAll(Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_84_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!0)))
;                   Epoch!val!3
;                   Epoch!val!1)))
;   (let ((a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!0))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!0)))
;                   Epoch!val!2
;                   a!1)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!0)))
;          Epoch!val!3
;          a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_84_ice S1 Node!val!0 Node!val!0)
                (inv Model_84_ice S1 Node!val!0 Node!val!1)
                (inv Model_84_ice S1 Node!val!1 Node!val!0)
                (inv Model_84_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_84_ice S2 Node!val!0 Node!val!0)
           (inv Model_84_ice S2 Node!val!0 Node!val!1)
           (inv Model_84_ice S2 Node!val!1 Node!val!0)
           (inv Model_84_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e13da0d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_85_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_85_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_85_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_85_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_85_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_85_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_85_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_85_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_85_ice,
;                              zero(Model_85_ice),
;                              Epoch_1),
;                           one(Model_85_ice) !=
;                           zero(Model_85_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_85_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_85_ice, S1, Node_1),
;                le(Model_85_ice,
;                   ep(Model_85_ice, S1, Node_1),
;                   ep(Model_85_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_85_ice,
;                ep(Model_85_ice, S1, Node_1),
;                ep(Model_85_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_85_ice,
;                           S1,
;                           ep(Model_85_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_85_ice,
;                         S1,
;                         ep(Model_85_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_85_ice,
;                          Epoch_1,
;                          ep(Model_85_ice, S1, Node_1)),
;                       le(Model_85_ice,
;                          ep(Model_85_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_85_ice,
;                                S1,
;                                ep(Model_85_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_85_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_85_ice,
;                              S1,
;                              ep(Model_85_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_85_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_85_ice,
;                          Epoch_1,
;                          ep(Model_85_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_85_ice, S1, Node_1),
;                       Not(le(Model_85_ice,
;                              ep(Model_85_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_85_ice,
;                              Epoch_1,
;                              ep(Model_85_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(locked(Model_85_ice,
;                              S1,
;                              ep(Model_85_ice, S1, Node_1),
;                              Node_1)),
;                   le(Model_85_ice,
;                      Epoch_1,
;                      ep(Model_85_ice, S1, Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_85_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_85_ice, S2, Node_1),
;                le(Model_85_ice,
;                   ep(Model_85_ice, S2, Node_1),
;                   ep(Model_85_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_85_ice,
;                ep(Model_85_ice, S2, Node_1),
;                ep(Model_85_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_85_ice,
;                           S2,
;                           ep(Model_85_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_85_ice,
;                         S2,
;                         ep(Model_85_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_85_ice,
;                          ep(Model_85_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_85_ice,
;                          Epoch_1,
;                          ep(Model_85_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_85_ice,
;                                S2,
;                                ep(Model_85_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_85_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_85_ice,
;                              S2,
;                              ep(Model_85_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_85_ice,
;                          Epoch_1,
;                          ep(Model_85_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_85_ice, S2, Node_1),
;                       Not(le(Model_85_ice,
;                              ep(Model_85_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_85_ice,
;                              Epoch_1,
;                              ep(Model_85_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_85_ice,
;                                  S2,
;                                  ep(Model_85_ice,
;                                     S2,
;                                     Node_1),
;                                  Node_1)),
;                       le(Model_85_ice,
;                          Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_85_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;        Epoch!val!4
;        Epoch!val!3))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_85_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_85_ice S1 Node!val!0 Node!val!0))
         (inv Model_85_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e139f550>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_86_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_86_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_86_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_86_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_86_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_86_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_86_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_86_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_86_ice,
;                              zero(Model_86_ice),
;                              Epoch_1),
;                           one(Model_86_ice) !=
;                           zero(Model_86_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_86_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_86_ice, S1, Node_1),
;                le(Model_86_ice,
;                   ep(Model_86_ice, S1, Node_1),
;                   ep(Model_86_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_86_ice,
;                ep(Model_86_ice, S1, Node_1),
;                ep(Model_86_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_86_ice,
;                           S1,
;                           ep(Model_86_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_86_ice,
;                         S1,
;                         ep(Model_86_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_86_ice,
;                          Epoch_1,
;                          ep(Model_86_ice, S1, Node_1)),
;                       le(Model_86_ice,
;                          ep(Model_86_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_86_ice,
;                                S1,
;                                ep(Model_86_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_86_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_86_ice,
;                              S1,
;                              ep(Model_86_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_86_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_86_ice,
;                          Epoch_1,
;                          ep(Model_86_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_86_ice,
;                              ep(Model_86_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_86_ice, S1, Node_1),
;                       Not(le(Model_86_ice,
;                              Epoch_1,
;                              ep(Model_86_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(Or(Not(held(Model_86_ice, S1, Node_1)),
;                          transfer(Model_86_ice,
;                                   S1,
;                                   Epoch_1,
;                                   Node_1))),
;                   le(Model_86_ice,
;                      ep(Model_86_ice, S1, Node_1),
;                      Epoch_1)))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_86_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_86_ice, S2, Node_1),
;                le(Model_86_ice,
;                   ep(Model_86_ice, S2, Node_1),
;                   ep(Model_86_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_86_ice,
;                ep(Model_86_ice, S2, Node_1),
;                ep(Model_86_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_86_ice,
;                           S2,
;                           ep(Model_86_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_86_ice,
;                         S2,
;                         ep(Model_86_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_86_ice,
;                          Epoch_1,
;                          ep(Model_86_ice, S2, Node_1)),
;                       le(Model_86_ice,
;                          ep(Model_86_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_86_ice,
;                                S2,
;                                ep(Model_86_ice, S2, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_86_ice,
;                              S2,
;                              ep(Model_86_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_86_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_86_ice,
;                          Epoch_1,
;                          ep(Model_86_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_86_ice, S2, Node_1),
;                       Not(le(Model_86_ice,
;                              ep(Model_86_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_86_ice,
;                              Epoch_1,
;                              ep(Model_86_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(Or(Not(held(Model_86_ice,
;                                       S2,
;                                       Node_1)),
;                              transfer(Model_86_ice,
;                                       S2,
;                                       Epoch_1,
;                                       Node_1))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_86_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0))))))
;     (ite a!1 Epoch!val!4 Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_86_ice S1 Node!val!0 Node!val!0)
                (inv Model_86_ice S1 Node!val!0 Node!val!1)
                (inv Model_86_ice S1 Node!val!1 Node!val!0)
                (inv Model_86_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_86_ice S2 Node!val!0 Node!val!0)
           (inv Model_86_ice S2 Node!val!0 Node!val!1)
           (inv Model_86_ice S2 Node!val!1 Node!val!0)
           (inv Model_86_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15029a0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_87_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_87_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_87_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_87_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_87_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_87_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_87_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_87_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_87_ice,
;                              zero(Model_87_ice),
;                              Epoch_1),
;                           one(Model_87_ice) !=
;                           zero(Model_87_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_87_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_87_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_87_ice, S1, Node_1),
;                le(Model_87_ice,
;                   ep(Model_87_ice, S1, Node_1),
;                   ep(Model_87_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_87_ice,
;                ep(Model_87_ice, S1, Node_1),
;                ep(Model_87_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_87_ice,
;                           S1,
;                           ep(Model_87_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_87_ice,
;                         S1,
;                         ep(Model_87_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_87_ice,
;                          ep(Model_87_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_87_ice,
;                          Epoch_1,
;                          ep(Model_87_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_87_ice,
;                                S1,
;                                ep(Model_87_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_87_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_87_ice,
;                              S1,
;                              ep(Model_87_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_87_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_87_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_87_ice,
;                          Epoch_1,
;                          ep(Model_87_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_87_ice,
;                              ep(Model_87_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_87_ice, S1, Node_1),
;                       Not(le(Model_87_ice,
;                              Epoch_1,
;                              ep(Model_87_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(Or(Not(le(Model_87_ice,
;                                 Epoch_1,
;                                 Epoch_1)),
;                          locked(Model_87_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1))),
;                   ep(Model_87_ice, S1, Node_1) == Epoch_1))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_87_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_87_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_87_ice, S2, Node_1),
;                le(Model_87_ice,
;                   ep(Model_87_ice, S2, Node_1),
;                   ep(Model_87_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_87_ice,
;                ep(Model_87_ice, S2, Node_1),
;                ep(Model_87_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_87_ice,
;                           S2,
;                           ep(Model_87_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_87_ice,
;                         S2,
;                         ep(Model_87_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_87_ice,
;                          ep(Model_87_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_87_ice,
;                          Epoch_1,
;                          ep(Model_87_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_87_ice,
;                                S2,
;                                ep(Model_87_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_87_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_87_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_87_ice,
;                              S2,
;                              ep(Model_87_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_87_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_87_ice,
;                          Epoch_1,
;                          ep(Model_87_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_87_ice, S2, Node_1),
;                       Not(le(Model_87_ice,
;                              ep(Model_87_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_87_ice,
;                              Epoch_1,
;                              ep(Model_87_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(Or(Not(le(Model_87_ice,
;                                     Epoch_1,
;                                     Epoch_1)),
;                              locked(Model_87_ice,
;                                     S2,
;                                     Epoch_1,
;                                     Node_1))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_87_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!3
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;             Epoch!val!2
;             Epoch!val!1)))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_87_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_87_ice S1 Node!val!0 Node!val!0))
         (inv Model_87_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15821c0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_88_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_88_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_88_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_88_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_88_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_88_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_88_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_88_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_88_ice,
;                              zero(Model_88_ice),
;                              Epoch_1),
;                           one(Model_88_ice) !=
;                           zero(Model_88_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_88_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_88_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_88_ice, S1, Node_1),
;                le(Model_88_ice,
;                   ep(Model_88_ice, S1, Node_1),
;                   ep(Model_88_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_88_ice,
;                ep(Model_88_ice, S1, Node_1),
;                ep(Model_88_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_88_ice,
;                           S1,
;                           ep(Model_88_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_88_ice,
;                         S1,
;                         ep(Model_88_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_88_ice,
;                          Epoch_1,
;                          ep(Model_88_ice, S1, Node_1)),
;                       le(Model_88_ice,
;                          ep(Model_88_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_88_ice,
;                                S1,
;                                ep(Model_88_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_88_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_88_ice,
;                              S1,
;                              ep(Model_88_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_88_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_88_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_88_ice,
;                          Epoch_1,
;                          ep(Model_88_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_88_ice, S1, Node_1),
;                       Not(le(Model_88_ice,
;                              ep(Model_88_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_88_ice,
;                              Epoch_1,
;                              ep(Model_88_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(And(held(Model_88_ice, S1, Node_1),
;                           transfer(Model_88_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1))),
;                   le(Model_88_ice,
;                      Epoch_1,
;                      ep(Model_88_ice, S1, Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_88_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_88_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_88_ice, S2, Node_1),
;                le(Model_88_ice,
;                   ep(Model_88_ice, S2, Node_1),
;                   ep(Model_88_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_88_ice,
;                ep(Model_88_ice, S2, Node_1),
;                ep(Model_88_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_88_ice,
;                           S2,
;                           ep(Model_88_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_88_ice,
;                         S2,
;                         ep(Model_88_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_88_ice,
;                          Epoch_1,
;                          ep(Model_88_ice, S2, Node_1)),
;                       le(Model_88_ice,
;                          ep(Model_88_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_88_ice,
;                                S2,
;                                ep(Model_88_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_88_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_88_ice,
;                              S2,
;                              ep(Model_88_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_88_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_88_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_88_ice,
;                          Epoch_1,
;                          ep(Model_88_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_88_ice, S2, Node_1),
;                       Not(le(Model_88_ice,
;                              ep(Model_88_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_88_ice,
;                              Epoch_1,
;                              ep(Model_88_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(And(held(Model_88_ice, S2, Node_1),
;                               transfer(Model_88_ice,
;                                        S2,
;                                        Epoch_1,
;                                        Node_1))),
;                       le(Model_88_ice,
;                          Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_88_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
;        Epoch!val!4
;        Epoch!val!3))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_88_ice S1 Node!val!0 Node!val!0)
                (inv Model_88_ice S1 Node!val!0 Node!val!1)
                (inv Model_88_ice S1 Node!val!1 Node!val!0)
                (inv Model_88_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_88_ice S2 Node!val!0 Node!val!0)
           (inv Model_88_ice S2 Node!val!0 Node!val!1)
           (inv Model_88_ice S2 Node!val!1 Node!val!0)
           (inv Model_88_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15f25e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_89_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_89_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_89_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_89_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_89_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_89_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_89_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_89_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_89_ice,
;                              zero(Model_89_ice),
;                              Epoch_1),
;                           one(Model_89_ice) !=
;                           zero(Model_89_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_89_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_89_ice, S1, Node_1),
;                le(Model_89_ice,
;                   ep(Model_89_ice, S1, Node_1),
;                   ep(Model_89_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_89_ice,
;                ep(Model_89_ice, S1, Node_1),
;                ep(Model_89_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_89_ice,
;                           S1,
;                           ep(Model_89_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_89_ice,
;                         S1,
;                         ep(Model_89_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_89_ice,
;                          ep(Model_89_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_89_ice,
;                          Epoch_1,
;                          ep(Model_89_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_89_ice,
;                                S1,
;                                ep(Model_89_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_89_ice,
;                              S1,
;                              ep(Model_89_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_89_ice,
;                          Epoch_1,
;                          ep(Model_89_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_89_ice,
;                              ep(Model_89_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_89_ice, S1, Node_1),
;                       Not(le(Model_89_ice,
;                              Epoch_1,
;                              ep(Model_89_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                ForAll(Epoch_2,
;                       Or(Not(And(locked(Model_89_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                  locked(Model_89_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_1))),
;                          And(le(Model_89_ice,
;                                 Epoch_2,
;                                 Epoch_1),
;                              held(Model_89_ice, S1, Node_1)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_89_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_89_ice, S2, Node_1),
;                le(Model_89_ice,
;                   ep(Model_89_ice, S2, Node_1),
;                   ep(Model_89_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_89_ice,
;                ep(Model_89_ice, S2, Node_1),
;                ep(Model_89_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_89_ice,
;                           S2,
;                           ep(Model_89_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_89_ice,
;                         S2,
;                         ep(Model_89_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_89_ice,
;                          ep(Model_89_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_89_ice,
;                          Epoch_1,
;                          ep(Model_89_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_89_ice,
;                                S2,
;                                ep(Model_89_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_89_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_89_ice,
;                              S2,
;                              ep(Model_89_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_89_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_89_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_89_ice,
;                          Epoch_1,
;                          ep(Model_89_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_89_ice,
;                              ep(Model_89_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_89_ice,
;                              Epoch_1,
;                              ep(Model_89_ice, S2, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_89_ice, S2, Node_1))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    ForAll(Epoch_2,
;                           Or(Not(And(locked(Model_89_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_89_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0)))))
;         (a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!0))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!0)))
;                   Epoch!val!3
;                   Epoch!val!0)))
;     (ite a!1 Epoch!val!4 a!2)))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_89_ice S1 Node!val!0 Node!val!0)
                (inv Model_89_ice S1 Node!val!0 Node!val!1)
                (inv Model_89_ice S1 Node!val!1 Node!val!0)
                (inv Model_89_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_89_ice S2 Node!val!0 Node!val!0)
           (inv Model_89_ice S2 Node!val!0 Node!val!1)
           (inv Model_89_ice S2 Node!val!1 Node!val!0)
           (inv Model_89_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e13b0ca0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_90_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_90_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_90_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_90_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_90_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_90_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_90_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_90_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_90_ice,
;                              zero(Model_90_ice),
;                              Epoch_1),
;                           one(Model_90_ice) !=
;                           zero(Model_90_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_90_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_90_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_90_ice, S1, Node_1),
;                le(Model_90_ice,
;                   ep(Model_90_ice, S1, Node_1),
;                   ep(Model_90_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_90_ice,
;                ep(Model_90_ice, S1, Node_1),
;                ep(Model_90_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_90_ice,
;                           S1,
;                           ep(Model_90_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_90_ice,
;                         S1,
;                         ep(Model_90_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_90_ice,
;                          Epoch_1,
;                          ep(Model_90_ice, S1, Node_1)),
;                       le(Model_90_ice,
;                          ep(Model_90_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_90_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_90_ice,
;                                S1,
;                                ep(Model_90_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_90_ice,
;                              S1,
;                              ep(Model_90_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_90_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_90_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_90_ice,
;                          Epoch_1,
;                          ep(Model_90_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_90_ice,
;                              Epoch_1,
;                              ep(Model_90_ice, S1, Node_1))),
;                       Not(le(Model_90_ice,
;                              ep(Model_90_ice, S1, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_90_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                ForAll(Epoch_2,
;                       Or(Not(And(locked(Model_90_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                  transfer(Model_90_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_1))),
;                          Epoch_2 ==
;                          ep(Model_90_ice, S1, Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_90_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_90_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_90_ice, S2, Node_1),
;                le(Model_90_ice,
;                   ep(Model_90_ice, S2, Node_1),
;                   ep(Model_90_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_90_ice,
;                ep(Model_90_ice, S2, Node_1),
;                ep(Model_90_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_90_ice,
;                           S2,
;                           ep(Model_90_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_90_ice,
;                         S2,
;                         ep(Model_90_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_90_ice,
;                          ep(Model_90_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_90_ice,
;                          Epoch_1,
;                          ep(Model_90_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_90_ice,
;                                S2,
;                                ep(Model_90_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_90_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_90_ice,
;                              S2,
;                              ep(Model_90_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_90_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_90_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_90_ice,
;                          Epoch_1,
;                          ep(Model_90_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_90_ice, S2, Node_1),
;                       Not(le(Model_90_ice,
;                              ep(Model_90_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_90_ice,
;                              Epoch_1,
;                              ep(Model_90_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    ForAll(Epoch_2,
;                           Or(Not(And(locked(Model_90_ice,
;                                         S2,
;                                         Epoch_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_90_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!4
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1
;            Epoch!val!3
;            (ite (and (= x!0 ModelId!val!0)
;                      (= x!1 StateId!val!0)
;                      (= x!2 Node!val!1))
;                 Epoch!val!4
;                 Epoch!val!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_90_ice S1 Node!val!0 Node!val!0)
                (inv Model_90_ice S1 Node!val!0 Node!val!1)
                (inv Model_90_ice S1 Node!val!1 Node!val!0)
                (inv Model_90_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_90_ice S2 Node!val!0 Node!val!0)
           (inv Model_90_ice S2 Node!val!0 Node!val!1)
           (inv Model_90_ice S2 Node!val!1 Node!val!0)
           (inv Model_90_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e13daa00>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_91_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_91_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_91_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_91_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_91_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_91_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_91_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_91_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_91_ice,
;                              zero(Model_91_ice),
;                              Epoch_1),
;                           one(Model_91_ice) !=
;                           zero(Model_91_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_91_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_91_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_91_ice, S1, Node_1),
;                le(Model_91_ice,
;                   ep(Model_91_ice, S1, Node_1),
;                   ep(Model_91_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_91_ice,
;                ep(Model_91_ice, S1, Node_1),
;                ep(Model_91_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_91_ice,
;                           S1,
;                           ep(Model_91_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_91_ice,
;                         S1,
;                         ep(Model_91_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_91_ice,
;                          ep(Model_91_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_91_ice,
;                          Epoch_1,
;                          ep(Model_91_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_91_ice,
;                                S1,
;                                ep(Model_91_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_91_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_91_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_91_ice,
;                              S1,
;                              ep(Model_91_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_91_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_91_ice,
;                          Epoch_1,
;                          ep(Model_91_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_91_ice,
;                              Epoch_1,
;                              ep(Model_91_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_91_ice, S1, Node_1),
;                       Not(le(Model_91_ice,
;                              ep(Model_91_ice, S1, Node_1),
;                              Epoch_1)))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_91_ice,
;                         S1,
;                         ep(Model_91_ice, S1, Node_1),
;                         Node_1)),
;            locked(Model_91_ice,
;                   S1,
;                   ep(Model_91_ice, S1, Node_1),
;                   Node_1),
;            Not(Or(Not(le(Model_91_ice,
;                          ep(Model_91_ice, S1, Node_1),
;                          ep(Model_91_ice, S1, Node_1))),
;                   held(Model_91_ice, S1, Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_91_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_91_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_91_ice, S2, Node_1),
;                le(Model_91_ice,
;                   ep(Model_91_ice, S2, Node_1),
;                   ep(Model_91_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_91_ice,
;                ep(Model_91_ice, S2, Node_1),
;                ep(Model_91_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_91_ice,
;                           S2,
;                           ep(Model_91_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_91_ice,
;                         S2,
;                         ep(Model_91_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_91_ice,
;                          Epoch_1,
;                          ep(Model_91_ice, S2, Node_1)),
;                       le(Model_91_ice,
;                          ep(Model_91_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_91_ice,
;                                S2,
;                                ep(Model_91_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_91_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_91_ice,
;                              S2,
;                              ep(Model_91_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_91_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_91_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_91_ice,
;                          Epoch_1,
;                          ep(Model_91_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_91_ice,
;                              ep(Model_91_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_91_ice,
;                              Epoch_1,
;                              ep(Model_91_ice, S2, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_91_ice, S2, Node_1))))),
;  Not(ForAll(Node_1,
;             Or(Not(transfer(Model_91_ice,
;                             S2,
;                             ep(Model_91_ice, S2, Node_1),
;                             Node_1)),
;                Not(Or(Not(le(Model_91_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_91_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!2
;        Epoch!val!3))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!0))
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_91_ice S1 Node!val!0 Node!val!0)
                (inv Model_91_ice S1 Node!val!0 Node!val!1)
                (inv Model_91_ice S1 Node!val!1 Node!val!0)
                (inv Model_91_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_91_ice S2 Node!val!0 Node!val!0)
           (inv Model_91_ice S2 Node!val!0 Node!val!1)
           (inv Model_91_ice S2 Node!val!1 Node!val!0)
           (inv Model_91_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15890a0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_92_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_92_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_92_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_92_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_92_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_92_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_92_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_92_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_92_ice,
;                              zero(Model_92_ice),
;                              Epoch_1),
;                           one(Model_92_ice) !=
;                           zero(Model_92_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_92_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_92_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_92_ice, S1, Node_1),
;                le(Model_92_ice,
;                   ep(Model_92_ice, S1, Node_1),
;                   ep(Model_92_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_92_ice,
;                ep(Model_92_ice, S1, Node_1),
;                ep(Model_92_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_92_ice,
;                           S1,
;                           ep(Model_92_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_92_ice,
;                         S1,
;                         ep(Model_92_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_92_ice,
;                          ep(Model_92_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_92_ice,
;                          Epoch_1,
;                          ep(Model_92_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_92_ice,
;                                S1,
;                                ep(Model_92_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_92_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_92_ice,
;                              S1,
;                              ep(Model_92_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_92_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_92_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_92_ice,
;                          Epoch_1,
;                          ep(Model_92_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_92_ice, S1, Node_1),
;                       Not(le(Model_92_ice,
;                              ep(Model_92_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_92_ice,
;                              Epoch_1,
;                              ep(Model_92_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                And(Or(Not(held(Model_92_ice, S1, Node_2)),
;                       le(Model_92_ice,
;                          ep(Model_92_ice, S1, Node_1),
;                          ep(Model_92_ice, S1, Node_2))),
;                    Or(Not(transfer(Model_92_ice,
;                                    S1,
;                                    ep(Model_92_ice,
;                                       S1,
;                                       Node_1),
;                                    Node_1)),
;                       locked(Model_92_ice,
;                              S1,
;                              ep(Model_92_ice, S1, Node_2),
;                              Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_92_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_92_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_92_ice, S2, Node_1),
;                le(Model_92_ice,
;                   ep(Model_92_ice, S2, Node_1),
;                   ep(Model_92_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_92_ice,
;                ep(Model_92_ice, S2, Node_1),
;                ep(Model_92_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_92_ice,
;                           S2,
;                           ep(Model_92_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_92_ice,
;                         S2,
;                         ep(Model_92_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_92_ice,
;                          ep(Model_92_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_92_ice,
;                          Epoch_1,
;                          ep(Model_92_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_92_ice,
;                                S2,
;                                ep(Model_92_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_92_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_92_ice,
;                              S2,
;                              ep(Model_92_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_92_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_92_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_92_ice,
;                          Epoch_1,
;                          ep(Model_92_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_92_ice, S2, Node_1),
;                       Not(le(Model_92_ice,
;                              ep(Model_92_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_92_ice,
;                              Epoch_1,
;                              ep(Model_92_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Node_2,
;                    And(Or(Not(held(Model_92_ice, S2, Node_2)),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_92_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!4)
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!4
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!0
;     Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_92_ice S1 Node!val!0 Node!val!0)
                (inv Model_92_ice S1 Node!val!0 Node!val!1)
                (inv Model_92_ice S1 Node!val!1 Node!val!0)
                (inv Model_92_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_92_ice S2 Node!val!0 Node!val!0)
           (inv Model_92_ice S2 Node!val!0 Node!val!1)
           (inv Model_92_ice S2 Node!val!1 Node!val!0)
           (inv Model_92_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e1541250>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_93_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_93_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_93_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_93_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_93_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_93_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_93_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_93_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_93_ice,
;                              zero(Model_93_ice),
;                              Epoch_1),
;                           one(Model_93_ice) !=
;                           zero(Model_93_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_93_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_93_ice, S1, Node_1),
;                le(Model_93_ice,
;                   ep(Model_93_ice, S1, Node_1),
;                   ep(Model_93_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_93_ice,
;                ep(Model_93_ice, S1, Node_1),
;                ep(Model_93_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_93_ice,
;                           S1,
;                           ep(Model_93_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_93_ice,
;                         S1,
;                         ep(Model_93_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_93_ice,
;                          Epoch_1,
;                          ep(Model_93_ice, S1, Node_1)),
;                       le(Model_93_ice,
;                          ep(Model_93_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_93_ice,
;                                S1,
;                                ep(Model_93_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_93_ice,
;                              S1,
;                              ep(Model_93_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_93_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_93_ice,
;                          Epoch_1,
;                          ep(Model_93_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_93_ice,
;                              ep(Model_93_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_93_ice,
;                              Epoch_1,
;                              ep(Model_93_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_93_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(Not(le(Model_93_ice,
;                          ep(Model_93_ice, S1, Node_1),
;                          ep(Model_93_ice, S1, Node_2))),
;                   locked(Model_93_ice,
;                          S1,
;                          ep(Model_93_ice, S1, Node_1),
;                          Node_1),
;                   Not(Or(Not(Or(Not(held(Model_93_ice,
;                                         S1,
;                                         Node_1)),
;                                 Node_2 == Node_1)),
;                          transfer(Model_93_ice,
;                                   S1,
;                                   ep(Model_93_ice,
;                                      S1,
;                                      Node_1),
;                                   Node_2)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_93_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_93_ice, S2, Node_1),
;                le(Model_93_ice,
;                   ep(Model_93_ice, S2, Node_1),
;                   ep(Model_93_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_93_ice,
;                ep(Model_93_ice, S2, Node_1),
;                ep(Model_93_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_93_ice,
;                           S2,
;                           ep(Model_93_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_93_ice,
;                         S2,
;                         ep(Model_93_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_93_ice,
;                          ep(Model_93_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_93_ice,
;                          Epoch_1,
;                          ep(Model_93_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_93_ice,
;                                S2,
;                                ep(Model_93_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_93_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_93_ice,
;                              S2,
;                              ep(Model_93_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_93_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_93_ice,
;                          Epoch_1,
;                          ep(Model_93_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_93_ice,
;                              Epoch_1,
;                              ep(Model_93_ice, S2, Node_1))),
;                       Not(le(Model_93_ice,
;                              ep(Model_93_ice, S2, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_93_ice, S2, Node_1))))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_93_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!2))
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   Epoch!val!1)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (= x!2 Node!val!2)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   a!1)))
;   (let ((a!3 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!2
;                   a!2)))
;   (let ((a!4 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!2))
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   a!3)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (= x!2 Node!val!2)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          a!4))))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_93_ice S1 Node!val!0 Node!val!0)
                (inv Model_93_ice S1 Node!val!0 Node!val!1)
                (inv Model_93_ice S1 Node!val!0 Node!val!2)
                (inv Model_93_ice S1 Node!val!1 Node!val!0)
                (inv Model_93_ice S1 Node!val!1 Node!val!1)
                (inv Model_93_ice S1 Node!val!1 Node!val!2)
                (inv Model_93_ice S1 Node!val!2 Node!val!0)
                (inv Model_93_ice S1 Node!val!2 Node!val!1)
                (inv Model_93_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_93_ice S2 Node!val!0 Node!val!0)
           (inv Model_93_ice S2 Node!val!0 Node!val!1)
           (inv Model_93_ice S2 Node!val!0 Node!val!2)
           (inv Model_93_ice S2 Node!val!1 Node!val!0)
           (inv Model_93_ice S2 Node!val!1 Node!val!1)
           (inv Model_93_ice S2 Node!val!1 Node!val!2)
           (inv Model_93_ice S2 Node!val!2 Node!val!0)
           (inv Model_93_ice S2 Node!val!2 Node!val!1)
           (inv Model_93_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e13cecd0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_94_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_94_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_94_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_94_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_94_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_94_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_94_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_94_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_94_ice,
;                              zero(Model_94_ice),
;                              Epoch_1),
;                           one(Model_94_ice) !=
;                           zero(Model_94_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_94_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_94_ice, S1, Node_1),
;                le(Model_94_ice,
;                   ep(Model_94_ice, S1, Node_1),
;                   ep(Model_94_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_94_ice,
;                ep(Model_94_ice, S1, Node_1),
;                ep(Model_94_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_94_ice,
;                           S1,
;                           ep(Model_94_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_94_ice,
;                         S1,
;                         ep(Model_94_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_94_ice,
;                          ep(Model_94_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_94_ice,
;                          Epoch_1,
;                          ep(Model_94_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_94_ice,
;                                S1,
;                                ep(Model_94_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_94_ice,
;                              S1,
;                              ep(Model_94_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_94_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_94_ice,
;                          Epoch_1,
;                          ep(Model_94_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_94_ice,
;                              Epoch_1,
;                              ep(Model_94_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_94_ice, S1, Node_1),
;                       Not(le(Model_94_ice,
;                              ep(Model_94_ice, S1, Node_1),
;                              Epoch_1)))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(Not(le(Model_94_ice,
;                          ep(Model_94_ice, S1, Node_2),
;                          ep(Model_94_ice, S1, Node_1))),
;                   locked(Model_94_ice,
;                          S1,
;                          ep(Model_94_ice, S1, Node_2),
;                          Node_2),
;                   Not(Or(Not(Or(Not(held(Model_94_ice,
;                                         S1,
;                                         Node_2)),
;                                 Node_1 == Node_2)),
;                          transfer(Model_94_ice,
;                                   S1,
;                                   ep(Model_94_ice,
;                                      S1,
;                                      Node_1),
;                                   Node_1)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_94_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_94_ice, S2, Node_1),
;                le(Model_94_ice,
;                   ep(Model_94_ice, S2, Node_1),
;                   ep(Model_94_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_94_ice,
;                ep(Model_94_ice, S2, Node_1),
;                ep(Model_94_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_94_ice,
;                           S2,
;                           ep(Model_94_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_94_ice,
;                         S2,
;                         ep(Model_94_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_94_ice,
;                          ep(Model_94_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_94_ice,
;                          Epoch_1,
;                          ep(Model_94_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_94_ice,
;                                S2,
;                                ep(Model_94_ice, S2, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_94_ice,
;                              S2,
;                              ep(Model_94_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_94_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_94_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_94_ice,
;                          Epoch_1,
;                          ep(Model_94_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_94_ice, S2, Node_1),
;                       Not(le(Model_94_ice,
;                              ep(Model_94_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_94_ice,
;                              Epoch_1,
;                              ep(Model_94_ice, S2, Node_1))))))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_94_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!2))
;     Epoch!val!4
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (= x!2 Node!val!1)
;                         (not (= x!2 Node!val!2)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (= x!2 Node!val!1)
;                         (not (= x!2 Node!val!2)))))
;           (a!2 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!1))
;                          (not (= x!2 Node!val!2)))
;                     Epoch!val!3
;                     Epoch!val!1)))
;     (let ((a!3 (ite a!1
;                     Epoch!val!2
;                     (ite (and (= x!0 ModelId!val!0)
;                               (= x!1 StateId!val!0)
;                               (= x!2 Node!val!2))
;                          Epoch!val!4
;                          a!2))))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!1))
;                 (not (= x!2 Node!val!2)))
;            Epoch!val!3
;            a!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_94_ice S1 Node!val!0 Node!val!0)
                (inv Model_94_ice S1 Node!val!0 Node!val!1)
                (inv Model_94_ice S1 Node!val!0 Node!val!2)
                (inv Model_94_ice S1 Node!val!1 Node!val!0)
                (inv Model_94_ice S1 Node!val!1 Node!val!1)
                (inv Model_94_ice S1 Node!val!1 Node!val!2)
                (inv Model_94_ice S1 Node!val!2 Node!val!0)
                (inv Model_94_ice S1 Node!val!2 Node!val!1)
                (inv Model_94_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_94_ice S2 Node!val!0 Node!val!0)
           (inv Model_94_ice S2 Node!val!0 Node!val!1)
           (inv Model_94_ice S2 Node!val!0 Node!val!2)
           (inv Model_94_ice S2 Node!val!1 Node!val!0)
           (inv Model_94_ice S2 Node!val!1 Node!val!1)
           (inv Model_94_ice S2 Node!val!1 Node!val!2)
           (inv Model_94_ice S2 Node!val!2 Node!val!0)
           (inv Model_94_ice S2 Node!val!2 Node!val!1)
           (inv Model_94_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e1588610>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_95_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_95_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_95_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_95_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_95_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_95_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_95_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_95_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_95_ice,
;                              zero(Model_95_ice),
;                              Epoch_1),
;                           one(Model_95_ice) !=
;                           zero(Model_95_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_95_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_95_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_95_ice, S1, Node_1),
;                le(Model_95_ice,
;                   ep(Model_95_ice, S1, Node_1),
;                   ep(Model_95_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_95_ice,
;                ep(Model_95_ice, S1, Node_1),
;                ep(Model_95_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_95_ice,
;                           S1,
;                           ep(Model_95_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_95_ice,
;                         S1,
;                         ep(Model_95_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_95_ice,
;                          Epoch_1,
;                          ep(Model_95_ice, S1, Node_1)),
;                       le(Model_95_ice,
;                          ep(Model_95_ice, S1, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_95_ice,
;                                S1,
;                                ep(Model_95_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_95_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_95_ice,
;                              S1,
;                              ep(Model_95_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_95_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_95_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_95_ice,
;                          Epoch_1,
;                          ep(Model_95_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_95_ice,
;                              ep(Model_95_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_95_ice,
;                              Epoch_1,
;                              ep(Model_95_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_95_ice, S1, Node_1))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(Not(Or(Not(held(Model_95_ice, S1, Node_1)),
;                          held(Model_95_ice, S1, Node_2))),
;                   locked(Model_95_ice,
;                          S1,
;                          ep(Model_95_ice, S1, Node_1),
;                          Node_1),
;                   Not(Or(Not(le(Model_95_ice,
;                                 ep(Model_95_ice, S1, Node_1),
;                                 ep(Model_95_ice, S1, Node_2))),
;                          transfer(Model_95_ice,
;                                   S1,
;                                   ep(Model_95_ice,
;                                      S1,
;                                      Node_1),
;                                   Node_2)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_95_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_95_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_95_ice, S2, Node_1),
;                le(Model_95_ice,
;                   ep(Model_95_ice, S2, Node_1),
;                   ep(Model_95_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_95_ice,
;                ep(Model_95_ice, S2, Node_1),
;                ep(Model_95_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_95_ice,
;                           S2,
;                           ep(Model_95_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_95_ice,
;                         S2,
;                         ep(Model_95_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_95_ice,
;                          ep(Model_95_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_95_ice,
;                          Epoch_1,
;                          ep(Model_95_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_95_ice,
;                                S2,
;                                ep(Model_95_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_95_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_95_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_95_ice,
;                              S2,
;                              ep(Model_95_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_95_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_95_ice,
;                          Epoch_1,
;                          ep(Model_95_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_95_ice,
;                              Epoch_1,
;                              ep(Model_95_ice, S2, Node_1))),
;                       Not(le(Model_95_ice,
;                              ep(Model_95_ice, S2, Node_1),
;                              Epoch_1)),
;                       Epoch_1 ==
;                       ep(Model_95_ice, S2, Node_1))))),
;  Not(ForAll(Node_1,
;             ForAll(Node_2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!5 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_95_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!2))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!2)))
;          Epoch!val!5
;          (ite a!1 Epoch!val!4 Epoch!val!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_95_ice S1 Node!val!0 Node!val!0)
                (inv Model_95_ice S1 Node!val!0 Node!val!1)
                (inv Model_95_ice S1 Node!val!0 Node!val!2)
                (inv Model_95_ice S1 Node!val!1 Node!val!0)
                (inv Model_95_ice S1 Node!val!1 Node!val!1)
                (inv Model_95_ice S1 Node!val!1 Node!val!2)
                (inv Model_95_ice S1 Node!val!2 Node!val!0)
                (inv Model_95_ice S1 Node!val!2 Node!val!1)
                (inv Model_95_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_95_ice S2 Node!val!0 Node!val!0)
           (inv Model_95_ice S2 Node!val!0 Node!val!1)
           (inv Model_95_ice S2 Node!val!0 Node!val!2)
           (inv Model_95_ice S2 Node!val!1 Node!val!0)
           (inv Model_95_ice S2 Node!val!1 Node!val!1)
           (inv Model_95_ice S2 Node!val!1 Node!val!2)
           (inv Model_95_ice S2 Node!val!2 Node!val!0)
           (inv Model_95_ice S2 Node!val!2 Node!val!1)
           (inv Model_95_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2f7b03790>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_96_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_96_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_96_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_96_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_96_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_96_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_96_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_96_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_96_ice,
;                              zero(Model_96_ice),
;                              Epoch_1),
;                           one(Model_96_ice) !=
;                           zero(Model_96_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_96_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_96_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_96_ice, S1, Node_1),
;                le(Model_96_ice,
;                   ep(Model_96_ice, S1, Node_1),
;                   ep(Model_96_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_96_ice,
;                ep(Model_96_ice, S1, Node_1),
;                ep(Model_96_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_96_ice,
;                           S1,
;                           ep(Model_96_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_96_ice,
;                         S1,
;                         ep(Model_96_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_96_ice,
;                          ep(Model_96_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_96_ice,
;                          Epoch_1,
;                          ep(Model_96_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_96_ice,
;                                S1,
;                                ep(Model_96_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_96_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_96_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_96_ice,
;                              S1,
;                              ep(Model_96_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_96_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_96_ice,
;                          Epoch_1,
;                          ep(Model_96_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_96_ice, S1, Node_1),
;                       Not(le(Model_96_ice,
;                              ep(Model_96_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_96_ice,
;                              Epoch_1,
;                              ep(Model_96_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                And(Or(Not(Or(Not(held(Model_96_ice,
;                                       S1,
;                                       Node_2)),
;                              held(Model_96_ice, S1, Node_1))),
;                       le(Model_96_ice,
;                          ep(Model_96_ice, S1, Node_2),
;                          ep(Model_96_ice, S1, Node_1))),
;                    Or(Not(transfer(Model_96_ice,
;                                    S1,
;                                    ep(Model_96_ice,
;                                       S1,
;                                       Node_1),
;                                    Node_1)),
;                       locked(Model_96_ice,
;                              S1,
;                              ep(Model_96_ice, S1, Node_2),
;                              Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_96_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_96_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_96_ice, S2, Node_1),
;                le(Model_96_ice,
;                   ep(Model_96_ice, S2, Node_1),
;                   ep(Model_96_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_96_ice,
;                ep(Model_96_ice, S2, Node_1),
;                ep(Model_96_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_96_ice,
;                           S2,
;                           ep(Model_96_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_96_ice,
;                         S2,
;                         ep(Model_96_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_96_ice,
;                          Epoch_1,
;                          ep(Model_96_ice, S2, Node_1)),
;                       le(Model_96_ice,
;                          ep(Model_96_ice, S2, Node_1),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_96_ice,
;                                S2,
;                                ep(Model_96_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_96_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_96_ice,
;                              S2,
;                              ep(Model_96_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_96_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_96_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_96_ice,
;                          Epoch_1,
;                          ep(Model_96_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_96_ice,
;                              ep(Model_96_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_96_ice,
;                              Epoch_1,
;                              ep(Model_96_ice, S2, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_96_ice, S2, Node_1))))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_96_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))))
;         (a!3 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!4
;                   Epoch!val!3)))
;     (ite a!1 Epoch!val!4 (ite a!2 Epoch!val!1 a!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_96_ice S1 Node!val!0 Node!val!0)
                (inv Model_96_ice S1 Node!val!0 Node!val!1)
                (inv Model_96_ice S1 Node!val!0 Node!val!2)
                (inv Model_96_ice S1 Node!val!1 Node!val!0)
                (inv Model_96_ice S1 Node!val!1 Node!val!1)
                (inv Model_96_ice S1 Node!val!1 Node!val!2)
                (inv Model_96_ice S1 Node!val!2 Node!val!0)
                (inv Model_96_ice S1 Node!val!2 Node!val!1)
                (inv Model_96_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_96_ice S2 Node!val!0 Node!val!0)
           (inv Model_96_ice S2 Node!val!0 Node!val!1)
           (inv Model_96_ice S2 Node!val!0 Node!val!2)
           (inv Model_96_ice S2 Node!val!1 Node!val!0)
           (inv Model_96_ice S2 Node!val!1 Node!val!1)
           (inv Model_96_ice S2 Node!val!1 Node!val!2)
           (inv Model_96_ice S2 Node!val!2 Node!val!0)
           (inv Model_96_ice S2 Node!val!2 Node!val!1)
           (inv Model_96_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e1572040>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_97_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_97_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_97_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_97_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_97_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_97_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_97_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_97_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_97_ice,
;                              zero(Model_97_ice),
;                              Epoch_1),
;                           one(Model_97_ice) !=
;                           zero(Model_97_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_97_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_97_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_97_ice, S1, Node_1),
;                le(Model_97_ice,
;                   ep(Model_97_ice, S1, Node_1),
;                   ep(Model_97_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_97_ice,
;                ep(Model_97_ice, S1, Node_1),
;                ep(Model_97_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_97_ice,
;                           S1,
;                           ep(Model_97_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_97_ice,
;                         S1,
;                         ep(Model_97_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_97_ice,
;                          ep(Model_97_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_97_ice,
;                          Epoch_1,
;                          ep(Model_97_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_97_ice,
;                                S1,
;                                ep(Model_97_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_97_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_97_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_97_ice,
;                              S1,
;                              ep(Model_97_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_97_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_97_ice,
;                          Epoch_1,
;                          ep(Model_97_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_97_ice,
;                              Epoch_1,
;                              ep(Model_97_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_97_ice, S1, Node_1),
;                       Not(le(Model_97_ice,
;                              ep(Model_97_ice, S1, Node_1),
;                              Epoch_1)))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(locked(Model_97_ice,
;                          S1,
;                          ep(Model_97_ice, S1, Node_2),
;                          Node_2),
;                   Not(Or(Not(Or(Not(held(Model_97_ice,
;                                         S1,
;                                         Node_2)),
;                                 Node_2 == Node_1)),
;                          transfer(Model_97_ice,
;                                   S1,
;                                   ep(Model_97_ice,
;                                      S1,
;                                      Node_2),
;                                   Node_1))),
;                   Not(held(Model_97_ice, S1, Node_1))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_97_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_97_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_97_ice, S2, Node_1),
;                le(Model_97_ice,
;                   ep(Model_97_ice, S2, Node_1),
;                   ep(Model_97_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_97_ice,
;                ep(Model_97_ice, S2, Node_1),
;                ep(Model_97_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_97_ice,
;                           S2,
;                           ep(Model_97_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_97_ice,
;                         S2,
;                         ep(Model_97_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_97_ice,
;                          ep(Model_97_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_97_ice,
;                          Epoch_1,
;                          ep(Model_97_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_97_ice,
;                                S2,
;                                ep(Model_97_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_97_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_97_ice,
;                              S2,
;                              ep(Model_97_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_97_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_97_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_97_ice,
;                          Epoch_1,
;                          ep(Model_97_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_97_ice, S2, Node_1),
;                       Not(le(Model_97_ice,
;                              ep(Model_97_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_97_ice,
;                              Epoch_1,
;                              ep(Model_97_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Node_2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_97_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!2))
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   Epoch!val!1)))
;   (let ((a!3 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!2
;                   a!2)))
;   (let ((a!4 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!2))
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   a!3)))
;     (ite a!1 Epoch!val!4 a!4)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!2)
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Node!val!2)
;            (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_97_ice S1 Node!val!0 Node!val!0)
                (inv Model_97_ice S1 Node!val!0 Node!val!1)
                (inv Model_97_ice S1 Node!val!0 Node!val!2)
                (inv Model_97_ice S1 Node!val!1 Node!val!0)
                (inv Model_97_ice S1 Node!val!1 Node!val!1)
                (inv Model_97_ice S1 Node!val!1 Node!val!2)
                (inv Model_97_ice S1 Node!val!2 Node!val!0)
                (inv Model_97_ice S1 Node!val!2 Node!val!1)
                (inv Model_97_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_97_ice S2 Node!val!0 Node!val!0)
           (inv Model_97_ice S2 Node!val!0 Node!val!1)
           (inv Model_97_ice S2 Node!val!0 Node!val!2)
           (inv Model_97_ice S2 Node!val!1 Node!val!0)
           (inv Model_97_ice S2 Node!val!1 Node!val!1)
           (inv Model_97_ice S2 Node!val!1 Node!val!2)
           (inv Model_97_ice S2 Node!val!2 Node!val!0)
           (inv Model_97_ice S2 Node!val!2 Node!val!1)
           (inv Model_97_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2e15f2730>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_98_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_98_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_98_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_98_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_98_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_98_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_98_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_98_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_98_ice,
;                              zero(Model_98_ice),
;                              Epoch_1),
;                           one(Model_98_ice) !=
;                           zero(Model_98_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_98_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_98_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_98_ice, S1, Node_1),
;                le(Model_98_ice,
;                   ep(Model_98_ice, S1, Node_1),
;                   ep(Model_98_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_98_ice,
;                ep(Model_98_ice, S1, Node_1),
;                ep(Model_98_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_98_ice,
;                           S1,
;                           ep(Model_98_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_98_ice,
;                         S1,
;                         ep(Model_98_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_98_ice,
;                          ep(Model_98_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_98_ice,
;                          Epoch_1,
;                          ep(Model_98_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_98_ice,
;                                S1,
;                                ep(Model_98_ice, S1, Node_1),
;                                Node_1),
;                       Not(locked(Model_98_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_98_ice,
;                              S1,
;                              ep(Model_98_ice, S1, Node_1),
;                              Node_1),
;                       Not(locked(Model_98_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_98_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_98_ice,
;                          Epoch_1,
;                          ep(Model_98_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_98_ice,
;                              Epoch_1,
;                              ep(Model_98_ice, S1, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_98_ice, S1, Node_1),
;                       Not(le(Model_98_ice,
;                              ep(Model_98_ice, S1, Node_1),
;                              Epoch_1)))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(Not(And(held(Model_98_ice, S1, Node_1),
;                           held(Model_98_ice, S1, Node_2))),
;                   locked(Model_98_ice,
;                          S1,
;                          ep(Model_98_ice, S1, Node_2),
;                          Node_1),
;                   Not(Or(Not(Node_1 == Node_2),
;                          transfer(Model_98_ice,
;                                   S1,
;                                   ep(Model_98_ice,
;                                      S1,
;                                      Node_1),
;                                   Node_1)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_98_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_98_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_98_ice, S2, Node_1),
;                le(Model_98_ice,
;                   ep(Model_98_ice, S2, Node_1),
;                   ep(Model_98_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_98_ice,
;                ep(Model_98_ice, S2, Node_1),
;                ep(Model_98_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_98_ice,
;                           S2,
;                           ep(Model_98_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_98_ice,
;                         S2,
;                         ep(Model_98_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_98_ice,
;                          ep(Model_98_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_98_ice,
;                          Epoch_1,
;                          ep(Model_98_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(transfer(Model_98_ice,
;                                S2,
;                                ep(Model_98_ice, S2, Node_1),
;                                Node_1),
;                       Not(locked(Model_98_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(locked(Model_98_ice,
;                              S2,
;                              ep(Model_98_ice, S2, Node_1),
;                              Node_1),
;                       Not(locked(Model_98_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_98_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_98_ice,
;                          Epoch_1,
;                          ep(Model_98_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_98_ice, S2, Node_1),
;                       Not(le(Model_98_ice,
;                              ep(Model_98_ice, S2, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_98_ice,
;                              Epoch_1,
;                              ep(Model_98_ice, S2, Node_1))))))),
;  Not(ForAll(Node_1,
;             ForAll(Node_2,
;                    Or(locked(Model_98_ice,
;                              S2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_98_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!3)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!1)
;                    (= x!2 Node!val!1))
;               Epoch!val!2
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!4))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_98_ice S1 Node!val!0 Node!val!0)
                (inv Model_98_ice S1 Node!val!0 Node!val!1)
                (inv Model_98_ice S1 Node!val!1 Node!val!0)
                (inv Model_98_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_98_ice S2 Node!val!0 Node!val!0)
           (inv Model_98_ice S2 Node!val!0 Node!val!1)
           (inv Model_98_ice S2 Node!val!1 Node!val!0)
           (inv Model_98_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fe2f7b18640>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_99_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_99_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_99_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_99_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_99_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_99_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_99_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_99_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_99_ice,
;                              zero(Model_99_ice),
;                              Epoch_1),
;                           one(Model_99_ice) !=
;                           zero(Model_99_ice))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_99_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_99_ice, S1, Node_1),
;                le(Model_99_ice,
;                   ep(Model_99_ice, S1, Node_1),
;                   ep(Model_99_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             le(Model_99_ice,
;                ep(Model_99_ice, S1, Node_1),
;                ep(Model_99_ice, S1, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_99_ice,
;                           S1,
;                           ep(Model_99_ice, S1, Node_1),
;                           Node_1)),
;                transfer(Model_99_ice,
;                         S1,
;                         ep(Model_99_ice, S1, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_99_ice,
;                          ep(Model_99_ice, S1, Node_1),
;                          Epoch_1),
;                       le(Model_99_ice,
;                          Epoch_1,
;                          ep(Model_99_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_99_ice,
;                                S1,
;                                ep(Model_99_ice, S1, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_99_ice,
;                              S1,
;                              ep(Model_99_ice, S1, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_99_ice,
;                          Epoch_1,
;                          ep(Model_99_ice, S1, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Epoch_1 ==
;                       ep(Model_99_ice, S1, Node_1),
;                       Not(le(Model_99_ice,
;                              ep(Model_99_ice, S1, Node_1),
;                              Epoch_1)),
;                       Not(le(Model_99_ice,
;                              Epoch_1,
;                              ep(Model_99_ice, S1, Node_1))))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(locked(Model_99_ice,
;                          S1,
;                          ep(Model_99_ice, S1, Node_2),
;                          Node_2),
;                   Not(held(Model_99_ice, S1, Node_2)),
;                   Not(Or(Not(le(Model_99_ice,
;                                 ep(Model_99_ice, S1, Node_1),
;                                 ep(Model_99_ice, S1, Node_2))),
;                          transfer(Model_99_ice,
;                                   S1,
;                                   ep(Model_99_ice,
;                                      S1,
;                                      Node_2),
;                                   Node_1)))))),
;  And(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_99_ice,
;                                S2,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Or(held(Model_99_ice, S2, Node_1),
;                le(Model_99_ice,
;                   ep(Model_99_ice, S2, Node_1),
;                   ep(Model_99_ice, S2, Node_1)))),
;      ForAll(Node_1,
;             le(Model_99_ice,
;                ep(Model_99_ice, S2, Node_1),
;                ep(Model_99_ice, S2, Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_99_ice,
;                           S2,
;                           ep(Model_99_ice, S2, Node_1),
;                           Node_1)),
;                transfer(Model_99_ice,
;                         S2,
;                         ep(Model_99_ice, S2, Node_1),
;                         Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(le(Model_99_ice,
;                          ep(Model_99_ice, S2, Node_1),
;                          Epoch_1),
;                       le(Model_99_ice,
;                          Epoch_1,
;                          ep(Model_99_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_99_ice,
;                                S2,
;                                ep(Model_99_ice, S2, Node_1),
;                                Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       locked(Model_99_ice,
;                              S2,
;                              ep(Model_99_ice, S2, Node_1),
;                              Node_1)))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_99_ice,
;                                  S2,
;                                  Epoch_1,
;                                  Node_1)),
;                       le(Model_99_ice,
;                          Epoch_1,
;                          ep(Model_99_ice, S2, Node_1))))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(le(Model_99_ice,
;                              Epoch_1,
;                              ep(Model_99_ice, S2, Node_1))),
;                       Epoch_1 ==
;                       ep(Model_99_ice, S2, Node_1),
;                       Not(le(Model_99_ice,
;                              ep(Model_99_ice, S2, Node_1),
;                              Epoch_1)))))),
;  Not(ForAll(Node_1,
;             ForAll(Node_2,
;                    Or(locked(Model_99_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_99_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!2))
;     Epoch!val!4
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (= x!2 Node!val!1)
;                         (not (= x!2 Node!val!2)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (= x!2 Node!val!1)
;                         (not (= x!2 Node!val!2)))))
;           (a!2 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!1))
;                          (not (= x!2 Node!val!2)))
;                     Epoch!val!3
;                     Epoch!val!0)))
;     (let ((a!3 (ite a!1
;                     Epoch!val!2
;                     (ite (and (= x!0 ModelId!val!0)
;                               (= x!1 StateId!val!0)
;                               (= x!2 Node!val!2))
;                          Epoch!val!4
;                          a!2))))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!1))
;                 (not (= x!2 Node!val!2)))
;            Epoch!val!3
;            a!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_99_ice S1 Node!val!0 Node!val!0)
                (inv Model_99_ice S1 Node!val!0 Node!val!1)
                (inv Model_99_ice S1 Node!val!0 Node!val!2)
                (inv Model_99_ice S1 Node!val!1 Node!val!0)
                (inv Model_99_ice S1 Node!val!1 Node!val!1)
                (inv Model_99_ice S1 Node!val!1 Node!val!2)
                (inv Model_99_ice S1 Node!val!2 Node!val!0)
                (inv Model_99_ice S1 Node!val!2 Node!val!1)
                (inv Model_99_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_99_ice S2 Node!val!0 Node!val!0)
           (inv Model_99_ice S2 Node!val!0 Node!val!1)
           (inv Model_99_ice S2 Node!val!0 Node!val!2)
           (inv Model_99_ice S2 Node!val!1 Node!val!0)
           (inv Model_99_ice S2 Node!val!1 Node!val!1)
           (inv Model_99_ice S2 Node!val!1 Node!val!2)
           (inv Model_99_ice S2 Node!val!2 Node!val!0)
           (inv Model_99_ice S2 Node!val!2 Node!val!1)
           (inv Model_99_ice S2 Node!val!2 Node!val!2)))))



;(declare-fun Model_DUMMYMODEL () ModelId)
;(declare-fun DUMMYSTATE () StateId)
(declare-fun N1 () Node)
(declare-fun N2 () Node)

; this one includes assertion of axioms, so no need to assert it again
(assert (and (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2)
     (=> (and (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2)
              (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2))
         (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2))
     (=> (and (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2)
              (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2))
         (= Epoch!val!2 Epoch!val!2))
     (or (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2)
         (le Model_DUMMYMODEL Epoch!val!2 Epoch!val!2))
     (le Model_DUMMYMODEL (zero Model_DUMMYMODEL) Epoch!val!2)
     (distinct (one Model_DUMMYMODEL) (zero Model_DUMMYMODEL))))
(assert (and (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch!val!2 Node!val!0))
         (transfer Model_DUMMYMODEL DUMMYSTATE Epoch!val!2 Node!val!0))))
(assert (and (or (held Model_DUMMYMODEL DUMMYSTATE Node!val!0)
         (le Model_DUMMYMODEL
             (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
             (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)))))
(assert (and (le Model_DUMMYMODEL
         (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
         (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0))))
(assert (let ((a!1 (or (not (locked Model_DUMMYMODEL
                            DUMMYSTATE
                            (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
                            Node!val!0))
               (transfer Model_DUMMYMODEL
                         DUMMYSTATE
                         (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
                         Node!val!0))))
  (and a!1)))
(assert (and (or (le Model_DUMMYMODEL
             Epoch!val!2
             (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0))
         (le Model_DUMMYMODEL
             (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
             Epoch!val!2))))
(assert (and (or (transfer Model_DUMMYMODEL
                   DUMMYSTATE
                   (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
                   Node!val!0)
         (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch!val!2 Node!val!0)))))
(assert (and (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch!val!2 Node!val!0))
         (locked Model_DUMMYMODEL
                 DUMMYSTATE
                 (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
                 Node!val!0))))
(assert (and (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch!val!2 Node!val!0))
         (le Model_DUMMYMODEL
             Epoch!val!2
             (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)))))
(assert (let ((a!1 (or (not (le Model_DUMMYMODEL
                        (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0)
                        Epoch!val!2))
               (= Epoch!val!2 (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0))
               (not (le Model_DUMMYMODEL
                        Epoch!val!2
                        (ep Model_DUMMYMODEL DUMMYSTATE Node!val!0))))))
  (and a!1)))
(assert (not (inv Model_DUMMYMODEL DUMMYSTATE Node!val!0 Node!val!0)))

(assert (not (inv Model_DUMMYMODEL DUMMYSTATE N1 N2)))

(check-synth)
        