
(set-logic ALL)

(set-option :random-seed 123)

(declare-datatypes ( (Node 0) ) ((
(Node!val!0) 
(Node!val!2) 
(Node!val!1) 
)))

(declare-datatypes ( (Epoch 0) ) ((
(Epoch!val!2) 
(Epoch!val!1) 
(Epoch!val!0) 
(Epoch!val!5) 
(Epoch!val!4) 
(Epoch!val!3) 
)))

(declare-datatypes ( (ModelId 0) ) ((
(Model_DUMMYMODEL) 
(Model_375_ice) 
(Model_384_ice) 
(Model_356_ice) 
(Model_359_ice) 
(Model_363_ice) 
(Model_370_ice) 
(Model_389_ice) 
(Model_391_ice) 
(Model_382_ice) 
(Model_380_ice) 
(Model_360_ice) 
(Model_392_ice) 
(Model_104_pos) 
(Model_385_ice) 
(Model_0_pos) 
(Model_374_ice) 
(Model_368_ice) 
(Model_377_ice) 
(Model_361_ice) 
(Model_378_ice) 
(Model_383_ice) 
(Model_362_ice) 
(Model_371_ice) 
(Model_369_ice) 
(Model_379_ice) 
(Model_2_pos) 
(Model_386_ice) 
(Model_390_ice) 
(Model_373_ice) 
(Model_387_ice) 
(Model_357_ice) 
(Model_358_ice) 
(Model_372_ice) 
(Model_381_ice) 
(Model_365_ice) 
(Model_376_ice) 
(Model_364_ice) 
(Model_145_pos) 
(Model_367_ice) 
(Model_388_ice) 
(Model_366_ice) 
)))

(declare-datatypes ( (StateId 0) ) ((
(DUMMYSTATE) 
(S2) 
(S1) 
(init) 
)))

;; definitions of functions defining models.
(declare-fun ep_dummy (ModelId StateId Node) Epoch)
(define-fun ep ((a0 ModelId) (a1 StateId) (a2 Node)) Epoch
(ite (= a0 Model_DUMMYMODEL) (ep_dummy a0 a1 a2 )
    (ite (= a0 Model_2_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_145_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!1
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_356_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!0
        )
    (ite (= a0 Model_357_ice)
        (ite (= a1 S1)
            Epoch!val!1
;        if a1 IN [S2, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_358_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_360_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_361_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!0
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_362_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_363_ice)
        (ite (= a1 S1)
            Epoch!val!2
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_365_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!0
        ))
    (ite (= a0 Model_366_ice)
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!0, Node!val!2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_367_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_368_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_369_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_370_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!4
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_371_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!0
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_372_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!1
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_373_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_374_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!4
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_375_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_376_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_377_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_378_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!1
        ))
    (ite (= a0 Model_379_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!1
;            if a1 IN [S2, ] 
                Epoch!val!2
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!0
        )
    (ite (= a0 Model_380_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
        (ite (= a2 Node!val!1)
            Epoch!val!2
;        if a2 IN [Node!val!2, ] 
            Epoch!val!3
        ))
    (ite (= a0 Model_381_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!1
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!4
        ))
    (ite (= a0 Model_382_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!0
;            if a1 IN [S2, ] 
                Epoch!val!1
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_383_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                Epoch!val!2
;            if a1 IN [S2, ] 
                Epoch!val!3
            )
;        if a2 IN [Node!val!0, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_384_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!5
        ))
    (ite (= a0 Model_385_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
        (ite (= a2 Node!val!1)
            Epoch!val!3
;        if a2 IN [Node!val!2, ] 
            Epoch!val!5
        ))
    (ite (= a0 Model_386_ice)
        (ite (= a1 S1)
            Epoch!val!1
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_388_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!4
        )
    (ite (= a0 Model_389_ice)
        (ite (= a1 S1)
            Epoch!val!2
;        if a1 IN [S2, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_390_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!3
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_392_ice)
        (ite (= a2 Node!val!0)
            Epoch!val!4
;        if a2 IN [Node!val!1, ] 
            Epoch!val!3
        )
    (ite (= a0 Model_359_ice)
        Epoch!val!3
    (ite (or (= a0 Model_387_ice) (= a0 Model_391_ice) )
        Epoch!val!4
;    if a0 IN [Model_364_ice, Model_0_pos, Model_104_pos, ] 
        Epoch!val!1
    )))))))))))))))))))))))))))))))))))))
))

(declare-fun held_dummy (ModelId StateId Node) Bool)
(define-fun held ((a0 ModelId) (a1 StateId) (a2 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (held_dummy a0 a1 a2 )
    (ite (= a0 Model_2_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_145_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_356_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_357_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_358_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_359_ice)
        (ite (= a1 S1)
            true
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_360_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_361_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_362_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_363_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_364_ice)
        (ite (= a1 S1)
            true
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_365_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_366_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_367_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_368_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_369_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_370_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_371_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_372_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_373_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_374_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_375_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_376_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            true
        )
    (ite (= a0 Model_377_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_378_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_379_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_380_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            false
        )
    (ite (= a0 Model_381_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
;        if a2 IN [Node!val!0, Node!val!2, ] 
            true
        )
    (ite (= a0 Model_382_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            false
        )
    (ite (= a0 Model_383_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_384_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a2 Node!val!0)
            true
;        if a2 IN [Node!val!2, ] 
            false
        ))
    (ite (= a0 Model_385_ice)
        (ite (= a2 Node!val!1)
            (ite (= a1 S1)
                true
;            if a1 IN [S2, ] 
                false
            )
        (ite (= a2 Node!val!0)
            true
;        if a2 IN [Node!val!2, ] 
            false
        ))
    (ite (= a0 Model_386_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_387_ice)
        (ite (= a1 S1)
            true
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_388_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                true
;            if a2 IN [Node!val!1, ] 
                false
            )
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_389_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
    (ite (= a0 Model_390_ice)
        (ite (= a1 S2)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S1, ] 
            true
        )
    (ite (= a0 Model_391_ice)
        (ite (= a1 S1)
            true
;        if a1 IN [S2, ] 
            false
        )
    (ite (= a0 Model_392_ice)
        (ite (= a1 S1)
            (ite (= a2 Node!val!0)
                false
;            if a2 IN [Node!val!1, ] 
                true
            )
;        if a1 IN [S2, ] 
            false
        )
;    if a0 IN [Model_0_pos, Model_104_pos, ] 
        true
    )))))))))))))))))))))))))))))))))))))))
))

(declare-fun transfer_dummy (ModelId StateId Epoch Node) Bool)
(define-fun transfer ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (transfer_dummy a0 a1 a2 a3 )
    (ite (= a2 Epoch!val!2)
        (ite (= a0 Model_358_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_359_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_360_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_361_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_362_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_364_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_366_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_368_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_369_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_370_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_371_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_373_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_374_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_377_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_378_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_379_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_380_ice)
            (ite (= a3 Node!val!2)
                false
;            if a3 IN [Node!val!0, Node!val!1, ] 
                true
            )
        (ite (= a0 Model_381_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_383_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_384_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_385_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_388_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_390_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_392_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (or (= a0 Model_387_ice) (= a0 Model_363_ice) (= a0 Model_357_ice) )
            true
;        if a0 IN [Model_375_ice, Model_104_pos, Model_372_ice, Model_356_ice, Model_0_pos, Model_365_ice, Model_376_ice, Model_145_pos, Model_389_ice, Model_391_ice, Model_2_pos, Model_382_ice, Model_367_ice, Model_386_ice, ] 
            false
        )))))))))))))))))))))))))
    (ite (= a2 Epoch!val!1)
        (ite (= a0 Model_356_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_365_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_366_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_367_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            ))
        (ite (= a0 Model_375_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_376_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_380_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_382_ice)
            true
;        if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_104_pos, Model_385_ice, Model_0_pos, Model_374_ice, Model_368_ice, Model_377_ice, Model_361_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_379_ice, Model_2_pos, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_381_ice, Model_364_ice, Model_145_pos, Model_388_ice, ] 
            false
        )))))))))
    (ite (= a2 Epoch!val!3)
        (ite (= a0 Model_358_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_360_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_362_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_365_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_367_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_368_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_369_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_370_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_374_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_375_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_376_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_377_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_378_ice)
            (ite (= a3 Node!val!2)
                (ite (= a1 S1)
                    false
;                if a1 IN [S2, ] 
                    true
                )
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            ))
        (ite (= a0 Model_380_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_381_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_384_ice)
            (ite (= a3 Node!val!2)
                false
;            if a3 IN [Node!val!0, Node!val!1, ] 
                true
            )
        (ite (= a0 Model_385_ice)
            (ite (= a3 Node!val!2)
                false
;            if a3 IN [Node!val!0, Node!val!1, ] 
                true
            )
        (ite (= a0 Model_387_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_390_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_391_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_392_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (or (= a0 Model_388_ice) (= a0 Model_366_ice) )
            false
;        if a0 IN [Model_373_ice, Model_383_ice, Model_359_ice, Model_363_ice, Model_389_ice, Model_386_ice, ] 
            true
        )))))))))))))))))))))))
    (ite (= a2 Epoch!val!4)
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_373_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_377_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_381_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_383_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_384_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_385_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_388_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_392_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_380_ice)
            false
;        if a0 IN [Model_387_ice, Model_375_ice, Model_376_ice, Model_374_ice, Model_370_ice, Model_391_ice, ] 
            true
        ))))))))))
    (ite (= a2 Epoch!val!5)
        (ite (= a3 Node!val!2)
            true
;        if a3 IN [Node!val!0, Node!val!1, ] 
            false
        )
;    if a2 IN [Epoch!val!0, ] 
        false
    )))))
))

(declare-fun locked_dummy (ModelId StateId Epoch Node) Bool)
(define-fun locked ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (locked_dummy a0 a1 a2 a3 )
    (ite (= a2 Epoch!val!2)
        (ite (= a0 Model_357_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_358_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_360_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_361_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_366_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_368_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_369_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_370_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_371_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_373_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_374_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_377_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_378_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_379_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_380_ice)
            (ite (= a3 Node!val!2)
                false
;            if a3 IN [Node!val!0, Node!val!1, ] 
                true
            )
        (ite (= a0 Model_383_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (or (= a0 Model_387_ice) (= a0 Model_363_ice) )
            true
;        if a0 IN [Model_375_ice, Model_384_ice, Model_356_ice, Model_359_ice, Model_389_ice, Model_391_ice, Model_382_ice, Model_392_ice, Model_104_pos, Model_385_ice, Model_0_pos, Model_362_ice, Model_2_pos, Model_386_ice, Model_390_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_364_ice, Model_145_pos, Model_367_ice, Model_388_ice, ] 
            false
        )))))))))))))))))
    (ite (= a2 Epoch!val!1)
        (ite (= a0 Model_367_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_375_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_376_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_382_ice)
            (ite (= a1 S1)
                (ite (= a3 Node!val!0)
                    true
;                if a3 IN [Node!val!1, ] 
                    false
                )
;            if a1 IN [S2, ] 
                true
            )
;        if a0 IN [Model_384_ice, Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_380_ice, Model_360_ice, Model_392_ice, Model_104_pos, Model_385_ice, Model_0_pos, Model_374_ice, Model_368_ice, Model_377_ice, Model_361_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_379_ice, Model_2_pos, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_381_ice, Model_365_ice, Model_364_ice, Model_145_pos, Model_388_ice, Model_366_ice, ] 
            false
        )))))
    (ite (= a2 Epoch!val!3)
        (ite (= a0 Model_358_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_360_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_362_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_363_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_365_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_367_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_368_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_369_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_370_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_373_ice)
            (ite (= a1 S1)
                (ite (= a3 Node!val!0)
                    true
;                if a3 IN [Node!val!1, ] 
                    false
                )
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_374_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_377_ice)
            (ite (= a1 S2)
                (ite (= a3 Node!val!0)
                    false
;                if a3 IN [Node!val!1, ] 
                    true
                )
;            if a1 IN [S1, ] 
                false
            )
        (ite (= a0 Model_378_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_380_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_381_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_383_ice)
            (ite (= a1 S1)
                (ite (= a3 Node!val!0)
                    true
;                if a3 IN [Node!val!1, ] 
                    false
                )
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_384_ice)
            (ite (= a3 Node!val!1)
                true
;            if a3 IN [Node!val!0, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_385_ice)
            (ite (= a3 Node!val!2)
                false
;            if a3 IN [Node!val!0, Node!val!1, ] 
                true
            )
        (ite (= a0 Model_386_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_389_ice)
            (ite (= a1 S1)
                false
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_390_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_392_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_359_ice)
            true
;        if a0 IN [Model_387_ice, Model_375_ice, Model_376_ice, Model_391_ice, Model_388_ice, Model_366_ice, ] 
            false
        ))))))))))))))))))))))))
    (ite (= a2 Epoch!val!4)
        (ite (= a0 Model_370_ice)
            (ite (= a1 S1)
                (ite (= a3 Node!val!0)
                    true
;                if a3 IN [Node!val!1, ] 
                    false
                )
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_372_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_373_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_374_ice)
            (ite (= a1 S1)
                (ite (= a3 Node!val!0)
                    true
;                if a3 IN [Node!val!1, ] 
                    false
                )
;            if a1 IN [S2, ] 
                true
            )
        (ite (= a0 Model_377_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_381_ice)
            (ite (= a3 Node!val!2)
                true
;            if a3 IN [Node!val!0, Node!val!1, ] 
                false
            )
        (ite (= a0 Model_383_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_384_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_385_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, Node!val!2, ] 
                false
            )
        (ite (= a0 Model_388_ice)
            (ite (= a3 Node!val!0)
                false
;            if a3 IN [Node!val!1, ] 
                true
            )
        (ite (= a0 Model_392_ice)
            (ite (= a3 Node!val!0)
                true
;            if a3 IN [Node!val!1, ] 
                false
            )
        (ite (= a0 Model_380_ice)
            false
;        if a0 IN [Model_387_ice, Model_375_ice, Model_391_ice, Model_376_ice, ] 
            true
        ))))))))))))
    (ite (= a2 Epoch!val!5)
        (ite (= a3 Node!val!2)
            true
;        if a3 IN [Node!val!0, Node!val!1, ] 
            false
        )
;    if a2 IN [Epoch!val!0, ] 
        false
    )))))
))

(declare-fun le_dummy (ModelId Epoch Epoch) Bool)
(define-fun le ((a0 ModelId) (a1 Epoch) (a2 Epoch)) Bool
(ite (= a0 Model_DUMMYMODEL) (le_dummy a0 a1 a2 )
    (ite (= a1 Epoch!val!0)
        (ite (= a0 Model_0_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_2_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_104_pos)
            (ite (= a2 Epoch!val!2)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, ] 
                true
            )
        (ite (= a0 Model_145_pos)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_358_ice)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_361_ice)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_366_ice)
            (ite (= a2 Epoch!val!3)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!1, ] 
                true
            )
        (ite (= a0 Model_368_ice)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_379_ice)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_380_ice)
            (ite (= a2 Epoch!val!4)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_382_ice)
            (ite (= a2 Epoch!val!2)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, ] 
                true
            )
;        if a0 IN [Model_375_ice, Model_384_ice, Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_364_ice, Model_367_ice, Model_388_ice, ] 
            true
        )))))))))))
    (ite (= a1 Epoch!val!2)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_2_pos) (= a0 Model_382_ice) (= a0 Model_0_pos) (= a0 Model_104_pos) )
                true
;            if a0 IN [Model_375_ice, Model_384_ice, Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_380_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_361_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_379_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_364_ice, Model_145_pos, Model_367_ice, Model_388_ice, Model_366_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_375_ice) (= a0 Model_104_pos) (= a0 Model_380_ice) (= a0 Model_372_ice) (= a0 Model_356_ice) (= a0 Model_0_pos) (= a0 Model_365_ice) (= a0 Model_376_ice) (= a0 Model_389_ice) (= a0 Model_391_ice) (= a0 Model_2_pos) (= a0 Model_382_ice) (= a0 Model_367_ice) (= a0 Model_386_ice) (= a0 Model_366_ice) )
                true
;            if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_361_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_379_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_381_ice, Model_364_ice, Model_145_pos, Model_388_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_392_ice) (= a0 Model_385_ice) (= a0 Model_381_ice) (= a0 Model_384_ice) (= a0 Model_359_ice) (= a0 Model_362_ice) (= a0 Model_368_ice) (= a0 Model_388_ice) (= a0 Model_390_ice) (= a0 Model_366_ice) )
                false
;            if a0 IN [Model_375_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_380_ice, Model_360_ice, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_369_ice, Model_386_ice, Model_373_ice, Model_387_ice, Model_358_ice, Model_372_ice, Model_365_ice, Model_376_ice, Model_367_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_377_ice) (= a0 Model_385_ice) (= a0 Model_381_ice) (= a0 Model_384_ice) (= a0 Model_388_ice) (= a0 Model_380_ice) )
                false
;            if a0 IN [Model_373_ice, Model_387_ice, Model_375_ice, Model_392_ice, Model_372_ice, Model_383_ice, Model_374_ice, Model_376_ice, Model_370_ice, Model_391_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!5)
            (ite (= a0 Model_384_ice)
                true
;            if a0 IN [Model_385_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!2, ] 
            true
        )))))
    (ite (= a1 Epoch!val!1)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_361_ice) (= a0 Model_358_ice) (= a0 Model_0_pos) (= a0 Model_145_pos) (= a0 Model_379_ice) (= a0 Model_368_ice) (= a0 Model_2_pos) )
                true
;            if a0 IN [Model_375_ice, Model_384_ice, Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_382_ice, Model_380_ice, Model_360_ice, Model_392_ice, Model_104_pos, Model_385_ice, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_364_ice, Model_367_ice, Model_388_ice, Model_366_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_375_ice) (= a0 Model_104_pos) (= a0 Model_380_ice) (= a0 Model_372_ice) (= a0 Model_356_ice) (= a0 Model_0_pos) (= a0 Model_365_ice) (= a0 Model_376_ice) (= a0 Model_389_ice) (= a0 Model_391_ice) (= a0 Model_2_pos) (= a0 Model_382_ice) (= a0 Model_367_ice) (= a0 Model_386_ice) (= a0 Model_366_ice) )
                false
;            if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_361_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_379_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_381_ice, Model_364_ice, Model_145_pos, Model_388_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_375_ice) (= a0 Model_372_ice) (= a0 Model_366_ice) (= a0 Model_367_ice) (= a0 Model_380_ice) )
                false
;            if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_358_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_388_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_380_ice) (= a0 Model_375_ice) (= a0 Model_376_ice) )
                false
;            if a0 IN [Model_373_ice, Model_377_ice, Model_387_ice, Model_392_ice, Model_385_ice, Model_372_ice, Model_381_ice, Model_383_ice, Model_384_ice, Model_374_ice, Model_370_ice, Model_391_ice, Model_388_ice, ] 
                true
            )
;        if a2 IN [Epoch!val!5, Epoch!val!1, ] 
            true
        ))))
    (ite (= a1 Epoch!val!3)
        (ite (= a2 Epoch!val!0)
            (ite (= a0 Model_366_ice)
                true
;            if a0 IN [Model_375_ice, Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_380_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_358_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_367_ice, Model_388_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_392_ice) (= a0 Model_385_ice) (= a0 Model_381_ice) (= a0 Model_384_ice) (= a0 Model_359_ice) (= a0 Model_362_ice) (= a0 Model_368_ice) (= a0 Model_388_ice) (= a0 Model_390_ice) (= a0 Model_366_ice) )
                true
;            if a0 IN [Model_375_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_380_ice, Model_360_ice, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_369_ice, Model_386_ice, Model_373_ice, Model_387_ice, Model_358_ice, Model_372_ice, Model_365_ice, Model_376_ice, Model_367_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_375_ice) (= a0 Model_372_ice) (= a0 Model_366_ice) (= a0 Model_367_ice) (= a0 Model_380_ice) )
                true
;            if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_368_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_358_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_388_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!4)
            (ite (or (= a0 Model_373_ice) (= a0 Model_392_ice) (= a0 Model_372_ice) (= a0 Model_383_ice) (= a0 Model_384_ice) (= a0 Model_388_ice) )
                true
;            if a0 IN [Model_377_ice, Model_387_ice, Model_375_ice, Model_385_ice, Model_381_ice, Model_376_ice, Model_374_ice, Model_370_ice, Model_391_ice, Model_380_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!5)
            (ite (= a0 Model_384_ice)
                true
;            if a0 IN [Model_385_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!3, ] 
            true
        )))))
    (ite (= a1 Epoch!val!4)
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_373_ice) (= a0 Model_392_ice) (= a0 Model_372_ice) (= a0 Model_383_ice) (= a0 Model_384_ice) (= a0 Model_388_ice) )
                false
;            if a0 IN [Model_377_ice, Model_387_ice, Model_375_ice, Model_385_ice, Model_381_ice, Model_376_ice, Model_374_ice, Model_370_ice, Model_391_ice, Model_380_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!0)
            (ite (= a0 Model_380_ice)
                true
;            if a0 IN [Model_373_ice, Model_377_ice, Model_387_ice, Model_375_ice, Model_392_ice, Model_385_ice, Model_372_ice, Model_381_ice, Model_383_ice, Model_384_ice, Model_374_ice, Model_376_ice, Model_370_ice, Model_391_ice, Model_388_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_377_ice) (= a0 Model_385_ice) (= a0 Model_381_ice) (= a0 Model_384_ice) (= a0 Model_388_ice) (= a0 Model_380_ice) )
                true
;            if a0 IN [Model_373_ice, Model_387_ice, Model_375_ice, Model_392_ice, Model_372_ice, Model_383_ice, Model_374_ice, Model_376_ice, Model_370_ice, Model_391_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_380_ice) (= a0 Model_375_ice) (= a0 Model_376_ice) )
                true
;            if a0 IN [Model_373_ice, Model_377_ice, Model_387_ice, Model_392_ice, Model_385_ice, Model_372_ice, Model_381_ice, Model_383_ice, Model_384_ice, Model_374_ice, Model_370_ice, Model_391_ice, Model_388_ice, ] 
                false
            )
        (ite (= a2 Epoch!val!5)
            (ite (= a0 Model_384_ice)
                true
;            if a0 IN [Model_385_ice, ] 
                false
            )
;        if a2 IN [Epoch!val!4, ] 
            true
        )))))
;    if a1 IN [Epoch!val!5, ] 
        (ite (= a2 Epoch!val!3)
            (ite (= a0 Model_384_ice)
                false
;            if a0 IN [Model_385_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!4)
            (ite (= a0 Model_384_ice)
                false
;            if a0 IN [Model_385_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!2)
            (ite (= a0 Model_384_ice)
                false
;            if a0 IN [Model_385_ice, ] 
                true
            )
        (ite (= a2 Epoch!val!5)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        ))))
    )))))
))

(declare-fun zero_dummy (ModelId) Epoch)
(define-fun zero ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (zero_dummy a0 )
    (ite (= a0 Model_366_ice)
        Epoch!val!3
    (ite (= a0 Model_380_ice)
        Epoch!val!4
    (ite (or (= a0 Model_2_pos) (= a0 Model_382_ice) (= a0 Model_0_pos) (= a0 Model_104_pos) )
        Epoch!val!2
    (ite (or (= a0 Model_361_ice) (= a0 Model_358_ice) (= a0 Model_145_pos) (= a0 Model_379_ice) (= a0 Model_368_ice) )
        Epoch!val!1
;    if a0 IN [Model_375_ice, Model_384_ice, Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_385_ice, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_372_ice, Model_381_ice, Model_365_ice, Model_376_ice, Model_364_ice, Model_367_ice, Model_388_ice, ] 
        Epoch!val!0
    ))))
))

(declare-fun one_dummy (ModelId) Epoch)
(define-fun one ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (one_dummy a0 )
    (ite (= a0 Model_388_ice)
        Epoch!val!3
    (ite (or (= a0 Model_361_ice) (= a0 Model_358_ice) (= a0 Model_380_ice) (= a0 Model_379_ice) (= a0 Model_368_ice) (= a0 Model_382_ice) (= a0 Model_366_ice) )
        Epoch!val!0
    (ite (or (= a0 Model_375_ice) (= a0 Model_372_ice) (= a0 Model_356_ice) (= a0 Model_365_ice) (= a0 Model_376_ice) (= a0 Model_145_pos) (= a0 Model_389_ice) (= a0 Model_367_ice) )
        Epoch!val!2
;    if a0 IN [Model_384_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_391_ice, Model_360_ice, Model_392_ice, Model_104_pos, Model_385_ice, Model_0_pos, Model_374_ice, Model_377_ice, Model_378_ice, Model_383_ice, Model_362_ice, Model_371_ice, Model_369_ice, Model_2_pos, Model_386_ice, Model_390_ice, Model_373_ice, Model_387_ice, Model_357_ice, Model_381_ice, Model_364_ice, ] 
        Epoch!val!1
    )))
))

(declare-fun first_dummy (ModelId) Node)
(define-fun first ((a0 ModelId)) Node
(ite (= a0 Model_DUMMYMODEL) (first_dummy a0 )
    (ite (= a0 Model_378_ice)
        Node!val!2
    (ite (or (= a0 Model_375_ice) (= a0 Model_384_ice) (= a0 Model_382_ice) (= a0 Model_380_ice) (= a0 Model_360_ice) (= a0 Model_392_ice) (= a0 Model_385_ice) (= a0 Model_377_ice) (= a0 Model_361_ice) (= a0 Model_383_ice) (= a0 Model_362_ice) (= a0 Model_2_pos) (= a0 Model_390_ice) (= a0 Model_373_ice) (= a0 Model_365_ice) (= a0 Model_376_ice) (= a0 Model_145_pos) (= a0 Model_367_ice) (= a0 Model_366_ice) )
        Node!val!1
;    if a0 IN [Model_356_ice, Model_359_ice, Model_363_ice, Model_370_ice, Model_389_ice, Model_391_ice, Model_104_pos, Model_0_pos, Model_374_ice, Model_368_ice, Model_371_ice, Model_379_ice, Model_369_ice, Model_386_ice, Model_387_ice, Model_357_ice, Model_358_ice, Model_372_ice, Model_381_ice, Model_364_ice, Model_388_ice, ] 
        Node!val!0
    ))
))

(synth-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node)) Bool

    ;; Declare the non-terminals that would be used in the grammar

    (
        (Start Bool)
        (Atom Bool)
        (Node_ Node)
		(Epoch_ Epoch)
    )

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool
            (
                (le m Epoch_ Epoch_)
				(held m s Node_)
				(transfer m s Epoch_ Node_)
				(locked m s Epoch_ Node_)

                (= n1 n2)
				(= n1 (first m))
				(= n2 (first m))
				(= (zero m) (one m))
				(= (zero m) (ep m s Node_))
				(= (one m) (ep m s Node_))

                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Node_ Node (
			n1
			n2
			(first m)
		))
		(Epoch_ Epoch (
			(zero m)
			(one m)
			(ep m s Node_)
		))
    )
)

; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QForAll object at 0x7fba690975e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(ForAll(Bool_1, False))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_0_pos init Node!val!0 Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba6901e610>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_2_pos, init, Node_1) ==
;                    (Node_1 == first(Model_2_pos)),
;                    Implies(Node_1 != first(Model_2_pos),
;                            ep(Model_2_pos, init, Node_1) ==
;                            zero(Model_2_pos)),
;                    ep(Model_2_pos, init, first(Model_2_pos)) ==
;                    one(Model_2_pos),
;                    transfer(Model_2_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_2_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_2_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_2_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_2_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_2_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_2_pos,
;                              zero(Model_2_pos),
;                              Epoch_1),
;                           one(Model_2_pos) !=
;                           zero(Model_2_pos))))),
;  Not(ForAll(Node_1, held(Model_2_pos, init, Node_1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_2_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_2_pos init Node!val!0 Node!val!0)
     (inv Model_2_pos init Node!val!0 Node!val!1)
     (inv Model_2_pos init Node!val!1 Node!val!0)
     (inv Model_2_pos init Node!val!1 Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba68edbfa0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_104_pos, init, Node_1) ==
;                    (Node_1 == first(Model_104_pos)),
;                    Implies(Node_1 != first(Model_104_pos),
;                            ep(Model_104_pos, init, Node_1) ==
;                            zero(Model_104_pos)),
;                    ep(Model_104_pos,
;                       init,
;                       first(Model_104_pos)) ==
;                    one(Model_104_pos),
;                    transfer(Model_104_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_104_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_104_pos,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_104_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_104_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_104_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_104_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_104_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_104_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_104_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_104_pos,
;                              zero(Model_104_pos),
;                              Epoch_1),
;                           one(Model_104_pos) !=
;                           zero(Model_104_pos))))),
;  Not(ForAll(Epoch_1,
;             Or(Not(le(Model_104_pos,
;                       Epoch_1,
;                       one(Model_104_pos))),
;                Epoch_1 == one(Model_104_pos),
;                Epoch_1 == zero(Model_104_pos))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_104_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_104_pos init Node!val!0 Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f40c760>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_145_pos, init, Node_1) ==
;                    (Node_1 == first(Model_145_pos)),
;                    Implies(Node_1 != first(Model_145_pos),
;                            ep(Model_145_pos, init, Node_1) ==
;                            zero(Model_145_pos)),
;                    ep(Model_145_pos,
;                       init,
;                       first(Model_145_pos)) ==
;                    one(Model_145_pos),
;                    transfer(Model_145_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_145_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_145_pos,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_145_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_145_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_145_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_145_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_145_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_145_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_145_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_145_pos,
;                              zero(Model_145_pos),
;                              Epoch_1),
;                           one(Model_145_pos) !=
;                           zero(Model_145_pos))))),
;  Not(ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Node_1 == first(Model_145_pos),
;                       Epoch_1 == zero(Model_145_pos),
;                       le(Model_145_pos,
;                          one(Model_145_pos),
;                          Epoch_1)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; (define-fun Model_145_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     Epoch!val!1))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_145_pos init Node!val!0 Node!val!0)
     (inv Model_145_pos init Node!val!0 Node!val!1)
     (inv Model_145_pos init Node!val!1 Node!val!0)
     (inv Model_145_pos init Node!val!1 Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f1ec8e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_356_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_356_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_356_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_356_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_356_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_356_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_356_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_356_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_356_ice,
;                              zero(Model_356_ice),
;                              Epoch_1),
;                           one(Model_356_ice) !=
;                           zero(Model_356_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_356_ice,
;                          S1,
;                          zero(Model_356_ice),
;                          first(Model_356_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_356_ice) ==
;                 ep(Model_356_ice, S1, first(Model_356_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_356_ice,
;                        S1,
;                        zero(Model_356_ice),
;                        first(Model_356_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_356_ice,
;                          S1,
;                          zero(Model_356_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_356_ice,
;                        S1,
;                        zero(Model_356_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_356_ice,
;                           S1,
;                           one(Model_356_ice),
;                           Node_1)),
;                transfer(Model_356_ice,
;                         S1,
;                         one(Model_356_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_356_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_356_ice))),
;                transfer(Model_356_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_356_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_356_ice,
;                       S1,
;                       first(Model_356_ice))),
;                le(Model_356_ice,
;                   one(Model_356_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_356_ice,
;                        S1,
;                        one(Model_356_ice),
;                        first(Model_356_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_356_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_356_ice))),
;                le(Model_356_ice,
;                   one(Model_356_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_356_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_356_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_356_ice, S1, Node_1),
;                     zero(Model_356_ice) ==
;                     ep(Model_356_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_356_ice) ==
;                           ep(Model_356_ice,
;                              S1,
;                              first(Model_356_ice))),
;                       zero(Model_356_ice) ==
;                       one(Model_356_ice))),
;                transfer(Model_356_ice,
;                         S1,
;                         ep(Model_356_ice,
;                            S1,
;                            first(Model_356_ice)),
;                         first(Model_356_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_356_ice) ==
;                ep(Model_356_ice, S1, first(Model_356_ice)),
;                locked(Model_356_ice,
;                       S1,
;                       ep(Model_356_ice,
;                          S1,
;                          first(Model_356_ice)),
;                       first(Model_356_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_356_ice,
;                            S1,
;                            one(Model_356_ice),
;                            Node_1),
;                     zero(Model_356_ice) ==
;                     ep(Model_356_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_356_ice,
;                   ep(Model_356_ice, S1, Node_1),
;                   ep(Model_356_ice,
;                      S1,
;                      first(Model_356_ice))),
;                locked(Model_356_ice,
;                       S1,
;                       ep(Model_356_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_356_ice,
;                       S1,
;                       ep(Model_356_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_356_ice),
;                zero(Model_356_ice) ==
;                ep(Model_356_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_356_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_356_ice,
;                          one(Model_356_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_356_ice,
;                          S1,
;                          one(Model_356_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_356_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_356_ice)),
;                     one(Model_356_ice) ==
;                     ep(Model_356_ice,
;                        S1,
;                        first(Model_356_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_356_ice, S1, first(Model_356_ice)),
;                Not(locked(Model_356_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_356_ice))),
;                Not(le(Model_356_ice,
;                       ep(Model_356_ice,
;                          S1,
;                          first(Model_356_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         held(Model_356_ice, S1, first(Model_356_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_356_ice,
;                          S2,
;                          zero(Model_356_ice),
;                          first(Model_356_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_356_ice) ==
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_356_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!2
;        Epoch!val!0))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!1)
;        (not (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_356_ice S1 Node!val!0 Node!val!0)
                (inv Model_356_ice S1 Node!val!0 Node!val!1)
                (inv Model_356_ice S1 Node!val!1 Node!val!0)
                (inv Model_356_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_356_ice S2 Node!val!0 Node!val!0)
           (inv Model_356_ice S2 Node!val!0 Node!val!1)
           (inv Model_356_ice S2 Node!val!1 Node!val!0)
           (inv Model_356_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0df5b0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_357_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_357_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_357_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_357_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_357_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_357_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_357_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_357_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_357_ice,
;                              zero(Model_357_ice),
;                              Epoch_1),
;                           one(Model_357_ice) !=
;                           zero(Model_357_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_357_ice,
;                          S1,
;                          zero(Model_357_ice),
;                          first(Model_357_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_357_ice) ==
;                 ep(Model_357_ice, S1, first(Model_357_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_357_ice,
;                        S1,
;                        zero(Model_357_ice),
;                        first(Model_357_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_357_ice,
;                          S1,
;                          zero(Model_357_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_357_ice,
;                        S1,
;                        zero(Model_357_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_357_ice,
;                           S1,
;                           one(Model_357_ice),
;                           Node_1)),
;                transfer(Model_357_ice,
;                         S1,
;                         one(Model_357_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_357_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_357_ice))),
;                transfer(Model_357_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_357_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_357_ice,
;                       S1,
;                       first(Model_357_ice))),
;                le(Model_357_ice,
;                   one(Model_357_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_357_ice,
;                        S1,
;                        one(Model_357_ice),
;                        first(Model_357_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_357_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_357_ice))),
;                le(Model_357_ice,
;                   one(Model_357_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_357_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_357_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_357_ice, S1, Node_1),
;                     zero(Model_357_ice) ==
;                     ep(Model_357_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_357_ice) ==
;                           ep(Model_357_ice,
;                              S1,
;                              first(Model_357_ice))),
;                       zero(Model_357_ice) ==
;                       one(Model_357_ice))),
;                transfer(Model_357_ice,
;                         S1,
;                         ep(Model_357_ice,
;                            S1,
;                            first(Model_357_ice)),
;                         first(Model_357_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_357_ice) ==
;                ep(Model_357_ice, S1, first(Model_357_ice)),
;                locked(Model_357_ice,
;                       S1,
;                       ep(Model_357_ice,
;                          S1,
;                          first(Model_357_ice)),
;                       first(Model_357_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_357_ice,
;                            S1,
;                            one(Model_357_ice),
;                            Node_1),
;                     zero(Model_357_ice) ==
;                     ep(Model_357_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_357_ice,
;                   ep(Model_357_ice, S1, Node_1),
;                   ep(Model_357_ice,
;                      S1,
;                      first(Model_357_ice))),
;                locked(Model_357_ice,
;                       S1,
;                       ep(Model_357_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_357_ice,
;                       S1,
;                       ep(Model_357_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_357_ice) ==
;                ep(Model_357_ice, S1, Node_1),
;                Node_1 == first(Model_357_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_357_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_357_ice,
;                          one(Model_357_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_357_ice,
;                          S1,
;                          one(Model_357_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_357_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_357_ice)),
;                     one(Model_357_ice) ==
;                     ep(Model_357_ice,
;                        S1,
;                        first(Model_357_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_357_ice, S1, first(Model_357_ice)),
;                Not(le(Model_357_ice,
;                       ep(Model_357_ice,
;                          S1,
;                          first(Model_357_ice)),
;                       Epoch_1)),
;                Not(locked(Model_357_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_357_ice)))))),
;  ForAll(Node_1,
;         one(Model_357_ice) ==
;         ep(Model_357_ice, S1, first(Model_357_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_357_ice,
;                          S2,
;                          zero(Model_357_ice),
;                          first(Model_357_ice)))),
;      ForAll(Node_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_357_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;        Epoch!val!2
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;             Epoch!val!1
;             Epoch!val!0)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_357_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_357_ice S1 Node!val!0 Node!val!0))
         (inv Model_357_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0c35e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_358_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_358_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_358_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_358_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_358_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_358_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_358_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_358_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_358_ice,
;                              zero(Model_358_ice),
;                              Epoch_1),
;                           one(Model_358_ice) !=
;                           zero(Model_358_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_358_ice,
;                          S1,
;                          zero(Model_358_ice),
;                          first(Model_358_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_358_ice) ==
;                 ep(Model_358_ice, S1, first(Model_358_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_358_ice,
;                        S1,
;                        zero(Model_358_ice),
;                        first(Model_358_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_358_ice,
;                          S1,
;                          zero(Model_358_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_358_ice,
;                        S1,
;                        zero(Model_358_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_358_ice,
;                           S1,
;                           one(Model_358_ice),
;                           Node_1)),
;                transfer(Model_358_ice,
;                         S1,
;                         one(Model_358_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_358_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_358_ice))),
;                transfer(Model_358_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_358_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_358_ice,
;                       S1,
;                       first(Model_358_ice))),
;                le(Model_358_ice,
;                   one(Model_358_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_358_ice,
;                        S1,
;                        one(Model_358_ice),
;                        first(Model_358_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_358_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_358_ice))),
;                le(Model_358_ice,
;                   one(Model_358_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_358_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_358_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_358_ice, S1, Node_1),
;                     zero(Model_358_ice) ==
;                     ep(Model_358_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_358_ice) ==
;                           ep(Model_358_ice,
;                              S1,
;                              first(Model_358_ice))),
;                       zero(Model_358_ice) ==
;                       one(Model_358_ice))),
;                transfer(Model_358_ice,
;                         S1,
;                         ep(Model_358_ice,
;                            S1,
;                            first(Model_358_ice)),
;                         first(Model_358_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_358_ice) ==
;                ep(Model_358_ice, S1, first(Model_358_ice)),
;                locked(Model_358_ice,
;                       S1,
;                       ep(Model_358_ice,
;                          S1,
;                          first(Model_358_ice)),
;                       first(Model_358_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_358_ice,
;                            S1,
;                            one(Model_358_ice),
;                            Node_1),
;                     zero(Model_358_ice) ==
;                     ep(Model_358_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_358_ice,
;                   ep(Model_358_ice, S1, Node_1),
;                   ep(Model_358_ice,
;                      S1,
;                      first(Model_358_ice))),
;                locked(Model_358_ice,
;                       S1,
;                       ep(Model_358_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_358_ice,
;                       S1,
;                       ep(Model_358_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_358_ice),
;                zero(Model_358_ice) ==
;                ep(Model_358_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_358_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_358_ice,
;                          one(Model_358_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_358_ice,
;                          S1,
;                          one(Model_358_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_358_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_358_ice)),
;                     one(Model_358_ice) ==
;                     ep(Model_358_ice,
;                        S1,
;                        first(Model_358_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_358_ice, S1, first(Model_358_ice)),
;                Not(le(Model_358_ice,
;                       ep(Model_358_ice,
;                          S1,
;                          first(Model_358_ice)),
;                       Epoch_1)),
;                Not(locked(Model_358_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_358_ice)))))),
;  ForAll(Node_1,
;         Or(zero(Model_358_ice) == one(Model_358_ice),
;            zero(Model_358_ice) ==
;            ep(Model_358_ice, S1, Node_1),
;            Node_1 == first(Model_358_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_358_ice,
;                          S2,
;                          zero(Model_358_ice),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_358_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!0)))
;                   Epoch!val!1
;                   Epoch!val!2)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!0)))
;          Epoch!val!3
;          a!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_358_ice S1 Node!val!0 Node!val!0)
                (inv Model_358_ice S1 Node!val!0 Node!val!1)
                (inv Model_358_ice S1 Node!val!1 Node!val!0)
                (inv Model_358_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_358_ice S2 Node!val!0 Node!val!0)
           (inv Model_358_ice S2 Node!val!0 Node!val!1)
           (inv Model_358_ice S2 Node!val!1 Node!val!0)
           (inv Model_358_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f20a670>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_359_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_359_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_359_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_359_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_359_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_359_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_359_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_359_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_359_ice,
;                              zero(Model_359_ice),
;                              Epoch_1),
;                           one(Model_359_ice) !=
;                           zero(Model_359_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_359_ice,
;                          S1,
;                          zero(Model_359_ice),
;                          first(Model_359_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_359_ice) ==
;                 ep(Model_359_ice, S1, first(Model_359_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_359_ice,
;                        S1,
;                        zero(Model_359_ice),
;                        first(Model_359_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_359_ice,
;                          S1,
;                          zero(Model_359_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_359_ice,
;                        S1,
;                        zero(Model_359_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_359_ice,
;                           S1,
;                           one(Model_359_ice),
;                           Node_1)),
;                transfer(Model_359_ice,
;                         S1,
;                         one(Model_359_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_359_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_359_ice))),
;                transfer(Model_359_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_359_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_359_ice,
;                       S1,
;                       first(Model_359_ice))),
;                le(Model_359_ice,
;                   one(Model_359_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_359_ice,
;                        S1,
;                        one(Model_359_ice),
;                        first(Model_359_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_359_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_359_ice))),
;                le(Model_359_ice,
;                   one(Model_359_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_359_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_359_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_359_ice, S1, Node_1),
;                     zero(Model_359_ice) ==
;                     ep(Model_359_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_359_ice) ==
;                           ep(Model_359_ice,
;                              S1,
;                              first(Model_359_ice))),
;                       zero(Model_359_ice) ==
;                       one(Model_359_ice))),
;                transfer(Model_359_ice,
;                         S1,
;                         ep(Model_359_ice,
;                            S1,
;                            first(Model_359_ice)),
;                         first(Model_359_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_359_ice) ==
;                ep(Model_359_ice, S1, first(Model_359_ice)),
;                locked(Model_359_ice,
;                       S1,
;                       ep(Model_359_ice,
;                          S1,
;                          first(Model_359_ice)),
;                       first(Model_359_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_359_ice,
;                            S1,
;                            one(Model_359_ice),
;                            Node_1),
;                     zero(Model_359_ice) ==
;                     ep(Model_359_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_359_ice,
;                   ep(Model_359_ice, S1, Node_1),
;                   ep(Model_359_ice,
;                      S1,
;                      first(Model_359_ice))),
;                locked(Model_359_ice,
;                       S1,
;                       ep(Model_359_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_359_ice,
;                       S1,
;                       ep(Model_359_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_359_ice),
;                zero(Model_359_ice) ==
;                ep(Model_359_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_359_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_359_ice,
;                          one(Model_359_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_359_ice,
;                          S1,
;                          one(Model_359_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_359_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_359_ice)),
;                     one(Model_359_ice) ==
;                     ep(Model_359_ice,
;                        S1,
;                        first(Model_359_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_359_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_359_ice))),
;                Not(le(Model_359_ice,
;                       ep(Model_359_ice,
;                          S1,
;                          first(Model_359_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_359_ice, S1, first(Model_359_ice))))),
;  ForAll(Node_1,
;         Or(one(Model_359_ice) ==
;            ep(Model_359_ice, S1, first(Model_359_ice)),
;            held(Model_359_ice, S1, first(Model_359_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_359_ice,
;                          S2,
;                          zero(Model_359_ice),
;                          first(Model_359_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_359_ice () ModelId
;   ModelId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
;        Epoch!val!3
;        Epoch!val!2))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_359_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_359_ice S1 Node!val!0 Node!val!0))
         (inv Model_359_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f1a9760>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_360_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_360_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_360_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_360_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_360_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_360_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_360_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_360_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_360_ice,
;                              zero(Model_360_ice),
;                              Epoch_1),
;                           one(Model_360_ice) !=
;                           zero(Model_360_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_360_ice,
;                          S1,
;                          zero(Model_360_ice),
;                          first(Model_360_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_360_ice) ==
;                 ep(Model_360_ice, S1, first(Model_360_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_360_ice,
;                        S1,
;                        zero(Model_360_ice),
;                        first(Model_360_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_360_ice,
;                          S1,
;                          zero(Model_360_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_360_ice,
;                        S1,
;                        zero(Model_360_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_360_ice,
;                           S1,
;                           one(Model_360_ice),
;                           Node_1)),
;                transfer(Model_360_ice,
;                         S1,
;                         one(Model_360_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_360_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_360_ice))),
;                transfer(Model_360_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_360_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_360_ice,
;                       S1,
;                       first(Model_360_ice))),
;                le(Model_360_ice,
;                   one(Model_360_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_360_ice,
;                        S1,
;                        one(Model_360_ice),
;                        first(Model_360_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_360_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_360_ice))),
;                le(Model_360_ice,
;                   one(Model_360_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_360_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_360_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_360_ice, S1, Node_1),
;                     zero(Model_360_ice) ==
;                     ep(Model_360_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_360_ice) ==
;                           ep(Model_360_ice,
;                              S1,
;                              first(Model_360_ice))),
;                       zero(Model_360_ice) ==
;                       one(Model_360_ice))),
;                transfer(Model_360_ice,
;                         S1,
;                         ep(Model_360_ice,
;                            S1,
;                            first(Model_360_ice)),
;                         first(Model_360_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_360_ice) ==
;                ep(Model_360_ice, S1, first(Model_360_ice)),
;                locked(Model_360_ice,
;                       S1,
;                       ep(Model_360_ice,
;                          S1,
;                          first(Model_360_ice)),
;                       first(Model_360_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_360_ice,
;                            S1,
;                            one(Model_360_ice),
;                            Node_1),
;                     zero(Model_360_ice) ==
;                     ep(Model_360_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_360_ice,
;                   ep(Model_360_ice, S1, Node_1),
;                   ep(Model_360_ice,
;                      S1,
;                      first(Model_360_ice))),
;                locked(Model_360_ice,
;                       S1,
;                       ep(Model_360_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_360_ice,
;                       S1,
;                       ep(Model_360_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_360_ice) ==
;                ep(Model_360_ice, S1, Node_1),
;                Node_1 == first(Model_360_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_360_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_360_ice,
;                          one(Model_360_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_360_ice,
;                          S1,
;                          one(Model_360_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_360_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_360_ice)),
;                     one(Model_360_ice) ==
;                     ep(Model_360_ice,
;                        S1,
;                        first(Model_360_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_360_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_360_ice))),
;                Not(le(Model_360_ice,
;                       ep(Model_360_ice,
;                          S1,
;                          first(Model_360_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_360_ice, S1, first(Model_360_ice))))),
;  ForAll(Node_1,
;         Or(Node_1 == first(Model_360_ice),
;            one(Model_360_ice) ==
;            ep(Model_360_ice, S1, first(Model_360_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_360_ice,
;                          S2,
;                          zero(Model_360_ice),
;                          first(Model_360_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_360_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1
;          Epoch!val!3
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!0)
;                    (= x!2 Node!val!1))
;               Epoch!val!1
;               Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_360_ice S1 Node!val!0 Node!val!0)
                (inv Model_360_ice S1 Node!val!0 Node!val!1)
                (inv Model_360_ice S1 Node!val!1 Node!val!0)
                (inv Model_360_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_360_ice S2 Node!val!0 Node!val!0)
           (inv Model_360_ice S2 Node!val!0 Node!val!1)
           (inv Model_360_ice S2 Node!val!1 Node!val!0)
           (inv Model_360_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f1c38b0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_361_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_361_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_361_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_361_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_361_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_361_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_361_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_361_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_361_ice,
;                              zero(Model_361_ice),
;                              Epoch_1),
;                           one(Model_361_ice) !=
;                           zero(Model_361_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_361_ice,
;                          S1,
;                          zero(Model_361_ice),
;                          first(Model_361_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_361_ice) ==
;                 ep(Model_361_ice, S1, first(Model_361_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_361_ice,
;                        S1,
;                        zero(Model_361_ice),
;                        first(Model_361_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_361_ice,
;                          S1,
;                          zero(Model_361_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_361_ice,
;                        S1,
;                        zero(Model_361_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_361_ice,
;                           S1,
;                           one(Model_361_ice),
;                           Node_1)),
;                transfer(Model_361_ice,
;                         S1,
;                         one(Model_361_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_361_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_361_ice))),
;                transfer(Model_361_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_361_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_361_ice,
;                       S1,
;                       first(Model_361_ice))),
;                le(Model_361_ice,
;                   one(Model_361_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_361_ice,
;                        S1,
;                        one(Model_361_ice),
;                        first(Model_361_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_361_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_361_ice))),
;                le(Model_361_ice,
;                   one(Model_361_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_361_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_361_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_361_ice, S1, Node_1),
;                     zero(Model_361_ice) ==
;                     ep(Model_361_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_361_ice) ==
;                           ep(Model_361_ice,
;                              S1,
;                              first(Model_361_ice))),
;                       zero(Model_361_ice) ==
;                       one(Model_361_ice))),
;                transfer(Model_361_ice,
;                         S1,
;                         ep(Model_361_ice,
;                            S1,
;                            first(Model_361_ice)),
;                         first(Model_361_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_361_ice) ==
;                ep(Model_361_ice, S1, first(Model_361_ice)),
;                locked(Model_361_ice,
;                       S1,
;                       ep(Model_361_ice,
;                          S1,
;                          first(Model_361_ice)),
;                       first(Model_361_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_361_ice,
;                            S1,
;                            one(Model_361_ice),
;                            Node_1),
;                     zero(Model_361_ice) ==
;                     ep(Model_361_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_361_ice,
;                   ep(Model_361_ice, S1, Node_1),
;                   ep(Model_361_ice,
;                      S1,
;                      first(Model_361_ice))),
;                locked(Model_361_ice,
;                       S1,
;                       ep(Model_361_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_361_ice),
;                zero(Model_361_ice) ==
;                ep(Model_361_ice, S1, Node_1),
;                locked(Model_361_ice,
;                       S1,
;                       ep(Model_361_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_361_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_361_ice,
;                          one(Model_361_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_361_ice,
;                          S1,
;                          one(Model_361_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_361_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_361_ice)),
;                     one(Model_361_ice) ==
;                     ep(Model_361_ice,
;                        S1,
;                        first(Model_361_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_361_ice, S1, first(Model_361_ice)),
;                Not(locked(Model_361_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_361_ice))),
;                Not(le(Model_361_ice,
;                       ep(Model_361_ice,
;                          S1,
;                          first(Model_361_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(zero(Model_361_ice) ==
;                ep(Model_361_ice, S1, Node_1)),
;            one(Model_361_ice) ==
;            ep(Model_361_ice, S1, first(Model_361_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_361_ice,
;                          S2,
;                          zero(Model_361_ice),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_361_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!1
;                   Epoch!val!0)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!1
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!1)
;                    (= x!2 Node!val!1))
;               Epoch!val!2
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_361_ice S1 Node!val!0 Node!val!0)
                (inv Model_361_ice S1 Node!val!0 Node!val!1)
                (inv Model_361_ice S1 Node!val!1 Node!val!0)
                (inv Model_361_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_361_ice S2 Node!val!0 Node!val!0)
           (inv Model_361_ice S2 Node!val!0 Node!val!1)
           (inv Model_361_ice S2 Node!val!1 Node!val!0)
           (inv Model_361_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f2823d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_362_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_362_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_362_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_362_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_362_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_362_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_362_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_362_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_362_ice,
;                              zero(Model_362_ice),
;                              Epoch_1),
;                           one(Model_362_ice) !=
;                           zero(Model_362_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_362_ice,
;                          S1,
;                          zero(Model_362_ice),
;                          first(Model_362_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_362_ice) ==
;                 ep(Model_362_ice, S1, first(Model_362_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_362_ice,
;                        S1,
;                        zero(Model_362_ice),
;                        first(Model_362_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_362_ice,
;                          S1,
;                          zero(Model_362_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_362_ice,
;                        S1,
;                        zero(Model_362_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_362_ice,
;                           S1,
;                           one(Model_362_ice),
;                           Node_1)),
;                transfer(Model_362_ice,
;                         S1,
;                         one(Model_362_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_362_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_362_ice))),
;                transfer(Model_362_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_362_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_362_ice,
;                       S1,
;                       first(Model_362_ice))),
;                le(Model_362_ice,
;                   one(Model_362_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_362_ice,
;                        S1,
;                        one(Model_362_ice),
;                        first(Model_362_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_362_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_362_ice))),
;                le(Model_362_ice,
;                   one(Model_362_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_362_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_362_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_362_ice, S1, Node_1),
;                     zero(Model_362_ice) ==
;                     ep(Model_362_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_362_ice) ==
;                           ep(Model_362_ice,
;                              S1,
;                              first(Model_362_ice))),
;                       zero(Model_362_ice) ==
;                       one(Model_362_ice))),
;                transfer(Model_362_ice,
;                         S1,
;                         ep(Model_362_ice,
;                            S1,
;                            first(Model_362_ice)),
;                         first(Model_362_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_362_ice) ==
;                ep(Model_362_ice, S1, first(Model_362_ice)),
;                locked(Model_362_ice,
;                       S1,
;                       ep(Model_362_ice,
;                          S1,
;                          first(Model_362_ice)),
;                       first(Model_362_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_362_ice,
;                            S1,
;                            one(Model_362_ice),
;                            Node_1),
;                     zero(Model_362_ice) ==
;                     ep(Model_362_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_362_ice,
;                   ep(Model_362_ice, S1, Node_1),
;                   ep(Model_362_ice,
;                      S1,
;                      first(Model_362_ice))),
;                locked(Model_362_ice,
;                       S1,
;                       ep(Model_362_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_362_ice,
;                       S1,
;                       ep(Model_362_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_362_ice) ==
;                ep(Model_362_ice, S1, Node_1),
;                Node_1 == first(Model_362_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_362_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_362_ice,
;                          one(Model_362_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_362_ice,
;                          S1,
;                          one(Model_362_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_362_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_362_ice)),
;                     one(Model_362_ice) ==
;                     ep(Model_362_ice,
;                        S1,
;                        first(Model_362_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_362_ice, S1, first(Model_362_ice)),
;                Not(locked(Model_362_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_362_ice))),
;                Not(le(Model_362_ice,
;                       ep(Model_362_ice,
;                          S1,
;                          first(Model_362_ice)),
;                       Epoch_1))))),
;  ForAll(Epoch_1,
;         Not(transfer(Model_362_ice,
;                      S1,
;                      Epoch_1,
;                      first(Model_362_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_362_ice,
;                          S2,
;                          zero(Model_362_ice),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_362_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!3
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_362_ice S1 Node!val!0 Node!val!0)
                (inv Model_362_ice S1 Node!val!0 Node!val!1)
                (inv Model_362_ice S1 Node!val!1 Node!val!0)
                (inv Model_362_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_362_ice S2 Node!val!0 Node!val!0)
           (inv Model_362_ice S2 Node!val!0 Node!val!1)
           (inv Model_362_ice S2 Node!val!1 Node!val!0)
           (inv Model_362_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f2093d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_363_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_363_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_363_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_363_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_363_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_363_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_363_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_363_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_363_ice,
;                              zero(Model_363_ice),
;                              Epoch_1),
;                           one(Model_363_ice) !=
;                           zero(Model_363_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_363_ice,
;                          S1,
;                          zero(Model_363_ice),
;                          first(Model_363_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_363_ice) ==
;                 ep(Model_363_ice, S1, first(Model_363_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_363_ice,
;                        S1,
;                        zero(Model_363_ice),
;                        first(Model_363_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_363_ice,
;                          S1,
;                          zero(Model_363_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_363_ice,
;                        S1,
;                        zero(Model_363_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_363_ice,
;                           S1,
;                           one(Model_363_ice),
;                           Node_1)),
;                transfer(Model_363_ice,
;                         S1,
;                         one(Model_363_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_363_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_363_ice))),
;                transfer(Model_363_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_363_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_363_ice,
;                       S1,
;                       first(Model_363_ice))),
;                le(Model_363_ice,
;                   one(Model_363_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_363_ice,
;                        S1,
;                        one(Model_363_ice),
;                        first(Model_363_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_363_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_363_ice))),
;                le(Model_363_ice,
;                   one(Model_363_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_363_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_363_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_363_ice, S1, Node_1),
;                     zero(Model_363_ice) ==
;                     ep(Model_363_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_363_ice) ==
;                           ep(Model_363_ice,
;                              S1,
;                              first(Model_363_ice))),
;                       zero(Model_363_ice) ==
;                       one(Model_363_ice))),
;                transfer(Model_363_ice,
;                         S1,
;                         ep(Model_363_ice,
;                            S1,
;                            first(Model_363_ice)),
;                         first(Model_363_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_363_ice) ==
;                ep(Model_363_ice, S1, first(Model_363_ice)),
;                locked(Model_363_ice,
;                       S1,
;                       ep(Model_363_ice,
;                          S1,
;                          first(Model_363_ice)),
;                       first(Model_363_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_363_ice,
;                            S1,
;                            one(Model_363_ice),
;                            Node_1),
;                     zero(Model_363_ice) ==
;                     ep(Model_363_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_363_ice,
;                   ep(Model_363_ice, S1, Node_1),
;                   ep(Model_363_ice,
;                      S1,
;                      first(Model_363_ice))),
;                locked(Model_363_ice,
;                       S1,
;                       ep(Model_363_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_363_ice,
;                       S1,
;                       ep(Model_363_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_363_ice) ==
;                ep(Model_363_ice, S1, Node_1),
;                Node_1 == first(Model_363_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_363_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_363_ice,
;                          one(Model_363_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_363_ice,
;                          S1,
;                          one(Model_363_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_363_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_363_ice)),
;                     one(Model_363_ice) ==
;                     ep(Model_363_ice,
;                        S1,
;                        first(Model_363_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_363_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_363_ice))),
;                Not(le(Model_363_ice,
;                       ep(Model_363_ice,
;                          S1,
;                          first(Model_363_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_363_ice, S1, first(Model_363_ice))))),
;  ForAll(Epoch_1,
;         Or(Not(locked(Model_363_ice,
;                       S1,
;                       Epoch_1,
;                       first(Model_363_ice))),
;            Epoch_1 ==
;            ep(Model_363_ice, S1, first(Model_363_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_363_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_363_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;        Epoch!val!3
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;             Epoch!val!2
;             Epoch!val!1)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_363_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_363_ice S1 Node!val!0 Node!val!0))
         (inv Model_363_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f15cd30>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_364_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_364_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_364_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_364_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_364_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_364_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_364_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_364_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_364_ice,
;                              zero(Model_364_ice),
;                              Epoch_1),
;                           one(Model_364_ice) !=
;                           zero(Model_364_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_364_ice,
;                          S1,
;                          zero(Model_364_ice),
;                          first(Model_364_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_364_ice) ==
;                 ep(Model_364_ice, S1, first(Model_364_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_364_ice,
;                        S1,
;                        zero(Model_364_ice),
;                        first(Model_364_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_364_ice,
;                          S1,
;                          zero(Model_364_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_364_ice,
;                        S1,
;                        zero(Model_364_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_364_ice,
;                           S1,
;                           one(Model_364_ice),
;                           Node_1)),
;                transfer(Model_364_ice,
;                         S1,
;                         one(Model_364_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_364_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_364_ice))),
;                transfer(Model_364_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_364_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_364_ice,
;                       S1,
;                       first(Model_364_ice))),
;                le(Model_364_ice,
;                   one(Model_364_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_364_ice,
;                        S1,
;                        one(Model_364_ice),
;                        first(Model_364_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_364_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_364_ice))),
;                le(Model_364_ice,
;                   one(Model_364_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_364_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_364_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_364_ice, S1, Node_1),
;                     zero(Model_364_ice) ==
;                     ep(Model_364_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_364_ice) ==
;                           ep(Model_364_ice,
;                              S1,
;                              first(Model_364_ice))),
;                       zero(Model_364_ice) ==
;                       one(Model_364_ice))),
;                transfer(Model_364_ice,
;                         S1,
;                         ep(Model_364_ice,
;                            S1,
;                            first(Model_364_ice)),
;                         first(Model_364_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_364_ice) ==
;                ep(Model_364_ice, S1, first(Model_364_ice)),
;                locked(Model_364_ice,
;                       S1,
;                       ep(Model_364_ice,
;                          S1,
;                          first(Model_364_ice)),
;                       first(Model_364_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_364_ice,
;                            S1,
;                            one(Model_364_ice),
;                            Node_1),
;                     zero(Model_364_ice) ==
;                     ep(Model_364_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_364_ice,
;                   ep(Model_364_ice, S1, Node_1),
;                   ep(Model_364_ice,
;                      S1,
;                      first(Model_364_ice))),
;                locked(Model_364_ice,
;                       S1,
;                       ep(Model_364_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_364_ice,
;                       S1,
;                       ep(Model_364_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_364_ice) ==
;                ep(Model_364_ice, S1, Node_1),
;                Node_1 == first(Model_364_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_364_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_364_ice,
;                          one(Model_364_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_364_ice,
;                          S1,
;                          one(Model_364_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_364_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_364_ice)),
;                     one(Model_364_ice) ==
;                     ep(Model_364_ice,
;                        S1,
;                        first(Model_364_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_364_ice, S1, first(Model_364_ice)),
;                Not(locked(Model_364_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_364_ice))),
;                Not(le(Model_364_ice,
;                       ep(Model_364_ice,
;                          S1,
;                          first(Model_364_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         ForAll(Epoch_1,
;                Or(Not(transfer(Model_364_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)),
;                   zero(Model_364_ice) ==
;                   ep(Model_364_ice, S1, Node_1)))),
;  And(ForAll(Node_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_364_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
;        Epoch!val!1
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_364_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_364_ice S1 Node!val!0 Node!val!0))
         (inv Model_364_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f096e20>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_365_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_365_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_365_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_365_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_365_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_365_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_365_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_365_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_365_ice,
;                              zero(Model_365_ice),
;                              Epoch_1),
;                           one(Model_365_ice) !=
;                           zero(Model_365_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_365_ice,
;                          S1,
;                          zero(Model_365_ice),
;                          first(Model_365_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_365_ice) ==
;                 ep(Model_365_ice, S1, first(Model_365_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_365_ice,
;                        S1,
;                        zero(Model_365_ice),
;                        first(Model_365_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_365_ice,
;                          S1,
;                          zero(Model_365_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_365_ice,
;                        S1,
;                        zero(Model_365_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_365_ice,
;                           S1,
;                           one(Model_365_ice),
;                           Node_1)),
;                transfer(Model_365_ice,
;                         S1,
;                         one(Model_365_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_365_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_365_ice))),
;                transfer(Model_365_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_365_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_365_ice,
;                       S1,
;                       first(Model_365_ice))),
;                le(Model_365_ice,
;                   one(Model_365_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_365_ice,
;                        S1,
;                        one(Model_365_ice),
;                        first(Model_365_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_365_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_365_ice))),
;                le(Model_365_ice,
;                   one(Model_365_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_365_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_365_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_365_ice, S1, Node_1),
;                     zero(Model_365_ice) ==
;                     ep(Model_365_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_365_ice) ==
;                           ep(Model_365_ice,
;                              S1,
;                              first(Model_365_ice))),
;                       zero(Model_365_ice) ==
;                       one(Model_365_ice))),
;                transfer(Model_365_ice,
;                         S1,
;                         ep(Model_365_ice,
;                            S1,
;                            first(Model_365_ice)),
;                         first(Model_365_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_365_ice) ==
;                ep(Model_365_ice, S1, first(Model_365_ice)),
;                locked(Model_365_ice,
;                       S1,
;                       ep(Model_365_ice,
;                          S1,
;                          first(Model_365_ice)),
;                       first(Model_365_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_365_ice,
;                            S1,
;                            one(Model_365_ice),
;                            Node_1),
;                     zero(Model_365_ice) ==
;                     ep(Model_365_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_365_ice,
;                   ep(Model_365_ice, S1, Node_1),
;                   ep(Model_365_ice,
;                      S1,
;                      first(Model_365_ice))),
;                locked(Model_365_ice,
;                       S1,
;                       ep(Model_365_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(zero(Model_365_ice) ==
;                ep(Model_365_ice, S1, Node_1),
;                locked(Model_365_ice,
;                       S1,
;                       ep(Model_365_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_365_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_365_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_365_ice,
;                          one(Model_365_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_365_ice,
;                          S1,
;                          one(Model_365_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_365_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_365_ice)),
;                     one(Model_365_ice) ==
;                     ep(Model_365_ice,
;                        S1,
;                        first(Model_365_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_365_ice,
;                       ep(Model_365_ice,
;                          S1,
;                          first(Model_365_ice)),
;                       Epoch_1)),
;                Not(locked(Model_365_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_365_ice))),
;                Epoch_1 ==
;                ep(Model_365_ice, S1, first(Model_365_ice))))),
;  ForAll(Node_1,
;         Or(held(Model_365_ice, S1, first(Model_365_ice)),
;            And(zero(Model_365_ice) ==
;                ep(Model_365_ice, S1, Node_1),
;                one(Model_365_ice) ==
;                ep(Model_365_ice, S1, first(Model_365_ice))),
;            Node_1 == first(Model_365_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_365_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_365_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   Epoch!val!0)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1))
;               (not (= x!2 Node!val!2)))
;          Epoch!val!3
;          (ite a!1 Epoch!val!2 a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_365_ice S1 Node!val!0 Node!val!0)
                (inv Model_365_ice S1 Node!val!0 Node!val!1)
                (inv Model_365_ice S1 Node!val!0 Node!val!2)
                (inv Model_365_ice S1 Node!val!1 Node!val!0)
                (inv Model_365_ice S1 Node!val!1 Node!val!1)
                (inv Model_365_ice S1 Node!val!1 Node!val!2)
                (inv Model_365_ice S1 Node!val!2 Node!val!0)
                (inv Model_365_ice S1 Node!val!2 Node!val!1)
                (inv Model_365_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_365_ice S2 Node!val!0 Node!val!0)
           (inv Model_365_ice S2 Node!val!0 Node!val!1)
           (inv Model_365_ice S2 Node!val!0 Node!val!2)
           (inv Model_365_ice S2 Node!val!1 Node!val!0)
           (inv Model_365_ice S2 Node!val!1 Node!val!1)
           (inv Model_365_ice S2 Node!val!1 Node!val!2)
           (inv Model_365_ice S2 Node!val!2 Node!val!0)
           (inv Model_365_ice S2 Node!val!2 Node!val!1)
           (inv Model_365_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f282ac0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_366_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_366_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_366_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_366_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_366_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_366_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_366_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_366_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_366_ice,
;                              zero(Model_366_ice),
;                              Epoch_1),
;                           one(Model_366_ice) !=
;                           zero(Model_366_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_366_ice,
;                          S1,
;                          zero(Model_366_ice),
;                          first(Model_366_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_366_ice) ==
;                 ep(Model_366_ice, S1, first(Model_366_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_366_ice,
;                        S1,
;                        zero(Model_366_ice),
;                        first(Model_366_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_366_ice,
;                          S1,
;                          zero(Model_366_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_366_ice,
;                        S1,
;                        zero(Model_366_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_366_ice,
;                           S1,
;                           one(Model_366_ice),
;                           Node_1)),
;                transfer(Model_366_ice,
;                         S1,
;                         one(Model_366_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_366_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_366_ice))),
;                transfer(Model_366_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_366_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_366_ice,
;                       S1,
;                       first(Model_366_ice))),
;                le(Model_366_ice,
;                   one(Model_366_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_366_ice,
;                        S1,
;                        one(Model_366_ice),
;                        first(Model_366_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_366_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_366_ice))),
;                le(Model_366_ice,
;                   one(Model_366_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_366_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_366_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_366_ice, S1, Node_1),
;                     zero(Model_366_ice) ==
;                     ep(Model_366_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_366_ice) ==
;                           ep(Model_366_ice,
;                              S1,
;                              first(Model_366_ice))),
;                       zero(Model_366_ice) ==
;                       one(Model_366_ice))),
;                transfer(Model_366_ice,
;                         S1,
;                         ep(Model_366_ice,
;                            S1,
;                            first(Model_366_ice)),
;                         first(Model_366_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_366_ice) ==
;                ep(Model_366_ice, S1, first(Model_366_ice)),
;                locked(Model_366_ice,
;                       S1,
;                       ep(Model_366_ice,
;                          S1,
;                          first(Model_366_ice)),
;                       first(Model_366_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_366_ice,
;                            S1,
;                            one(Model_366_ice),
;                            Node_1),
;                     zero(Model_366_ice) ==
;                     ep(Model_366_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_366_ice,
;                   ep(Model_366_ice, S1, Node_1),
;                   ep(Model_366_ice,
;                      S1,
;                      first(Model_366_ice))),
;                locked(Model_366_ice,
;                       S1,
;                       ep(Model_366_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_366_ice,
;                       S1,
;                       ep(Model_366_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_366_ice) ==
;                ep(Model_366_ice, S1, Node_1),
;                Node_1 == first(Model_366_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_366_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_366_ice,
;                          one(Model_366_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_366_ice,
;                          S1,
;                          one(Model_366_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_366_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_366_ice)),
;                     one(Model_366_ice) ==
;                     ep(Model_366_ice,
;                        S1,
;                        first(Model_366_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_366_ice, S1, first(Model_366_ice)),
;                Not(locked(Model_366_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_366_ice))),
;                Not(le(Model_366_ice,
;                       ep(Model_366_ice,
;                          S1,
;                          first(Model_366_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(one(Model_366_ice) ==
;            ep(Model_366_ice, S1, first(Model_366_ice)),
;            Node_1 == first(Model_366_ice),
;            zero(Model_366_ice) == one(Model_366_ice),
;            held(Model_366_ice, S1, first(Model_366_ice)))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_366_ice,
;                          S2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun Model_366_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!2
;                   Epoch!val!1)))
;     (ite a!1 Epoch!val!3 a!2)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_366_ice S1 Node!val!0 Node!val!0)
                (inv Model_366_ice S1 Node!val!0 Node!val!1)
                (inv Model_366_ice S1 Node!val!0 Node!val!2)
                (inv Model_366_ice S1 Node!val!1 Node!val!0)
                (inv Model_366_ice S1 Node!val!1 Node!val!1)
                (inv Model_366_ice S1 Node!val!1 Node!val!2)
                (inv Model_366_ice S1 Node!val!2 Node!val!0)
                (inv Model_366_ice S1 Node!val!2 Node!val!1)
                (inv Model_366_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_366_ice S2 Node!val!0 Node!val!0)
           (inv Model_366_ice S2 Node!val!0 Node!val!1)
           (inv Model_366_ice S2 Node!val!0 Node!val!2)
           (inv Model_366_ice S2 Node!val!1 Node!val!0)
           (inv Model_366_ice S2 Node!val!1 Node!val!1)
           (inv Model_366_ice S2 Node!val!1 Node!val!2)
           (inv Model_366_ice S2 Node!val!2 Node!val!0)
           (inv Model_366_ice S2 Node!val!2 Node!val!1)
           (inv Model_366_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0bad90>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_367_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_367_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_367_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_367_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_367_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_367_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_367_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_367_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_367_ice,
;                              zero(Model_367_ice),
;                              Epoch_1),
;                           one(Model_367_ice) !=
;                           zero(Model_367_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_367_ice,
;                          S1,
;                          zero(Model_367_ice),
;                          first(Model_367_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_367_ice) ==
;                 ep(Model_367_ice, S1, first(Model_367_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_367_ice,
;                        S1,
;                        zero(Model_367_ice),
;                        first(Model_367_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_367_ice,
;                          S1,
;                          zero(Model_367_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_367_ice,
;                        S1,
;                        zero(Model_367_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_367_ice,
;                           S1,
;                           one(Model_367_ice),
;                           Node_1)),
;                transfer(Model_367_ice,
;                         S1,
;                         one(Model_367_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_367_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_367_ice))),
;                transfer(Model_367_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_367_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_367_ice,
;                       S1,
;                       first(Model_367_ice))),
;                le(Model_367_ice,
;                   one(Model_367_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_367_ice,
;                        S1,
;                        one(Model_367_ice),
;                        first(Model_367_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_367_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_367_ice))),
;                le(Model_367_ice,
;                   one(Model_367_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_367_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_367_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_367_ice, S1, Node_1),
;                     zero(Model_367_ice) ==
;                     ep(Model_367_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_367_ice) ==
;                           ep(Model_367_ice,
;                              S1,
;                              first(Model_367_ice))),
;                       zero(Model_367_ice) ==
;                       one(Model_367_ice))),
;                transfer(Model_367_ice,
;                         S1,
;                         ep(Model_367_ice,
;                            S1,
;                            first(Model_367_ice)),
;                         first(Model_367_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_367_ice) ==
;                ep(Model_367_ice, S1, first(Model_367_ice)),
;                locked(Model_367_ice,
;                       S1,
;                       ep(Model_367_ice,
;                          S1,
;                          first(Model_367_ice)),
;                       first(Model_367_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_367_ice,
;                            S1,
;                            one(Model_367_ice),
;                            Node_1),
;                     zero(Model_367_ice) ==
;                     ep(Model_367_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_367_ice,
;                   ep(Model_367_ice, S1, Node_1),
;                   ep(Model_367_ice,
;                      S1,
;                      first(Model_367_ice))),
;                locked(Model_367_ice,
;                       S1,
;                       ep(Model_367_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_367_ice,
;                       S1,
;                       ep(Model_367_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_367_ice) ==
;                ep(Model_367_ice, S1, Node_1),
;                Node_1 == first(Model_367_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_367_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_367_ice,
;                          one(Model_367_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_367_ice,
;                          S1,
;                          one(Model_367_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_367_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_367_ice)),
;                     one(Model_367_ice) ==
;                     ep(Model_367_ice,
;                        S1,
;                        first(Model_367_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_367_ice,
;                       ep(Model_367_ice,
;                          S1,
;                          first(Model_367_ice)),
;                       Epoch_1)),
;                Not(locked(Model_367_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_367_ice))),
;                Epoch_1 ==
;                ep(Model_367_ice, S1, first(Model_367_ice))))),
;  ForAll(Node_1,
;         Or(Not(Or(Not(held(Model_367_ice, S1, Node_1)),
;                   one(Model_367_ice) ==
;                   ep(Model_367_ice,
;                      S1,
;                      first(Model_367_ice)))),
;            zero(Model_367_ice) ==
;            ep(Model_367_ice, S1, Node_1),
;            Node_1 == first(Model_367_ice))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_367_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
;        Epoch!val!3
;        Epoch!val!1))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_367_ice S1 Node!val!0 Node!val!0)
                (inv Model_367_ice S1 Node!val!0 Node!val!1)
                (inv Model_367_ice S1 Node!val!1 Node!val!0)
                (inv Model_367_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_367_ice S2 Node!val!0 Node!val!0)
           (inv Model_367_ice S2 Node!val!0 Node!val!1)
           (inv Model_367_ice S2 Node!val!1 Node!val!0)
           (inv Model_367_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f306220>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_368_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_368_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_368_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_368_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_368_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_368_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_368_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_368_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_368_ice,
;                              zero(Model_368_ice),
;                              Epoch_1),
;                           one(Model_368_ice) !=
;                           zero(Model_368_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_368_ice,
;                          S1,
;                          zero(Model_368_ice),
;                          first(Model_368_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_368_ice) ==
;                 ep(Model_368_ice, S1, first(Model_368_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_368_ice,
;                        S1,
;                        zero(Model_368_ice),
;                        first(Model_368_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_368_ice,
;                          S1,
;                          zero(Model_368_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_368_ice,
;                        S1,
;                        zero(Model_368_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_368_ice,
;                           S1,
;                           one(Model_368_ice),
;                           Node_1)),
;                transfer(Model_368_ice,
;                         S1,
;                         one(Model_368_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_368_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_368_ice))),
;                transfer(Model_368_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_368_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_368_ice,
;                       S1,
;                       first(Model_368_ice))),
;                le(Model_368_ice,
;                   one(Model_368_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_368_ice,
;                        S1,
;                        one(Model_368_ice),
;                        first(Model_368_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_368_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_368_ice))),
;                le(Model_368_ice,
;                   one(Model_368_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_368_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_368_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_368_ice, S1, Node_1),
;                     zero(Model_368_ice) ==
;                     ep(Model_368_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_368_ice) ==
;                           ep(Model_368_ice,
;                              S1,
;                              first(Model_368_ice))),
;                       zero(Model_368_ice) ==
;                       one(Model_368_ice))),
;                transfer(Model_368_ice,
;                         S1,
;                         ep(Model_368_ice,
;                            S1,
;                            first(Model_368_ice)),
;                         first(Model_368_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_368_ice) ==
;                ep(Model_368_ice, S1, first(Model_368_ice)),
;                locked(Model_368_ice,
;                       S1,
;                       ep(Model_368_ice,
;                          S1,
;                          first(Model_368_ice)),
;                       first(Model_368_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_368_ice,
;                            S1,
;                            one(Model_368_ice),
;                            Node_1),
;                     zero(Model_368_ice) ==
;                     ep(Model_368_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_368_ice,
;                   ep(Model_368_ice, S1, Node_1),
;                   ep(Model_368_ice,
;                      S1,
;                      first(Model_368_ice))),
;                locked(Model_368_ice,
;                       S1,
;                       ep(Model_368_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_368_ice,
;                       S1,
;                       ep(Model_368_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_368_ice) ==
;                ep(Model_368_ice, S1, Node_1),
;                Node_1 == first(Model_368_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_368_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_368_ice,
;                          one(Model_368_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_368_ice,
;                          S1,
;                          one(Model_368_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_368_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_368_ice)),
;                     one(Model_368_ice) ==
;                     ep(Model_368_ice,
;                        S1,
;                        first(Model_368_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_368_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_368_ice))),
;                Not(le(Model_368_ice,
;                       ep(Model_368_ice,
;                          S1,
;                          first(Model_368_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_368_ice, S1, first(Model_368_ice))))),
;  ForAll(Node_1,
;         Or(zero(Model_368_ice) == one(Model_368_ice),
;            le(Model_368_ice,
;               ep(Model_368_ice, S1, first(Model_368_ice)),
;               ep(Model_368_ice, S1, Node_1)),
;            zero(Model_368_ice) ==
;            ep(Model_368_ice, S1, Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_368_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_368_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!3
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1 Epoch!val!2 Epoch!val!0)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_368_ice S1 Node!val!0 Node!val!0)
                (inv Model_368_ice S1 Node!val!0 Node!val!1)
                (inv Model_368_ice S1 Node!val!1 Node!val!0)
                (inv Model_368_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_368_ice S2 Node!val!0 Node!val!0)
           (inv Model_368_ice S2 Node!val!0 Node!val!1)
           (inv Model_368_ice S2 Node!val!1 Node!val!0)
           (inv Model_368_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f236fa0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_369_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_369_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_369_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_369_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_369_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_369_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_369_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_369_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_369_ice,
;                              zero(Model_369_ice),
;                              Epoch_1),
;                           one(Model_369_ice) !=
;                           zero(Model_369_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_369_ice,
;                          S1,
;                          zero(Model_369_ice),
;                          first(Model_369_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_369_ice) ==
;                 ep(Model_369_ice, S1, first(Model_369_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_369_ice,
;                        S1,
;                        zero(Model_369_ice),
;                        first(Model_369_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_369_ice,
;                          S1,
;                          zero(Model_369_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_369_ice,
;                        S1,
;                        zero(Model_369_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_369_ice,
;                           S1,
;                           one(Model_369_ice),
;                           Node_1)),
;                transfer(Model_369_ice,
;                         S1,
;                         one(Model_369_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_369_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_369_ice))),
;                transfer(Model_369_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_369_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_369_ice,
;                       S1,
;                       first(Model_369_ice))),
;                le(Model_369_ice,
;                   one(Model_369_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_369_ice,
;                        S1,
;                        one(Model_369_ice),
;                        first(Model_369_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_369_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_369_ice))),
;                le(Model_369_ice,
;                   one(Model_369_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_369_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_369_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_369_ice, S1, Node_1),
;                     zero(Model_369_ice) ==
;                     ep(Model_369_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_369_ice) ==
;                           ep(Model_369_ice,
;                              S1,
;                              first(Model_369_ice))),
;                       zero(Model_369_ice) ==
;                       one(Model_369_ice))),
;                transfer(Model_369_ice,
;                         S1,
;                         ep(Model_369_ice,
;                            S1,
;                            first(Model_369_ice)),
;                         first(Model_369_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_369_ice) ==
;                ep(Model_369_ice, S1, first(Model_369_ice)),
;                locked(Model_369_ice,
;                       S1,
;                       ep(Model_369_ice,
;                          S1,
;                          first(Model_369_ice)),
;                       first(Model_369_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_369_ice,
;                            S1,
;                            one(Model_369_ice),
;                            Node_1),
;                     zero(Model_369_ice) ==
;                     ep(Model_369_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_369_ice,
;                   ep(Model_369_ice, S1, Node_1),
;                   ep(Model_369_ice,
;                      S1,
;                      first(Model_369_ice))),
;                locked(Model_369_ice,
;                       S1,
;                       ep(Model_369_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_369_ice),
;                zero(Model_369_ice) ==
;                ep(Model_369_ice, S1, Node_1),
;                locked(Model_369_ice,
;                       S1,
;                       ep(Model_369_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_369_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_369_ice,
;                          one(Model_369_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_369_ice,
;                          S1,
;                          one(Model_369_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_369_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_369_ice)),
;                     one(Model_369_ice) ==
;                     ep(Model_369_ice,
;                        S1,
;                        first(Model_369_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_369_ice, S1, first(Model_369_ice)),
;                Not(locked(Model_369_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_369_ice))),
;                Not(le(Model_369_ice,
;                       ep(Model_369_ice,
;                          S1,
;                          first(Model_369_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(And(held(Model_369_ice, S1, Node_1),
;                    one(Model_369_ice) ==
;                    ep(Model_369_ice,
;                       S1,
;                       first(Model_369_ice)))),
;            Node_1 == first(Model_369_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_369_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_369_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!3
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     Epoch!val!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_369_ice S1 Node!val!0 Node!val!0)
                (inv Model_369_ice S1 Node!val!0 Node!val!1)
                (inv Model_369_ice S1 Node!val!1 Node!val!0)
                (inv Model_369_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_369_ice S2 Node!val!0 Node!val!0)
           (inv Model_369_ice S2 Node!val!0 Node!val!1)
           (inv Model_369_ice S2 Node!val!1 Node!val!0)
           (inv Model_369_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0c33d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_370_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_370_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_370_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_370_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_370_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_370_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_370_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_370_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_370_ice,
;                              zero(Model_370_ice),
;                              Epoch_1),
;                           one(Model_370_ice) !=
;                           zero(Model_370_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_370_ice,
;                          S1,
;                          zero(Model_370_ice),
;                          first(Model_370_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_370_ice) ==
;                 ep(Model_370_ice, S1, first(Model_370_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_370_ice,
;                        S1,
;                        zero(Model_370_ice),
;                        first(Model_370_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_370_ice,
;                          S1,
;                          zero(Model_370_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_370_ice,
;                        S1,
;                        zero(Model_370_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_370_ice,
;                           S1,
;                           one(Model_370_ice),
;                           Node_1)),
;                transfer(Model_370_ice,
;                         S1,
;                         one(Model_370_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_370_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_370_ice))),
;                transfer(Model_370_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_370_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_370_ice,
;                       S1,
;                       first(Model_370_ice))),
;                le(Model_370_ice,
;                   one(Model_370_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_370_ice,
;                        S1,
;                        one(Model_370_ice),
;                        first(Model_370_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_370_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_370_ice))),
;                le(Model_370_ice,
;                   one(Model_370_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_370_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_370_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_370_ice, S1, Node_1),
;                     zero(Model_370_ice) ==
;                     ep(Model_370_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_370_ice) ==
;                           ep(Model_370_ice,
;                              S1,
;                              first(Model_370_ice))),
;                       zero(Model_370_ice) ==
;                       one(Model_370_ice))),
;                transfer(Model_370_ice,
;                         S1,
;                         ep(Model_370_ice,
;                            S1,
;                            first(Model_370_ice)),
;                         first(Model_370_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_370_ice) ==
;                ep(Model_370_ice, S1, first(Model_370_ice)),
;                locked(Model_370_ice,
;                       S1,
;                       ep(Model_370_ice,
;                          S1,
;                          first(Model_370_ice)),
;                       first(Model_370_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_370_ice,
;                            S1,
;                            one(Model_370_ice),
;                            Node_1),
;                     zero(Model_370_ice) ==
;                     ep(Model_370_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_370_ice,
;                   ep(Model_370_ice, S1, Node_1),
;                   ep(Model_370_ice,
;                      S1,
;                      first(Model_370_ice))),
;                locked(Model_370_ice,
;                       S1,
;                       ep(Model_370_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_370_ice),
;                locked(Model_370_ice,
;                       S1,
;                       ep(Model_370_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_370_ice) ==
;                ep(Model_370_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_370_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_370_ice,
;                          one(Model_370_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_370_ice,
;                          S1,
;                          one(Model_370_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_370_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_370_ice)),
;                     one(Model_370_ice) ==
;                     ep(Model_370_ice,
;                        S1,
;                        first(Model_370_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_370_ice, S1, first(Model_370_ice)),
;                Not(locked(Model_370_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_370_ice))),
;                Not(le(Model_370_ice,
;                       ep(Model_370_ice,
;                          S1,
;                          first(Model_370_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(locked(Model_370_ice,
;                       S1,
;                       ep(Model_370_ice, S1, Node_1),
;                       first(Model_370_ice))),
;            Node_1 == first(Model_370_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_370_ice,
;                          S2,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_370_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!0))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!0)))
;                   Epoch!val!3
;                   Epoch!val!4)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!0)))
;          Epoch!val!2
;          a!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_370_ice S1 Node!val!0 Node!val!0)
                (inv Model_370_ice S1 Node!val!0 Node!val!1)
                (inv Model_370_ice S1 Node!val!1 Node!val!0)
                (inv Model_370_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_370_ice S2 Node!val!0 Node!val!0)
           (inv Model_370_ice S2 Node!val!0 Node!val!1)
           (inv Model_370_ice S2 Node!val!1 Node!val!0)
           (inv Model_370_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f08d310>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_371_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_371_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_371_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_371_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_371_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_371_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_371_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_371_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_371_ice,
;                              zero(Model_371_ice),
;                              Epoch_1),
;                           one(Model_371_ice) !=
;                           zero(Model_371_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_371_ice,
;                          S1,
;                          zero(Model_371_ice),
;                          first(Model_371_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_371_ice) ==
;                 ep(Model_371_ice, S1, first(Model_371_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_371_ice,
;                        S1,
;                        zero(Model_371_ice),
;                        first(Model_371_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_371_ice,
;                          S1,
;                          zero(Model_371_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_371_ice,
;                        S1,
;                        zero(Model_371_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_371_ice,
;                           S1,
;                           one(Model_371_ice),
;                           Node_1)),
;                transfer(Model_371_ice,
;                         S1,
;                         one(Model_371_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_371_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_371_ice))),
;                transfer(Model_371_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_371_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_371_ice,
;                       S1,
;                       first(Model_371_ice))),
;                le(Model_371_ice,
;                   one(Model_371_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_371_ice,
;                        S1,
;                        one(Model_371_ice),
;                        first(Model_371_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_371_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_371_ice))),
;                le(Model_371_ice,
;                   one(Model_371_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_371_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_371_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_371_ice, S1, Node_1),
;                     zero(Model_371_ice) ==
;                     ep(Model_371_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_371_ice) ==
;                           ep(Model_371_ice,
;                              S1,
;                              first(Model_371_ice))),
;                       zero(Model_371_ice) ==
;                       one(Model_371_ice))),
;                transfer(Model_371_ice,
;                         S1,
;                         ep(Model_371_ice,
;                            S1,
;                            first(Model_371_ice)),
;                         first(Model_371_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_371_ice) ==
;                ep(Model_371_ice, S1, first(Model_371_ice)),
;                locked(Model_371_ice,
;                       S1,
;                       ep(Model_371_ice,
;                          S1,
;                          first(Model_371_ice)),
;                       first(Model_371_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_371_ice,
;                            S1,
;                            one(Model_371_ice),
;                            Node_1),
;                     zero(Model_371_ice) ==
;                     ep(Model_371_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_371_ice,
;                   ep(Model_371_ice, S1, Node_1),
;                   ep(Model_371_ice,
;                      S1,
;                      first(Model_371_ice))),
;                locked(Model_371_ice,
;                       S1,
;                       ep(Model_371_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_371_ice,
;                       S1,
;                       ep(Model_371_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_371_ice) ==
;                ep(Model_371_ice, S1, Node_1),
;                Node_1 == first(Model_371_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_371_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_371_ice,
;                          one(Model_371_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_371_ice,
;                          S1,
;                          one(Model_371_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_371_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_371_ice)),
;                     one(Model_371_ice) ==
;                     ep(Model_371_ice,
;                        S1,
;                        first(Model_371_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_371_ice,
;                       ep(Model_371_ice,
;                          S1,
;                          first(Model_371_ice)),
;                       Epoch_1)),
;                Not(locked(Model_371_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_371_ice))),
;                Epoch_1 ==
;                ep(Model_371_ice, S1, first(Model_371_ice))))),
;  ForAll(Node_1,
;         Or(zero(Model_371_ice) ==
;            ep(Model_371_ice, S1, Node_1),
;            Not(Or(Not(Node_1 == first(Model_371_ice)),
;                   zero(Model_371_ice) == one(Model_371_ice))),
;            Not(Or(zero(Model_371_ice) == one(Model_371_ice),
;                   one(Model_371_ice) ==
;                   ep(Model_371_ice,
;                      S1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_371_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!2
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!0
;     Epoch!val!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!1))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_371_ice S1 Node!val!0 Node!val!0)
                (inv Model_371_ice S1 Node!val!0 Node!val!1)
                (inv Model_371_ice S1 Node!val!1 Node!val!0)
                (inv Model_371_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_371_ice S2 Node!val!0 Node!val!0)
           (inv Model_371_ice S2 Node!val!0 Node!val!1)
           (inv Model_371_ice S2 Node!val!1 Node!val!0)
           (inv Model_371_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0ba160>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_372_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_372_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_372_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_372_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_372_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_372_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_372_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_372_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_372_ice,
;                              zero(Model_372_ice),
;                              Epoch_1),
;                           one(Model_372_ice) !=
;                           zero(Model_372_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_372_ice,
;                          S1,
;                          zero(Model_372_ice),
;                          first(Model_372_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_372_ice) ==
;                 ep(Model_372_ice, S1, first(Model_372_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_372_ice,
;                        S1,
;                        zero(Model_372_ice),
;                        first(Model_372_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_372_ice,
;                          S1,
;                          zero(Model_372_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_372_ice,
;                        S1,
;                        zero(Model_372_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_372_ice,
;                           S1,
;                           one(Model_372_ice),
;                           Node_1)),
;                transfer(Model_372_ice,
;                         S1,
;                         one(Model_372_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_372_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_372_ice))),
;                transfer(Model_372_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_372_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_372_ice,
;                       S1,
;                       first(Model_372_ice))),
;                le(Model_372_ice,
;                   one(Model_372_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_372_ice,
;                        S1,
;                        one(Model_372_ice),
;                        first(Model_372_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_372_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_372_ice))),
;                le(Model_372_ice,
;                   one(Model_372_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_372_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_372_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_372_ice, S1, Node_1),
;                     zero(Model_372_ice) ==
;                     ep(Model_372_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_372_ice) ==
;                           ep(Model_372_ice,
;                              S1,
;                              first(Model_372_ice))),
;                       zero(Model_372_ice) ==
;                       one(Model_372_ice))),
;                transfer(Model_372_ice,
;                         S1,
;                         ep(Model_372_ice,
;                            S1,
;                            first(Model_372_ice)),
;                         first(Model_372_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_372_ice) ==
;                ep(Model_372_ice, S1, first(Model_372_ice)),
;                locked(Model_372_ice,
;                       S1,
;                       ep(Model_372_ice,
;                          S1,
;                          first(Model_372_ice)),
;                       first(Model_372_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_372_ice,
;                            S1,
;                            one(Model_372_ice),
;                            Node_1),
;                     zero(Model_372_ice) ==
;                     ep(Model_372_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_372_ice,
;                   ep(Model_372_ice, S1, Node_1),
;                   ep(Model_372_ice,
;                      S1,
;                      first(Model_372_ice))),
;                locked(Model_372_ice,
;                       S1,
;                       ep(Model_372_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_372_ice,
;                       S1,
;                       ep(Model_372_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_372_ice) ==
;                ep(Model_372_ice, S1, Node_1),
;                Node_1 == first(Model_372_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_372_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_372_ice,
;                          one(Model_372_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_372_ice,
;                          S1,
;                          one(Model_372_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_372_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_372_ice)),
;                     one(Model_372_ice) ==
;                     ep(Model_372_ice,
;                        S1,
;                        first(Model_372_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_372_ice, S1, first(Model_372_ice)),
;                Not(locked(Model_372_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_372_ice))),
;                Not(le(Model_372_ice,
;                       ep(Model_372_ice,
;                          S1,
;                          first(Model_372_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_372_ice,
;                         S1,
;                         ep(Model_372_ice,
;                            S1,
;                            first(Model_372_ice)),
;                         Node_1)),
;            Node_1 == first(Model_372_ice))),
;  And(ForAll(Node_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_372_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!2))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!2)))
;          Epoch!val!4
;          (ite a!1 Epoch!val!1 Epoch!val!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_372_ice S1 Node!val!0 Node!val!0)
                (inv Model_372_ice S1 Node!val!0 Node!val!1)
                (inv Model_372_ice S1 Node!val!0 Node!val!2)
                (inv Model_372_ice S1 Node!val!1 Node!val!0)
                (inv Model_372_ice S1 Node!val!1 Node!val!1)
                (inv Model_372_ice S1 Node!val!1 Node!val!2)
                (inv Model_372_ice S1 Node!val!2 Node!val!0)
                (inv Model_372_ice S1 Node!val!2 Node!val!1)
                (inv Model_372_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_372_ice S2 Node!val!0 Node!val!0)
           (inv Model_372_ice S2 Node!val!0 Node!val!1)
           (inv Model_372_ice S2 Node!val!0 Node!val!2)
           (inv Model_372_ice S2 Node!val!1 Node!val!0)
           (inv Model_372_ice S2 Node!val!1 Node!val!1)
           (inv Model_372_ice S2 Node!val!1 Node!val!2)
           (inv Model_372_ice S2 Node!val!2 Node!val!0)
           (inv Model_372_ice S2 Node!val!2 Node!val!1)
           (inv Model_372_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f08d5e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_373_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_373_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_373_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_373_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_373_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_373_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_373_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_373_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_373_ice,
;                              zero(Model_373_ice),
;                              Epoch_1),
;                           one(Model_373_ice) !=
;                           zero(Model_373_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_373_ice,
;                          S1,
;                          zero(Model_373_ice),
;                          first(Model_373_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_373_ice) ==
;                 ep(Model_373_ice, S1, first(Model_373_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_373_ice,
;                        S1,
;                        zero(Model_373_ice),
;                        first(Model_373_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_373_ice,
;                          S1,
;                          zero(Model_373_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_373_ice,
;                        S1,
;                        zero(Model_373_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_373_ice,
;                           S1,
;                           one(Model_373_ice),
;                           Node_1)),
;                transfer(Model_373_ice,
;                         S1,
;                         one(Model_373_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_373_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_373_ice))),
;                transfer(Model_373_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_373_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_373_ice,
;                       S1,
;                       first(Model_373_ice))),
;                le(Model_373_ice,
;                   one(Model_373_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_373_ice,
;                        S1,
;                        one(Model_373_ice),
;                        first(Model_373_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_373_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_373_ice))),
;                le(Model_373_ice,
;                   one(Model_373_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_373_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_373_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_373_ice, S1, Node_1),
;                     zero(Model_373_ice) ==
;                     ep(Model_373_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_373_ice) ==
;                           ep(Model_373_ice,
;                              S1,
;                              first(Model_373_ice))),
;                       zero(Model_373_ice) ==
;                       one(Model_373_ice))),
;                transfer(Model_373_ice,
;                         S1,
;                         ep(Model_373_ice,
;                            S1,
;                            first(Model_373_ice)),
;                         first(Model_373_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_373_ice) ==
;                ep(Model_373_ice, S1, first(Model_373_ice)),
;                locked(Model_373_ice,
;                       S1,
;                       ep(Model_373_ice,
;                          S1,
;                          first(Model_373_ice)),
;                       first(Model_373_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_373_ice,
;                            S1,
;                            one(Model_373_ice),
;                            Node_1),
;                     zero(Model_373_ice) ==
;                     ep(Model_373_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_373_ice,
;                   ep(Model_373_ice, S1, Node_1),
;                   ep(Model_373_ice,
;                      S1,
;                      first(Model_373_ice))),
;                locked(Model_373_ice,
;                       S1,
;                       ep(Model_373_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(zero(Model_373_ice) ==
;                ep(Model_373_ice, S1, Node_1),
;                locked(Model_373_ice,
;                       S1,
;                       ep(Model_373_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_373_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_373_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_373_ice,
;                          one(Model_373_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_373_ice,
;                          S1,
;                          one(Model_373_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_373_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_373_ice)),
;                     one(Model_373_ice) ==
;                     ep(Model_373_ice,
;                        S1,
;                        first(Model_373_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_373_ice, S1, first(Model_373_ice)),
;                Not(locked(Model_373_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_373_ice))),
;                Not(le(Model_373_ice,
;                       ep(Model_373_ice,
;                          S1,
;                          first(Model_373_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(locked(Model_373_ice,
;                       S1,
;                       ep(Model_373_ice,
;                          S1,
;                          first(Model_373_ice)),
;                       Node_1)),
;            le(Model_373_ice,
;               ep(Model_373_ice, S1, Node_1),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_373_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!0)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (= x!2 Node!val!1))
;                   Epoch!val!3
;                   (ite (and (= x!0 ModelId!val!0)
;                             (= x!1 StateId!val!0)
;                             (= x!2 Node!val!1))
;                        Epoch!val!2
;                        a!1))))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_373_ice S1 Node!val!0 Node!val!0)
                (inv Model_373_ice S1 Node!val!0 Node!val!1)
                (inv Model_373_ice S1 Node!val!1 Node!val!0)
                (inv Model_373_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_373_ice S2 Node!val!0 Node!val!0)
           (inv Model_373_ice S2 Node!val!0 Node!val!1)
           (inv Model_373_ice S2 Node!val!1 Node!val!0)
           (inv Model_373_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f2881f0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_374_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_374_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_374_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_374_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_374_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_374_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_374_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_374_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_374_ice,
;                              zero(Model_374_ice),
;                              Epoch_1),
;                           one(Model_374_ice) !=
;                           zero(Model_374_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_374_ice,
;                          S1,
;                          zero(Model_374_ice),
;                          first(Model_374_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_374_ice) ==
;                 ep(Model_374_ice, S1, first(Model_374_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_374_ice,
;                        S1,
;                        zero(Model_374_ice),
;                        first(Model_374_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_374_ice,
;                          S1,
;                          zero(Model_374_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_374_ice,
;                        S1,
;                        zero(Model_374_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_374_ice,
;                           S1,
;                           one(Model_374_ice),
;                           Node_1)),
;                transfer(Model_374_ice,
;                         S1,
;                         one(Model_374_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_374_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_374_ice))),
;                transfer(Model_374_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_374_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_374_ice,
;                       S1,
;                       first(Model_374_ice))),
;                le(Model_374_ice,
;                   one(Model_374_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_374_ice,
;                        S1,
;                        one(Model_374_ice),
;                        first(Model_374_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_374_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_374_ice))),
;                le(Model_374_ice,
;                   one(Model_374_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_374_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_374_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_374_ice, S1, Node_1),
;                     zero(Model_374_ice) ==
;                     ep(Model_374_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_374_ice) ==
;                           ep(Model_374_ice,
;                              S1,
;                              first(Model_374_ice))),
;                       zero(Model_374_ice) ==
;                       one(Model_374_ice))),
;                transfer(Model_374_ice,
;                         S1,
;                         ep(Model_374_ice,
;                            S1,
;                            first(Model_374_ice)),
;                         first(Model_374_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_374_ice) ==
;                ep(Model_374_ice, S1, first(Model_374_ice)),
;                locked(Model_374_ice,
;                       S1,
;                       ep(Model_374_ice,
;                          S1,
;                          first(Model_374_ice)),
;                       first(Model_374_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_374_ice,
;                            S1,
;                            one(Model_374_ice),
;                            Node_1),
;                     zero(Model_374_ice) ==
;                     ep(Model_374_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_374_ice,
;                   ep(Model_374_ice, S1, Node_1),
;                   ep(Model_374_ice,
;                      S1,
;                      first(Model_374_ice))),
;                locked(Model_374_ice,
;                       S1,
;                       ep(Model_374_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_374_ice,
;                       S1,
;                       ep(Model_374_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_374_ice) ==
;                ep(Model_374_ice, S1, Node_1),
;                Node_1 == first(Model_374_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_374_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_374_ice,
;                          one(Model_374_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_374_ice,
;                          S1,
;                          one(Model_374_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_374_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_374_ice)),
;                     one(Model_374_ice) ==
;                     ep(Model_374_ice,
;                        S1,
;                        first(Model_374_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_374_ice,
;                       ep(Model_374_ice,
;                          S1,
;                          first(Model_374_ice)),
;                       Epoch_1)),
;                Not(locked(Model_374_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_374_ice))),
;                Epoch_1 ==
;                ep(Model_374_ice, S1, first(Model_374_ice))))),
;  ForAll(Node_1,
;         Or(zero(Model_374_ice) == one(Model_374_ice),
;            Node_1 == first(Model_374_ice),
;            Not(locked(Model_374_ice,
;                       S1,
;                       ep(Model_374_ice, S1, Node_1),
;                       first(Model_374_ice))),
;            Not(held(Model_374_ice, S1, first(Model_374_ice))))),
;  And(ForAll(Node_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_374_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!4
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1 Epoch!val!3 Epoch!val!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_374_ice S1 Node!val!0 Node!val!0)
                (inv Model_374_ice S1 Node!val!0 Node!val!1)
                (inv Model_374_ice S1 Node!val!1 Node!val!0)
                (inv Model_374_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_374_ice S2 Node!val!0 Node!val!0)
           (inv Model_374_ice S2 Node!val!0 Node!val!1)
           (inv Model_374_ice S2 Node!val!1 Node!val!0)
           (inv Model_374_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f2cd550>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_375_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_375_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_375_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_375_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_375_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_375_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_375_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_375_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_375_ice,
;                              zero(Model_375_ice),
;                              Epoch_1),
;                           one(Model_375_ice) !=
;                           zero(Model_375_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_375_ice,
;                          S1,
;                          zero(Model_375_ice),
;                          first(Model_375_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_375_ice) ==
;                 ep(Model_375_ice, S1, first(Model_375_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_375_ice,
;                        S1,
;                        zero(Model_375_ice),
;                        first(Model_375_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_375_ice,
;                          S1,
;                          zero(Model_375_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_375_ice,
;                        S1,
;                        zero(Model_375_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_375_ice,
;                           S1,
;                           one(Model_375_ice),
;                           Node_1)),
;                transfer(Model_375_ice,
;                         S1,
;                         one(Model_375_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_375_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_375_ice))),
;                transfer(Model_375_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_375_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_375_ice,
;                       S1,
;                       first(Model_375_ice))),
;                le(Model_375_ice,
;                   one(Model_375_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_375_ice,
;                        S1,
;                        one(Model_375_ice),
;                        first(Model_375_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_375_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_375_ice))),
;                le(Model_375_ice,
;                   one(Model_375_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_375_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_375_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_375_ice, S1, Node_1),
;                     zero(Model_375_ice) ==
;                     ep(Model_375_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_375_ice) ==
;                           ep(Model_375_ice,
;                              S1,
;                              first(Model_375_ice))),
;                       zero(Model_375_ice) ==
;                       one(Model_375_ice))),
;                transfer(Model_375_ice,
;                         S1,
;                         ep(Model_375_ice,
;                            S1,
;                            first(Model_375_ice)),
;                         first(Model_375_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_375_ice) ==
;                ep(Model_375_ice, S1, first(Model_375_ice)),
;                locked(Model_375_ice,
;                       S1,
;                       ep(Model_375_ice,
;                          S1,
;                          first(Model_375_ice)),
;                       first(Model_375_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_375_ice,
;                            S1,
;                            one(Model_375_ice),
;                            Node_1),
;                     zero(Model_375_ice) ==
;                     ep(Model_375_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_375_ice,
;                   ep(Model_375_ice, S1, Node_1),
;                   ep(Model_375_ice,
;                      S1,
;                      first(Model_375_ice))),
;                locked(Model_375_ice,
;                       S1,
;                       ep(Model_375_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_375_ice,
;                       S1,
;                       ep(Model_375_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_375_ice),
;                zero(Model_375_ice) ==
;                ep(Model_375_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_375_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_375_ice,
;                          one(Model_375_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_375_ice,
;                          S1,
;                          one(Model_375_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_375_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_375_ice)),
;                     one(Model_375_ice) ==
;                     ep(Model_375_ice,
;                        S1,
;                        first(Model_375_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_375_ice, S1, first(Model_375_ice)),
;                Not(locked(Model_375_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_375_ice))),
;                Not(le(Model_375_ice,
;                       ep(Model_375_ice,
;                          S1,
;                          first(Model_375_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Node_1 == first(Model_375_ice),
;            Not(locked(Model_375_ice,
;                       S1,
;                       ep(Model_375_ice, S1, Node_1),
;                       first(Model_375_ice))),
;            held(Model_375_ice, S1, Node_1))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_375_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_375_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!4 Epoch!val!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_375_ice S1 Node!val!0 Node!val!0)
                (inv Model_375_ice S1 Node!val!0 Node!val!1)
                (inv Model_375_ice S1 Node!val!1 Node!val!0)
                (inv Model_375_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_375_ice S2 Node!val!0 Node!val!0)
           (inv Model_375_ice S2 Node!val!0 Node!val!1)
           (inv Model_375_ice S2 Node!val!1 Node!val!0)
           (inv Model_375_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f096d00>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_376_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_376_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_376_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_376_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_376_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_376_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_376_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_376_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_376_ice,
;                              zero(Model_376_ice),
;                              Epoch_1),
;                           one(Model_376_ice) !=
;                           zero(Model_376_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_376_ice,
;                          S1,
;                          zero(Model_376_ice),
;                          first(Model_376_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_376_ice) ==
;                 ep(Model_376_ice, S1, first(Model_376_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_376_ice,
;                        S1,
;                        zero(Model_376_ice),
;                        first(Model_376_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_376_ice,
;                          S1,
;                          zero(Model_376_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_376_ice,
;                        S1,
;                        zero(Model_376_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_376_ice,
;                           S1,
;                           one(Model_376_ice),
;                           Node_1)),
;                transfer(Model_376_ice,
;                         S1,
;                         one(Model_376_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_376_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_376_ice))),
;                transfer(Model_376_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_376_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_376_ice,
;                       S1,
;                       first(Model_376_ice))),
;                le(Model_376_ice,
;                   one(Model_376_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_376_ice,
;                        S1,
;                        one(Model_376_ice),
;                        first(Model_376_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_376_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_376_ice))),
;                le(Model_376_ice,
;                   one(Model_376_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_376_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_376_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_376_ice, S1, Node_1),
;                     zero(Model_376_ice) ==
;                     ep(Model_376_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_376_ice) ==
;                           ep(Model_376_ice,
;                              S1,
;                              first(Model_376_ice))),
;                       zero(Model_376_ice) ==
;                       one(Model_376_ice))),
;                transfer(Model_376_ice,
;                         S1,
;                         ep(Model_376_ice,
;                            S1,
;                            first(Model_376_ice)),
;                         first(Model_376_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_376_ice) ==
;                ep(Model_376_ice, S1, first(Model_376_ice)),
;                locked(Model_376_ice,
;                       S1,
;                       ep(Model_376_ice,
;                          S1,
;                          first(Model_376_ice)),
;                       first(Model_376_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_376_ice,
;                            S1,
;                            one(Model_376_ice),
;                            Node_1),
;                     zero(Model_376_ice) ==
;                     ep(Model_376_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_376_ice,
;                   ep(Model_376_ice, S1, Node_1),
;                   ep(Model_376_ice,
;                      S1,
;                      first(Model_376_ice))),
;                locked(Model_376_ice,
;                       S1,
;                       ep(Model_376_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_376_ice,
;                       S1,
;                       ep(Model_376_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_376_ice) ==
;                ep(Model_376_ice, S1, Node_1),
;                Node_1 == first(Model_376_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_376_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_376_ice,
;                          one(Model_376_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_376_ice,
;                          S1,
;                          one(Model_376_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_376_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_376_ice)),
;                     one(Model_376_ice) ==
;                     ep(Model_376_ice,
;                        S1,
;                        first(Model_376_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_376_ice, S1, first(Model_376_ice)),
;                Not(locked(Model_376_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_376_ice))),
;                Not(le(Model_376_ice,
;                       ep(Model_376_ice,
;                          S1,
;                          first(Model_376_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(held(Model_376_ice, S1, Node_1),
;            Not(held(Model_376_ice, S1, first(Model_376_ice))),
;            Not(locked(Model_376_ice,
;                       S1,
;                       ep(Model_376_ice, S1, Node_1),
;                       first(Model_376_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_376_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_376_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!0))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!0)))
;          Epoch!val!4
;          (ite a!1 Epoch!val!1 Epoch!val!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!0)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_376_ice S1 Node!val!0 Node!val!0)
                (inv Model_376_ice S1 Node!val!0 Node!val!1)
                (inv Model_376_ice S1 Node!val!1 Node!val!0)
                (inv Model_376_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_376_ice S2 Node!val!0 Node!val!0)
           (inv Model_376_ice S2 Node!val!0 Node!val!1)
           (inv Model_376_ice S2 Node!val!1 Node!val!0)
           (inv Model_376_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f288730>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_377_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_377_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_377_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_377_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_377_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_377_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_377_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_377_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_377_ice,
;                              zero(Model_377_ice),
;                              Epoch_1),
;                           one(Model_377_ice) !=
;                           zero(Model_377_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_377_ice,
;                          S1,
;                          zero(Model_377_ice),
;                          first(Model_377_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_377_ice) ==
;                 ep(Model_377_ice, S1, first(Model_377_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_377_ice,
;                        S1,
;                        zero(Model_377_ice),
;                        first(Model_377_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_377_ice,
;                          S1,
;                          zero(Model_377_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_377_ice,
;                        S1,
;                        zero(Model_377_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_377_ice,
;                           S1,
;                           one(Model_377_ice),
;                           Node_1)),
;                transfer(Model_377_ice,
;                         S1,
;                         one(Model_377_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_377_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_377_ice))),
;                transfer(Model_377_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_377_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_377_ice,
;                       S1,
;                       first(Model_377_ice))),
;                le(Model_377_ice,
;                   one(Model_377_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_377_ice,
;                        S1,
;                        one(Model_377_ice),
;                        first(Model_377_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_377_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_377_ice))),
;                le(Model_377_ice,
;                   one(Model_377_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_377_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_377_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_377_ice, S1, Node_1),
;                     zero(Model_377_ice) ==
;                     ep(Model_377_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_377_ice) ==
;                           ep(Model_377_ice,
;                              S1,
;                              first(Model_377_ice))),
;                       zero(Model_377_ice) ==
;                       one(Model_377_ice))),
;                transfer(Model_377_ice,
;                         S1,
;                         ep(Model_377_ice,
;                            S1,
;                            first(Model_377_ice)),
;                         first(Model_377_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_377_ice) ==
;                ep(Model_377_ice, S1, first(Model_377_ice)),
;                locked(Model_377_ice,
;                       S1,
;                       ep(Model_377_ice,
;                          S1,
;                          first(Model_377_ice)),
;                       first(Model_377_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_377_ice,
;                            S1,
;                            one(Model_377_ice),
;                            Node_1),
;                     zero(Model_377_ice) ==
;                     ep(Model_377_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_377_ice,
;                   ep(Model_377_ice, S1, Node_1),
;                   ep(Model_377_ice,
;                      S1,
;                      first(Model_377_ice))),
;                locked(Model_377_ice,
;                       S1,
;                       ep(Model_377_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_377_ice,
;                       S1,
;                       ep(Model_377_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_377_ice),
;                zero(Model_377_ice) ==
;                ep(Model_377_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_377_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_377_ice,
;                          one(Model_377_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_377_ice,
;                          S1,
;                          one(Model_377_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_377_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_377_ice)),
;                     one(Model_377_ice) ==
;                     ep(Model_377_ice,
;                        S1,
;                        first(Model_377_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_377_ice, S1, first(Model_377_ice)),
;                Not(locked(Model_377_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_377_ice))),
;                Not(le(Model_377_ice,
;                       ep(Model_377_ice,
;                          S1,
;                          first(Model_377_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(zero(Model_377_ice) ==
;            ep(Model_377_ice, S1, Node_1),
;            le(Model_377_ice,
;               ep(Model_377_ice, S1, first(Model_377_ice)),
;               ep(Model_377_ice, S1, Node_1)),
;            Not(held(Model_377_ice, S1, first(Model_377_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_377_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_377_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!3)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!0)
;                    (= x!2 Node!val!1))
;               Epoch!val!2
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_377_ice S1 Node!val!0 Node!val!0)
                (inv Model_377_ice S1 Node!val!0 Node!val!1)
                (inv Model_377_ice S1 Node!val!1 Node!val!0)
                (inv Model_377_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_377_ice S2 Node!val!0 Node!val!0)
           (inv Model_377_ice S2 Node!val!0 Node!val!1)
           (inv Model_377_ice S2 Node!val!1 Node!val!0)
           (inv Model_377_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f079d30>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_378_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_378_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_378_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_378_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_378_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_378_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_378_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_378_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_378_ice,
;                              zero(Model_378_ice),
;                              Epoch_1),
;                           one(Model_378_ice) !=
;                           zero(Model_378_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_378_ice,
;                          S1,
;                          zero(Model_378_ice),
;                          first(Model_378_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_378_ice) ==
;                 ep(Model_378_ice, S1, first(Model_378_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_378_ice,
;                        S1,
;                        zero(Model_378_ice),
;                        first(Model_378_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_378_ice,
;                          S1,
;                          zero(Model_378_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_378_ice,
;                        S1,
;                        zero(Model_378_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_378_ice,
;                           S1,
;                           one(Model_378_ice),
;                           Node_1)),
;                transfer(Model_378_ice,
;                         S1,
;                         one(Model_378_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_378_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_378_ice))),
;                transfer(Model_378_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_378_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_378_ice,
;                       S1,
;                       first(Model_378_ice))),
;                le(Model_378_ice,
;                   one(Model_378_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_378_ice,
;                        S1,
;                        one(Model_378_ice),
;                        first(Model_378_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_378_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_378_ice))),
;                le(Model_378_ice,
;                   one(Model_378_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_378_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_378_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_378_ice, S1, Node_1),
;                     zero(Model_378_ice) ==
;                     ep(Model_378_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_378_ice) ==
;                           ep(Model_378_ice,
;                              S1,
;                              first(Model_378_ice))),
;                       zero(Model_378_ice) ==
;                       one(Model_378_ice))),
;                transfer(Model_378_ice,
;                         S1,
;                         ep(Model_378_ice,
;                            S1,
;                            first(Model_378_ice)),
;                         first(Model_378_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_378_ice) ==
;                ep(Model_378_ice, S1, first(Model_378_ice)),
;                locked(Model_378_ice,
;                       S1,
;                       ep(Model_378_ice,
;                          S1,
;                          first(Model_378_ice)),
;                       first(Model_378_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_378_ice,
;                            S1,
;                            one(Model_378_ice),
;                            Node_1),
;                     zero(Model_378_ice) ==
;                     ep(Model_378_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_378_ice,
;                   ep(Model_378_ice, S1, Node_1),
;                   ep(Model_378_ice,
;                      S1,
;                      first(Model_378_ice))),
;                locked(Model_378_ice,
;                       S1,
;                       ep(Model_378_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_378_ice),
;                locked(Model_378_ice,
;                       S1,
;                       ep(Model_378_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_378_ice) ==
;                ep(Model_378_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_378_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_378_ice,
;                          one(Model_378_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_378_ice,
;                          S1,
;                          one(Model_378_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_378_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_378_ice)),
;                     one(Model_378_ice) ==
;                     ep(Model_378_ice,
;                        S1,
;                        first(Model_378_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_378_ice, S1, first(Model_378_ice)),
;                Not(locked(Model_378_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_378_ice))),
;                Not(le(Model_378_ice,
;                       ep(Model_378_ice,
;                          S1,
;                          first(Model_378_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(transfer(Model_378_ice,
;                         S1,
;                         ep(Model_378_ice, S1, Node_1),
;                         first(Model_378_ice))),
;            locked(Model_378_ice,
;                   S1,
;                   ep(Model_378_ice, S1, Node_1),
;                   first(Model_378_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_378_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!3 (ite a!2 Epoch!val!1 Epoch!val!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_378_ice S1 Node!val!0 Node!val!0)
                (inv Model_378_ice S1 Node!val!0 Node!val!1)
                (inv Model_378_ice S1 Node!val!0 Node!val!2)
                (inv Model_378_ice S1 Node!val!1 Node!val!0)
                (inv Model_378_ice S1 Node!val!1 Node!val!1)
                (inv Model_378_ice S1 Node!val!1 Node!val!2)
                (inv Model_378_ice S1 Node!val!2 Node!val!0)
                (inv Model_378_ice S1 Node!val!2 Node!val!1)
                (inv Model_378_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_378_ice S2 Node!val!0 Node!val!0)
           (inv Model_378_ice S2 Node!val!0 Node!val!1)
           (inv Model_378_ice S2 Node!val!0 Node!val!2)
           (inv Model_378_ice S2 Node!val!1 Node!val!0)
           (inv Model_378_ice S2 Node!val!1 Node!val!1)
           (inv Model_378_ice S2 Node!val!1 Node!val!2)
           (inv Model_378_ice S2 Node!val!2 Node!val!0)
           (inv Model_378_ice S2 Node!val!2 Node!val!1)
           (inv Model_378_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f1e28b0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_379_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_379_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_379_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_379_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_379_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_379_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_379_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_379_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_379_ice,
;                              zero(Model_379_ice),
;                              Epoch_1),
;                           one(Model_379_ice) !=
;                           zero(Model_379_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_379_ice,
;                          S1,
;                          zero(Model_379_ice),
;                          first(Model_379_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_379_ice) ==
;                 ep(Model_379_ice, S1, first(Model_379_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_379_ice,
;                        S1,
;                        zero(Model_379_ice),
;                        first(Model_379_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_379_ice,
;                          S1,
;                          zero(Model_379_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_379_ice,
;                        S1,
;                        zero(Model_379_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_379_ice,
;                           S1,
;                           one(Model_379_ice),
;                           Node_1)),
;                transfer(Model_379_ice,
;                         S1,
;                         one(Model_379_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_379_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_379_ice))),
;                transfer(Model_379_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_379_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_379_ice,
;                       S1,
;                       first(Model_379_ice))),
;                le(Model_379_ice,
;                   one(Model_379_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_379_ice,
;                        S1,
;                        one(Model_379_ice),
;                        first(Model_379_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_379_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_379_ice))),
;                le(Model_379_ice,
;                   one(Model_379_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_379_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_379_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_379_ice, S1, Node_1),
;                     zero(Model_379_ice) ==
;                     ep(Model_379_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_379_ice) ==
;                           ep(Model_379_ice,
;                              S1,
;                              first(Model_379_ice))),
;                       zero(Model_379_ice) ==
;                       one(Model_379_ice))),
;                transfer(Model_379_ice,
;                         S1,
;                         ep(Model_379_ice,
;                            S1,
;                            first(Model_379_ice)),
;                         first(Model_379_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_379_ice) ==
;                ep(Model_379_ice, S1, first(Model_379_ice)),
;                locked(Model_379_ice,
;                       S1,
;                       ep(Model_379_ice,
;                          S1,
;                          first(Model_379_ice)),
;                       first(Model_379_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_379_ice,
;                            S1,
;                            one(Model_379_ice),
;                            Node_1),
;                     zero(Model_379_ice) ==
;                     ep(Model_379_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_379_ice,
;                   ep(Model_379_ice, S1, Node_1),
;                   ep(Model_379_ice,
;                      S1,
;                      first(Model_379_ice))),
;                locked(Model_379_ice,
;                       S1,
;                       ep(Model_379_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_379_ice,
;                       S1,
;                       ep(Model_379_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_379_ice) ==
;                ep(Model_379_ice, S1, Node_1),
;                Node_1 == first(Model_379_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_379_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_379_ice,
;                          one(Model_379_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_379_ice,
;                          S1,
;                          one(Model_379_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_379_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_379_ice)),
;                     one(Model_379_ice) ==
;                     ep(Model_379_ice,
;                        S1,
;                        first(Model_379_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_379_ice,
;                       ep(Model_379_ice,
;                          S1,
;                          first(Model_379_ice)),
;                       Epoch_1)),
;                Not(locked(Model_379_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_379_ice))),
;                Epoch_1 ==
;                ep(Model_379_ice, S1, first(Model_379_ice))))),
;  ForAll(Node_1,
;         Or(Not(held(Model_379_ice, S1, first(Model_379_ice))),
;            Not(And(one(Model_379_ice) ==
;                    ep(Model_379_ice,
;                       S1,
;                       first(Model_379_ice)),
;                    Or(Not(Node_1 == first(Model_379_ice)),
;                       zero(Model_379_ice) ==
;                       one(Model_379_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_379_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!0)))
;                   Epoch!val!1
;                   Epoch!val!0)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!0)))
;          Epoch!val!2
;          a!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!0))
;        (not (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_379_ice S1 Node!val!0 Node!val!0)
                (inv Model_379_ice S1 Node!val!0 Node!val!1)
                (inv Model_379_ice S1 Node!val!1 Node!val!0)
                (inv Model_379_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_379_ice S2 Node!val!0 Node!val!0)
           (inv Model_379_ice S2 Node!val!0 Node!val!1)
           (inv Model_379_ice S2 Node!val!1 Node!val!0)
           (inv Model_379_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0b4dc0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_380_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_380_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_380_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_380_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_380_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_380_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_380_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_380_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_380_ice,
;                              zero(Model_380_ice),
;                              Epoch_1),
;                           one(Model_380_ice) !=
;                           zero(Model_380_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_380_ice,
;                          S1,
;                          zero(Model_380_ice),
;                          first(Model_380_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_380_ice) ==
;                 ep(Model_380_ice, S1, first(Model_380_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_380_ice,
;                        S1,
;                        zero(Model_380_ice),
;                        first(Model_380_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_380_ice,
;                          S1,
;                          zero(Model_380_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_380_ice,
;                        S1,
;                        zero(Model_380_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_380_ice,
;                           S1,
;                           one(Model_380_ice),
;                           Node_1)),
;                transfer(Model_380_ice,
;                         S1,
;                         one(Model_380_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_380_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_380_ice))),
;                transfer(Model_380_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_380_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_380_ice,
;                       S1,
;                       first(Model_380_ice))),
;                le(Model_380_ice,
;                   one(Model_380_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_380_ice,
;                        S1,
;                        one(Model_380_ice),
;                        first(Model_380_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_380_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_380_ice))),
;                le(Model_380_ice,
;                   one(Model_380_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_380_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_380_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_380_ice, S1, Node_1),
;                     zero(Model_380_ice) ==
;                     ep(Model_380_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_380_ice) ==
;                           ep(Model_380_ice,
;                              S1,
;                              first(Model_380_ice))),
;                       zero(Model_380_ice) ==
;                       one(Model_380_ice))),
;                transfer(Model_380_ice,
;                         S1,
;                         ep(Model_380_ice,
;                            S1,
;                            first(Model_380_ice)),
;                         first(Model_380_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_380_ice) ==
;                ep(Model_380_ice, S1, first(Model_380_ice)),
;                locked(Model_380_ice,
;                       S1,
;                       ep(Model_380_ice,
;                          S1,
;                          first(Model_380_ice)),
;                       first(Model_380_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_380_ice,
;                            S1,
;                            one(Model_380_ice),
;                            Node_1),
;                     zero(Model_380_ice) ==
;                     ep(Model_380_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_380_ice,
;                   ep(Model_380_ice, S1, Node_1),
;                   ep(Model_380_ice,
;                      S1,
;                      first(Model_380_ice))),
;                locked(Model_380_ice,
;                       S1,
;                       ep(Model_380_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_380_ice,
;                       S1,
;                       ep(Model_380_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_380_ice),
;                zero(Model_380_ice) ==
;                ep(Model_380_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_380_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_380_ice,
;                          one(Model_380_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_380_ice,
;                          S1,
;                          one(Model_380_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_380_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_380_ice)),
;                     one(Model_380_ice) ==
;                     ep(Model_380_ice,
;                        S1,
;                        first(Model_380_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_380_ice, S1, first(Model_380_ice)),
;                Not(le(Model_380_ice,
;                       ep(Model_380_ice,
;                          S1,
;                          first(Model_380_ice)),
;                       Epoch_1)),
;                Not(locked(Model_380_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_380_ice)))))),
;  ForAll(Node_1,
;         Or(Node_1 == first(Model_380_ice),
;            held(Model_380_ice, S1, first(Model_380_ice)),
;            Not(locked(Model_380_ice,
;                       S1,
;                       ep(Model_380_ice,
;                          S1,
;                          first(Model_380_ice)),
;                       Node_1)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun Model_380_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!2))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   Epoch!val!2)))
;     (ite a!1 Epoch!val!4 a!2)))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_380_ice S1 Node!val!0 Node!val!0)
                (inv Model_380_ice S1 Node!val!0 Node!val!1)
                (inv Model_380_ice S1 Node!val!0 Node!val!2)
                (inv Model_380_ice S1 Node!val!1 Node!val!0)
                (inv Model_380_ice S1 Node!val!1 Node!val!1)
                (inv Model_380_ice S1 Node!val!1 Node!val!2)
                (inv Model_380_ice S1 Node!val!2 Node!val!0)
                (inv Model_380_ice S1 Node!val!2 Node!val!1)
                (inv Model_380_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_380_ice S2 Node!val!0 Node!val!0)
           (inv Model_380_ice S2 Node!val!0 Node!val!1)
           (inv Model_380_ice S2 Node!val!0 Node!val!2)
           (inv Model_380_ice S2 Node!val!1 Node!val!0)
           (inv Model_380_ice S2 Node!val!1 Node!val!1)
           (inv Model_380_ice S2 Node!val!1 Node!val!2)
           (inv Model_380_ice S2 Node!val!2 Node!val!0)
           (inv Model_380_ice S2 Node!val!2 Node!val!1)
           (inv Model_380_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f20b6a0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_381_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_381_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_381_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_381_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_381_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_381_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_381_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_381_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_381_ice,
;                              zero(Model_381_ice),
;                              Epoch_1),
;                           one(Model_381_ice) !=
;                           zero(Model_381_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_381_ice,
;                          S1,
;                          zero(Model_381_ice),
;                          first(Model_381_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_381_ice) ==
;                 ep(Model_381_ice, S1, first(Model_381_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_381_ice,
;                        S1,
;                        zero(Model_381_ice),
;                        first(Model_381_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_381_ice,
;                          S1,
;                          zero(Model_381_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_381_ice,
;                        S1,
;                        zero(Model_381_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_381_ice,
;                           S1,
;                           one(Model_381_ice),
;                           Node_1)),
;                transfer(Model_381_ice,
;                         S1,
;                         one(Model_381_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_381_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_381_ice))),
;                transfer(Model_381_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_381_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_381_ice,
;                       S1,
;                       first(Model_381_ice))),
;                le(Model_381_ice,
;                   one(Model_381_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_381_ice,
;                        S1,
;                        one(Model_381_ice),
;                        first(Model_381_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_381_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_381_ice))),
;                le(Model_381_ice,
;                   one(Model_381_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_381_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_381_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_381_ice, S1, Node_1),
;                     zero(Model_381_ice) ==
;                     ep(Model_381_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_381_ice) ==
;                           ep(Model_381_ice,
;                              S1,
;                              first(Model_381_ice))),
;                       zero(Model_381_ice) ==
;                       one(Model_381_ice))),
;                transfer(Model_381_ice,
;                         S1,
;                         ep(Model_381_ice,
;                            S1,
;                            first(Model_381_ice)),
;                         first(Model_381_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_381_ice) ==
;                ep(Model_381_ice, S1, first(Model_381_ice)),
;                locked(Model_381_ice,
;                       S1,
;                       ep(Model_381_ice,
;                          S1,
;                          first(Model_381_ice)),
;                       first(Model_381_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_381_ice,
;                            S1,
;                            one(Model_381_ice),
;                            Node_1),
;                     zero(Model_381_ice) ==
;                     ep(Model_381_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_381_ice,
;                   ep(Model_381_ice, S1, Node_1),
;                   ep(Model_381_ice,
;                      S1,
;                      first(Model_381_ice))),
;                locked(Model_381_ice,
;                       S1,
;                       ep(Model_381_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_381_ice,
;                       S1,
;                       ep(Model_381_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_381_ice) ==
;                ep(Model_381_ice, S1, Node_1),
;                Node_1 == first(Model_381_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_381_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_381_ice,
;                          one(Model_381_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_381_ice,
;                          S1,
;                          one(Model_381_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_381_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_381_ice)),
;                     one(Model_381_ice) ==
;                     ep(Model_381_ice,
;                        S1,
;                        first(Model_381_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(le(Model_381_ice,
;                       ep(Model_381_ice,
;                          S1,
;                          first(Model_381_ice)),
;                       Epoch_1)),
;                Not(locked(Model_381_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_381_ice))),
;                Epoch_1 ==
;                ep(Model_381_ice, S1, first(Model_381_ice))))),
;  ForAll(Node_1,
;         Or(zero(Model_381_ice) ==
;            ep(Model_381_ice, S1, Node_1),
;            held(Model_381_ice, S1, Node_1),
;            Not(And(held(Model_381_ice,
;                         S1,
;                         first(Model_381_ice)),
;                    one(Model_381_ice) ==
;                    ep(Model_381_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_381_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))
;                       (not (= x!2 Node!val!1)))))
;         (a!2 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!0)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!0)
;                       (not (= x!2 Node!val!1))))))
;   (let ((a!3 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   (ite a!2 Epoch!val!1 Epoch!val!0))))
;     (ite a!1 Epoch!val!4 a!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!0)
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Node!val!0)
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!0))
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!0))
;            (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!3 Node!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!0))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_381_ice S1 Node!val!0 Node!val!0)
                (inv Model_381_ice S1 Node!val!0 Node!val!1)
                (inv Model_381_ice S1 Node!val!0 Node!val!2)
                (inv Model_381_ice S1 Node!val!1 Node!val!0)
                (inv Model_381_ice S1 Node!val!1 Node!val!1)
                (inv Model_381_ice S1 Node!val!1 Node!val!2)
                (inv Model_381_ice S1 Node!val!2 Node!val!0)
                (inv Model_381_ice S1 Node!val!2 Node!val!1)
                (inv Model_381_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_381_ice S2 Node!val!0 Node!val!0)
           (inv Model_381_ice S2 Node!val!0 Node!val!1)
           (inv Model_381_ice S2 Node!val!0 Node!val!2)
           (inv Model_381_ice S2 Node!val!1 Node!val!0)
           (inv Model_381_ice S2 Node!val!1 Node!val!1)
           (inv Model_381_ice S2 Node!val!1 Node!val!2)
           (inv Model_381_ice S2 Node!val!2 Node!val!0)
           (inv Model_381_ice S2 Node!val!2 Node!val!1)
           (inv Model_381_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f0e8340>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_382_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_382_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_382_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_382_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_382_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_382_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_382_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_382_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_382_ice,
;                              zero(Model_382_ice),
;                              Epoch_1),
;                           one(Model_382_ice) !=
;                           zero(Model_382_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_382_ice,
;                          S1,
;                          zero(Model_382_ice),
;                          first(Model_382_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_382_ice) ==
;                 ep(Model_382_ice, S1, first(Model_382_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_382_ice,
;                        S1,
;                        zero(Model_382_ice),
;                        first(Model_382_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_382_ice,
;                          S1,
;                          zero(Model_382_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_382_ice,
;                        S1,
;                        zero(Model_382_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_382_ice,
;                           S1,
;                           one(Model_382_ice),
;                           Node_1)),
;                transfer(Model_382_ice,
;                         S1,
;                         one(Model_382_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_382_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_382_ice))),
;                transfer(Model_382_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_382_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_382_ice,
;                       S1,
;                       first(Model_382_ice))),
;                le(Model_382_ice,
;                   one(Model_382_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_382_ice,
;                        S1,
;                        one(Model_382_ice),
;                        first(Model_382_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_382_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_382_ice))),
;                le(Model_382_ice,
;                   one(Model_382_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_382_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_382_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_382_ice, S1, Node_1),
;                     zero(Model_382_ice) ==
;                     ep(Model_382_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_382_ice) ==
;                           ep(Model_382_ice,
;                              S1,
;                              first(Model_382_ice))),
;                       zero(Model_382_ice) ==
;                       one(Model_382_ice))),
;                transfer(Model_382_ice,
;                         S1,
;                         ep(Model_382_ice,
;                            S1,
;                            first(Model_382_ice)),
;                         first(Model_382_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_382_ice) ==
;                ep(Model_382_ice, S1, first(Model_382_ice)),
;                locked(Model_382_ice,
;                       S1,
;                       ep(Model_382_ice,
;                          S1,
;                          first(Model_382_ice)),
;                       first(Model_382_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_382_ice,
;                            S1,
;                            one(Model_382_ice),
;                            Node_1),
;                     zero(Model_382_ice) ==
;                     ep(Model_382_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_382_ice,
;                   ep(Model_382_ice, S1, Node_1),
;                   ep(Model_382_ice,
;                      S1,
;                      first(Model_382_ice))),
;                locked(Model_382_ice,
;                       S1,
;                       ep(Model_382_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_382_ice,
;                       S1,
;                       ep(Model_382_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_382_ice) ==
;                ep(Model_382_ice, S1, Node_1),
;                Node_1 == first(Model_382_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_382_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_382_ice,
;                          one(Model_382_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_382_ice,
;                          S1,
;                          one(Model_382_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_382_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_382_ice)),
;                     one(Model_382_ice) ==
;                     ep(Model_382_ice,
;                        S1,
;                        first(Model_382_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_382_ice, S1, first(Model_382_ice)),
;                Not(locked(Model_382_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_382_ice))),
;                Not(le(Model_382_ice,
;                       ep(Model_382_ice,
;                          S1,
;                          first(Model_382_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(Not(locked(Model_382_ice,
;                       S1,
;                       ep(Model_382_ice,
;                          S1,
;                          first(Model_382_ice)),
;                       Node_1)),
;            le(Model_382_ice,
;               ep(Model_382_ice, S1, first(Model_382_ice)),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_382_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!1
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!0
;     Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_382_ice S1 Node!val!0 Node!val!0)
                (inv Model_382_ice S1 Node!val!0 Node!val!1)
                (inv Model_382_ice S1 Node!val!1 Node!val!0)
                (inv Model_382_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_382_ice S2 Node!val!0 Node!val!0)
           (inv Model_382_ice S2 Node!val!0 Node!val!1)
           (inv Model_382_ice S2 Node!val!1 Node!val!0)
           (inv Model_382_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f046850>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_383_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_383_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_383_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_383_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_383_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_383_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_383_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_383_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_383_ice,
;                              zero(Model_383_ice),
;                              Epoch_1),
;                           one(Model_383_ice) !=
;                           zero(Model_383_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_383_ice,
;                          S1,
;                          zero(Model_383_ice),
;                          first(Model_383_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_383_ice) ==
;                 ep(Model_383_ice, S1, first(Model_383_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_383_ice,
;                        S1,
;                        zero(Model_383_ice),
;                        first(Model_383_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_383_ice,
;                          S1,
;                          zero(Model_383_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_383_ice,
;                        S1,
;                        zero(Model_383_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_383_ice,
;                           S1,
;                           one(Model_383_ice),
;                           Node_1)),
;                transfer(Model_383_ice,
;                         S1,
;                         one(Model_383_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_383_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_383_ice))),
;                transfer(Model_383_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_383_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_383_ice,
;                       S1,
;                       first(Model_383_ice))),
;                le(Model_383_ice,
;                   one(Model_383_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_383_ice,
;                        S1,
;                        one(Model_383_ice),
;                        first(Model_383_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_383_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_383_ice))),
;                le(Model_383_ice,
;                   one(Model_383_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_383_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_383_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_383_ice, S1, Node_1),
;                     zero(Model_383_ice) ==
;                     ep(Model_383_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_383_ice) ==
;                           ep(Model_383_ice,
;                              S1,
;                              first(Model_383_ice))),
;                       zero(Model_383_ice) ==
;                       one(Model_383_ice))),
;                transfer(Model_383_ice,
;                         S1,
;                         ep(Model_383_ice,
;                            S1,
;                            first(Model_383_ice)),
;                         first(Model_383_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_383_ice) ==
;                ep(Model_383_ice, S1, first(Model_383_ice)),
;                locked(Model_383_ice,
;                       S1,
;                       ep(Model_383_ice,
;                          S1,
;                          first(Model_383_ice)),
;                       first(Model_383_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_383_ice,
;                            S1,
;                            one(Model_383_ice),
;                            Node_1),
;                     zero(Model_383_ice) ==
;                     ep(Model_383_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_383_ice,
;                   ep(Model_383_ice, S1, Node_1),
;                   ep(Model_383_ice,
;                      S1,
;                      first(Model_383_ice))),
;                locked(Model_383_ice,
;                       S1,
;                       ep(Model_383_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_383_ice),
;                locked(Model_383_ice,
;                       S1,
;                       ep(Model_383_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_383_ice) ==
;                ep(Model_383_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_383_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_383_ice,
;                          one(Model_383_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_383_ice,
;                          S1,
;                          one(Model_383_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_383_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_383_ice)),
;                     one(Model_383_ice) ==
;                     ep(Model_383_ice,
;                        S1,
;                        first(Model_383_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_383_ice, S1, first(Model_383_ice)),
;                Not(locked(Model_383_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_383_ice))),
;                Not(le(Model_383_ice,
;                       ep(Model_383_ice,
;                          S1,
;                          first(Model_383_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(zero(Model_383_ice) == one(Model_383_ice),
;            Not(locked(Model_383_ice,
;                       S1,
;                       ep(Model_383_ice,
;                          S1,
;                          first(Model_383_ice)),
;                       Node_1)),
;            Not(held(Model_383_ice, S1, Node_1)),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_383_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!3)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!0)
;                    (= x!2 Node!val!1))
;               Epoch!val!2
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_383_ice S1 Node!val!0 Node!val!0)
                (inv Model_383_ice S1 Node!val!0 Node!val!1)
                (inv Model_383_ice S1 Node!val!1 Node!val!0)
                (inv Model_383_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_383_ice S2 Node!val!0 Node!val!0)
           (inv Model_383_ice S2 Node!val!0 Node!val!1)
           (inv Model_383_ice S2 Node!val!1 Node!val!0)
           (inv Model_383_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f068190>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_384_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_384_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_384_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_384_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_384_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_384_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_384_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_384_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_384_ice,
;                              zero(Model_384_ice),
;                              Epoch_1),
;                           one(Model_384_ice) !=
;                           zero(Model_384_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_384_ice,
;                          S1,
;                          zero(Model_384_ice),
;                          first(Model_384_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_384_ice) ==
;                 ep(Model_384_ice, S1, first(Model_384_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_384_ice,
;                        S1,
;                        zero(Model_384_ice),
;                        first(Model_384_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_384_ice,
;                          S1,
;                          zero(Model_384_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_384_ice,
;                        S1,
;                        zero(Model_384_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_384_ice,
;                           S1,
;                           one(Model_384_ice),
;                           Node_1)),
;                transfer(Model_384_ice,
;                         S1,
;                         one(Model_384_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_384_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_384_ice))),
;                transfer(Model_384_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_384_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_384_ice,
;                       S1,
;                       first(Model_384_ice))),
;                le(Model_384_ice,
;                   one(Model_384_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_384_ice,
;                        S1,
;                        one(Model_384_ice),
;                        first(Model_384_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_384_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_384_ice))),
;                le(Model_384_ice,
;                   one(Model_384_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_384_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_384_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_384_ice, S1, Node_1),
;                     zero(Model_384_ice) ==
;                     ep(Model_384_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_384_ice) ==
;                           ep(Model_384_ice,
;                              S1,
;                              first(Model_384_ice))),
;                       zero(Model_384_ice) ==
;                       one(Model_384_ice))),
;                transfer(Model_384_ice,
;                         S1,
;                         ep(Model_384_ice,
;                            S1,
;                            first(Model_384_ice)),
;                         first(Model_384_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_384_ice) ==
;                ep(Model_384_ice, S1, first(Model_384_ice)),
;                locked(Model_384_ice,
;                       S1,
;                       ep(Model_384_ice,
;                          S1,
;                          first(Model_384_ice)),
;                       first(Model_384_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_384_ice,
;                            S1,
;                            one(Model_384_ice),
;                            Node_1),
;                     zero(Model_384_ice) ==
;                     ep(Model_384_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_384_ice,
;                   ep(Model_384_ice, S1, Node_1),
;                   ep(Model_384_ice,
;                      S1,
;                      first(Model_384_ice))),
;                locked(Model_384_ice,
;                       S1,
;                       ep(Model_384_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_384_ice,
;                       S1,
;                       ep(Model_384_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_384_ice) ==
;                ep(Model_384_ice, S1, Node_1),
;                Node_1 == first(Model_384_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_384_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_384_ice,
;                          one(Model_384_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_384_ice,
;                          S1,
;                          one(Model_384_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_384_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_384_ice)),
;                     one(Model_384_ice) ==
;                     ep(Model_384_ice,
;                        S1,
;                        first(Model_384_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_384_ice, S1, first(Model_384_ice)),
;                Not(locked(Model_384_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_384_ice))),
;                Not(le(Model_384_ice,
;                       ep(Model_384_ice,
;                          S1,
;                          first(Model_384_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(held(Model_384_ice, S1, first(Model_384_ice)),
;            Not(held(Model_384_ice, S1, Node_1)),
;            Not(transfer(Model_384_ice,
;                         S1,
;                         ep(Model_384_ice,
;                            S1,
;                            first(Model_384_ice)),
;                         Node_1)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!5 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_384_ice () ModelId
;   ModelId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!2))
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!5)))
;   (let ((a!2 (ite (or (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!0)
;                            (= x!2 Node!val!1))
;                       (and (= x!0 ModelId!val!0)
;                            (= x!1 StateId!val!1)
;                            (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   a!1)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (not (= x!2 Node!val!2))
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          a!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!2))
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!2))
;            (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_384_ice S1 Node!val!0 Node!val!0)
                (inv Model_384_ice S1 Node!val!0 Node!val!1)
                (inv Model_384_ice S1 Node!val!0 Node!val!2)
                (inv Model_384_ice S1 Node!val!1 Node!val!0)
                (inv Model_384_ice S1 Node!val!1 Node!val!1)
                (inv Model_384_ice S1 Node!val!1 Node!val!2)
                (inv Model_384_ice S1 Node!val!2 Node!val!0)
                (inv Model_384_ice S1 Node!val!2 Node!val!1)
                (inv Model_384_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_384_ice S2 Node!val!0 Node!val!0)
           (inv Model_384_ice S2 Node!val!0 Node!val!1)
           (inv Model_384_ice S2 Node!val!0 Node!val!2)
           (inv Model_384_ice S2 Node!val!1 Node!val!0)
           (inv Model_384_ice S2 Node!val!1 Node!val!1)
           (inv Model_384_ice S2 Node!val!1 Node!val!2)
           (inv Model_384_ice S2 Node!val!2 Node!val!0)
           (inv Model_384_ice S2 Node!val!2 Node!val!1)
           (inv Model_384_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f306430>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_385_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_385_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_385_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_385_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_385_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_385_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_385_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_385_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_385_ice,
;                              zero(Model_385_ice),
;                              Epoch_1),
;                           one(Model_385_ice) !=
;                           zero(Model_385_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_385_ice,
;                          S1,
;                          zero(Model_385_ice),
;                          first(Model_385_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_385_ice) ==
;                 ep(Model_385_ice, S1, first(Model_385_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_385_ice,
;                        S1,
;                        zero(Model_385_ice),
;                        first(Model_385_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_385_ice,
;                          S1,
;                          zero(Model_385_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_385_ice,
;                        S1,
;                        zero(Model_385_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_385_ice,
;                           S1,
;                           one(Model_385_ice),
;                           Node_1)),
;                transfer(Model_385_ice,
;                         S1,
;                         one(Model_385_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_385_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_385_ice))),
;                transfer(Model_385_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_385_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_385_ice,
;                       S1,
;                       first(Model_385_ice))),
;                le(Model_385_ice,
;                   one(Model_385_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_385_ice,
;                        S1,
;                        one(Model_385_ice),
;                        first(Model_385_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_385_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_385_ice))),
;                le(Model_385_ice,
;                   one(Model_385_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_385_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_385_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_385_ice, S1, Node_1),
;                     zero(Model_385_ice) ==
;                     ep(Model_385_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_385_ice) ==
;                           ep(Model_385_ice,
;                              S1,
;                              first(Model_385_ice))),
;                       zero(Model_385_ice) ==
;                       one(Model_385_ice))),
;                transfer(Model_385_ice,
;                         S1,
;                         ep(Model_385_ice,
;                            S1,
;                            first(Model_385_ice)),
;                         first(Model_385_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_385_ice) ==
;                ep(Model_385_ice, S1, first(Model_385_ice)),
;                locked(Model_385_ice,
;                       S1,
;                       ep(Model_385_ice,
;                          S1,
;                          first(Model_385_ice)),
;                       first(Model_385_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_385_ice,
;                            S1,
;                            one(Model_385_ice),
;                            Node_1),
;                     zero(Model_385_ice) ==
;                     ep(Model_385_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_385_ice,
;                   ep(Model_385_ice, S1, Node_1),
;                   ep(Model_385_ice,
;                      S1,
;                      first(Model_385_ice))),
;                locked(Model_385_ice,
;                       S1,
;                       ep(Model_385_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_385_ice),
;                zero(Model_385_ice) ==
;                ep(Model_385_ice, S1, Node_1),
;                locked(Model_385_ice,
;                       S1,
;                       ep(Model_385_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_385_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_385_ice,
;                          one(Model_385_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_385_ice,
;                          S1,
;                          one(Model_385_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_385_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_385_ice)),
;                     one(Model_385_ice) ==
;                     ep(Model_385_ice,
;                        S1,
;                        first(Model_385_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_385_ice, S1, first(Model_385_ice)),
;                Not(locked(Model_385_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_385_ice))),
;                Not(le(Model_385_ice,
;                       ep(Model_385_ice,
;                          S1,
;                          first(Model_385_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         Or(held(Model_385_ice, S1, first(Model_385_ice)),
;            Not(held(Model_385_ice, S1, Node_1)),
;            Not(locked(Model_385_ice,
;                       S1,
;                       ep(Model_385_ice,
;                          S1,
;                          first(Model_385_ice)),
;                       Node_1)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!5 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_385_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!4
;                   Epoch!val!1)))
;   (let ((a!3 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!4
;                   (ite a!1 Epoch!val!3 a!2))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!2))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!2)))
;          Epoch!val!5
;          a!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!2))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_385_ice S1 Node!val!0 Node!val!0)
                (inv Model_385_ice S1 Node!val!0 Node!val!1)
                (inv Model_385_ice S1 Node!val!0 Node!val!2)
                (inv Model_385_ice S1 Node!val!1 Node!val!0)
                (inv Model_385_ice S1 Node!val!1 Node!val!1)
                (inv Model_385_ice S1 Node!val!1 Node!val!2)
                (inv Model_385_ice S1 Node!val!2 Node!val!0)
                (inv Model_385_ice S1 Node!val!2 Node!val!1)
                (inv Model_385_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_385_ice S2 Node!val!0 Node!val!0)
           (inv Model_385_ice S2 Node!val!0 Node!val!1)
           (inv Model_385_ice S2 Node!val!0 Node!val!2)
           (inv Model_385_ice S2 Node!val!1 Node!val!0)
           (inv Model_385_ice S2 Node!val!1 Node!val!1)
           (inv Model_385_ice S2 Node!val!1 Node!val!2)
           (inv Model_385_ice S2 Node!val!2 Node!val!0)
           (inv Model_385_ice S2 Node!val!2 Node!val!1)
           (inv Model_385_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f282280>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_386_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_386_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_386_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_386_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_386_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_386_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_386_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_386_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_386_ice,
;                              zero(Model_386_ice),
;                              Epoch_1),
;                           one(Model_386_ice) !=
;                           zero(Model_386_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_386_ice,
;                          S1,
;                          zero(Model_386_ice),
;                          first(Model_386_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_386_ice) ==
;                 ep(Model_386_ice, S1, first(Model_386_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_386_ice,
;                        S1,
;                        zero(Model_386_ice),
;                        first(Model_386_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_386_ice,
;                          S1,
;                          zero(Model_386_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_386_ice,
;                        S1,
;                        zero(Model_386_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_386_ice,
;                           S1,
;                           one(Model_386_ice),
;                           Node_1)),
;                transfer(Model_386_ice,
;                         S1,
;                         one(Model_386_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_386_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_386_ice))),
;                transfer(Model_386_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_386_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_386_ice,
;                       S1,
;                       first(Model_386_ice))),
;                le(Model_386_ice,
;                   one(Model_386_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_386_ice,
;                        S1,
;                        one(Model_386_ice),
;                        first(Model_386_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_386_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_386_ice))),
;                le(Model_386_ice,
;                   one(Model_386_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_386_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_386_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_386_ice, S1, Node_1),
;                     zero(Model_386_ice) ==
;                     ep(Model_386_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_386_ice) ==
;                           ep(Model_386_ice,
;                              S1,
;                              first(Model_386_ice))),
;                       zero(Model_386_ice) ==
;                       one(Model_386_ice))),
;                transfer(Model_386_ice,
;                         S1,
;                         ep(Model_386_ice,
;                            S1,
;                            first(Model_386_ice)),
;                         first(Model_386_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_386_ice) ==
;                ep(Model_386_ice, S1, first(Model_386_ice)),
;                locked(Model_386_ice,
;                       S1,
;                       ep(Model_386_ice,
;                          S1,
;                          first(Model_386_ice)),
;                       first(Model_386_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_386_ice,
;                            S1,
;                            one(Model_386_ice),
;                            Node_1),
;                     zero(Model_386_ice) ==
;                     ep(Model_386_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_386_ice,
;                   ep(Model_386_ice, S1, Node_1),
;                   ep(Model_386_ice,
;                      S1,
;                      first(Model_386_ice))),
;                locked(Model_386_ice,
;                       S1,
;                       ep(Model_386_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(Node_1 == first(Model_386_ice),
;                locked(Model_386_ice,
;                       S1,
;                       ep(Model_386_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_386_ice) ==
;                ep(Model_386_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_386_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_386_ice,
;                          one(Model_386_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_386_ice,
;                          S1,
;                          one(Model_386_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_386_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_386_ice)),
;                     one(Model_386_ice) ==
;                     ep(Model_386_ice,
;                        S1,
;                        first(Model_386_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_386_ice, S1, first(Model_386_ice)),
;                Not(le(Model_386_ice,
;                       ep(Model_386_ice,
;                          S1,
;                          first(Model_386_ice)),
;                       Epoch_1)),
;                Not(locked(Model_386_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_386_ice)))))),
;  ForAll(Epoch_1,
;         Or(Epoch_1 == one(Model_386_ice),
;            Not(locked(Model_386_ice,
;                       S1,
;                       ep(Model_386_ice,
;                          S1,
;                          first(Model_386_ice)),
;                       first(Model_386_ice))),
;            Not(le(Model_386_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_386_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!1
;        Epoch!val!3))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_386_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_386_ice S1 Node!val!0 Node!val!0))
         (inv Model_386_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7ef50bb0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_387_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_387_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_387_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_387_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_387_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_387_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_387_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_387_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_387_ice,
;                              zero(Model_387_ice),
;                              Epoch_1),
;                           one(Model_387_ice) !=
;                           zero(Model_387_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_387_ice,
;                          S1,
;                          zero(Model_387_ice),
;                          first(Model_387_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_387_ice) ==
;                 ep(Model_387_ice, S1, first(Model_387_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_387_ice,
;                        S1,
;                        zero(Model_387_ice),
;                        first(Model_387_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_387_ice,
;                          S1,
;                          zero(Model_387_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_387_ice,
;                        S1,
;                        zero(Model_387_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_387_ice,
;                           S1,
;                           one(Model_387_ice),
;                           Node_1)),
;                transfer(Model_387_ice,
;                         S1,
;                         one(Model_387_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_387_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_387_ice))),
;                transfer(Model_387_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_387_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_387_ice,
;                       S1,
;                       first(Model_387_ice))),
;                le(Model_387_ice,
;                   one(Model_387_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_387_ice,
;                        S1,
;                        one(Model_387_ice),
;                        first(Model_387_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_387_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_387_ice))),
;                le(Model_387_ice,
;                   one(Model_387_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_387_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_387_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_387_ice, S1, Node_1),
;                     zero(Model_387_ice) ==
;                     ep(Model_387_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_387_ice) ==
;                           ep(Model_387_ice,
;                              S1,
;                              first(Model_387_ice))),
;                       zero(Model_387_ice) ==
;                       one(Model_387_ice))),
;                transfer(Model_387_ice,
;                         S1,
;                         ep(Model_387_ice,
;                            S1,
;                            first(Model_387_ice)),
;                         first(Model_387_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_387_ice) ==
;                ep(Model_387_ice, S1, first(Model_387_ice)),
;                locked(Model_387_ice,
;                       S1,
;                       ep(Model_387_ice,
;                          S1,
;                          first(Model_387_ice)),
;                       first(Model_387_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_387_ice,
;                            S1,
;                            one(Model_387_ice),
;                            Node_1),
;                     zero(Model_387_ice) ==
;                     ep(Model_387_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_387_ice,
;                   ep(Model_387_ice, S1, Node_1),
;                   ep(Model_387_ice,
;                      S1,
;                      first(Model_387_ice))),
;                locked(Model_387_ice,
;                       S1,
;                       ep(Model_387_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(zero(Model_387_ice) ==
;                ep(Model_387_ice, S1, Node_1),
;                locked(Model_387_ice,
;                       S1,
;                       ep(Model_387_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_387_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_387_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_387_ice,
;                          one(Model_387_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_387_ice,
;                          S1,
;                          one(Model_387_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_387_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_387_ice)),
;                     one(Model_387_ice) ==
;                     ep(Model_387_ice,
;                        S1,
;                        first(Model_387_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_387_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_387_ice))),
;                Not(le(Model_387_ice,
;                       ep(Model_387_ice,
;                          S1,
;                          first(Model_387_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_387_ice, S1, first(Model_387_ice))))),
;  ForAll(Epoch_1,
;         Or(held(Model_387_ice, S1, first(Model_387_ice)),
;            Epoch_1 ==
;            ep(Model_387_ice, S1, first(Model_387_ice)),
;            Not(locked(Model_387_ice,
;                       S1,
;                       Epoch_1,
;                       first(Model_387_ice))))),
;  And(ForAll(Node_1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_387_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
;        Epoch!val!4
;        Epoch!val!2))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_387_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_387_ice S1 Node!val!0 Node!val!0))
         (inv Model_387_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f2c06d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_388_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_388_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_388_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_388_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_388_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_388_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_388_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_388_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_388_ice,
;                              zero(Model_388_ice),
;                              Epoch_1),
;                           one(Model_388_ice) !=
;                           zero(Model_388_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_388_ice,
;                          S1,
;                          zero(Model_388_ice),
;                          first(Model_388_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_388_ice) ==
;                 ep(Model_388_ice, S1, first(Model_388_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_388_ice,
;                        S1,
;                        zero(Model_388_ice),
;                        first(Model_388_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_388_ice,
;                          S1,
;                          zero(Model_388_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_388_ice,
;                        S1,
;                        zero(Model_388_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_388_ice,
;                           S1,
;                           one(Model_388_ice),
;                           Node_1)),
;                transfer(Model_388_ice,
;                         S1,
;                         one(Model_388_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_388_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_388_ice))),
;                transfer(Model_388_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_388_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_388_ice,
;                       S1,
;                       first(Model_388_ice))),
;                le(Model_388_ice,
;                   one(Model_388_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_388_ice,
;                        S1,
;                        one(Model_388_ice),
;                        first(Model_388_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_388_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_388_ice))),
;                le(Model_388_ice,
;                   one(Model_388_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_388_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_388_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_388_ice, S1, Node_1),
;                     zero(Model_388_ice) ==
;                     ep(Model_388_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_388_ice) ==
;                           ep(Model_388_ice,
;                              S1,
;                              first(Model_388_ice))),
;                       zero(Model_388_ice) ==
;                       one(Model_388_ice))),
;                transfer(Model_388_ice,
;                         S1,
;                         ep(Model_388_ice,
;                            S1,
;                            first(Model_388_ice)),
;                         first(Model_388_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_388_ice) ==
;                ep(Model_388_ice, S1, first(Model_388_ice)),
;                locked(Model_388_ice,
;                       S1,
;                       ep(Model_388_ice,
;                          S1,
;                          first(Model_388_ice)),
;                       first(Model_388_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_388_ice,
;                            S1,
;                            one(Model_388_ice),
;                            Node_1),
;                     zero(Model_388_ice) ==
;                     ep(Model_388_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_388_ice,
;                   ep(Model_388_ice, S1, Node_1),
;                   ep(Model_388_ice,
;                      S1,
;                      first(Model_388_ice))),
;                locked(Model_388_ice,
;                       S1,
;                       ep(Model_388_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_388_ice,
;                       S1,
;                       ep(Model_388_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_388_ice),
;                zero(Model_388_ice) ==
;                ep(Model_388_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_388_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_388_ice,
;                          one(Model_388_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_388_ice,
;                          S1,
;                          one(Model_388_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_388_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_388_ice)),
;                     one(Model_388_ice) ==
;                     ep(Model_388_ice,
;                        S1,
;                        first(Model_388_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_388_ice, S1, first(Model_388_ice)),
;                Not(le(Model_388_ice,
;                       ep(Model_388_ice,
;                          S1,
;                          first(Model_388_ice)),
;                       Epoch_1)),
;                Not(locked(Model_388_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_388_ice)))))),
;  ForAll(Epoch_1,
;         Or(held(Model_388_ice, S1, first(Model_388_ice)),
;            le(Model_388_ice, one(Model_388_ice), Epoch_1),
;            Epoch_1 == zero(Model_388_ice))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_388_ice,
;                          S2,
;                          zero(Model_388_ice),
;                          first(Model_388_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun Model_388_ice () ModelId
;   ModelId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!1))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!1)))
;          Epoch!val!4
;          (ite a!1 Epoch!val!3 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_388_ice S1 Node!val!0 Node!val!0)
                (inv Model_388_ice S1 Node!val!0 Node!val!1)
                (inv Model_388_ice S1 Node!val!1 Node!val!0)
                (inv Model_388_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_388_ice S2 Node!val!0 Node!val!0)
           (inv Model_388_ice S2 Node!val!0 Node!val!1)
           (inv Model_388_ice S2 Node!val!1 Node!val!0)
           (inv Model_388_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f1e22e0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_389_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_389_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_389_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_389_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_389_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_389_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_389_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_389_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_389_ice,
;                              zero(Model_389_ice),
;                              Epoch_1),
;                           one(Model_389_ice) !=
;                           zero(Model_389_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_389_ice,
;                          S1,
;                          zero(Model_389_ice),
;                          first(Model_389_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_389_ice) ==
;                 ep(Model_389_ice, S1, first(Model_389_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_389_ice,
;                        S1,
;                        zero(Model_389_ice),
;                        first(Model_389_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_389_ice,
;                          S1,
;                          zero(Model_389_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_389_ice,
;                        S1,
;                        zero(Model_389_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_389_ice,
;                           S1,
;                           one(Model_389_ice),
;                           Node_1)),
;                transfer(Model_389_ice,
;                         S1,
;                         one(Model_389_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_389_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_389_ice))),
;                transfer(Model_389_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_389_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_389_ice,
;                       S1,
;                       first(Model_389_ice))),
;                le(Model_389_ice,
;                   one(Model_389_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_389_ice,
;                        S1,
;                        one(Model_389_ice),
;                        first(Model_389_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_389_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_389_ice))),
;                le(Model_389_ice,
;                   one(Model_389_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_389_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_389_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_389_ice, S1, Node_1),
;                     zero(Model_389_ice) ==
;                     ep(Model_389_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_389_ice) ==
;                           ep(Model_389_ice,
;                              S1,
;                              first(Model_389_ice))),
;                       zero(Model_389_ice) ==
;                       one(Model_389_ice))),
;                transfer(Model_389_ice,
;                         S1,
;                         ep(Model_389_ice,
;                            S1,
;                            first(Model_389_ice)),
;                         first(Model_389_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_389_ice) ==
;                ep(Model_389_ice, S1, first(Model_389_ice)),
;                locked(Model_389_ice,
;                       S1,
;                       ep(Model_389_ice,
;                          S1,
;                          first(Model_389_ice)),
;                       first(Model_389_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_389_ice,
;                            S1,
;                            one(Model_389_ice),
;                            Node_1),
;                     zero(Model_389_ice) ==
;                     ep(Model_389_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_389_ice,
;                   ep(Model_389_ice, S1, Node_1),
;                   ep(Model_389_ice,
;                      S1,
;                      first(Model_389_ice))),
;                locked(Model_389_ice,
;                       S1,
;                       ep(Model_389_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_389_ice,
;                       S1,
;                       ep(Model_389_ice, S1, Node_1),
;                       Node_1),
;                zero(Model_389_ice) ==
;                ep(Model_389_ice, S1, Node_1),
;                Node_1 == first(Model_389_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_389_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_389_ice,
;                          one(Model_389_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_389_ice,
;                          S1,
;                          one(Model_389_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_389_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_389_ice)),
;                     one(Model_389_ice) ==
;                     ep(Model_389_ice,
;                        S1,
;                        first(Model_389_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_389_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_389_ice))),
;                Not(le(Model_389_ice,
;                       ep(Model_389_ice,
;                          S1,
;                          first(Model_389_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_389_ice, S1, first(Model_389_ice))))),
;  ForAll(Epoch_1,
;         Or(locked(Model_389_ice,
;                   S1,
;                   Epoch_1,
;                   first(Model_389_ice)),
;            le(Model_389_ice, Epoch_1, one(Model_389_ice)),
;            Not(le(Model_389_ice,
;                   Epoch_1,
;                   ep(Model_389_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_389_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;        Epoch!val!3
;        Epoch!val!2))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_389_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_389_ice S1 Node!val!0 Node!val!0))
         (inv Model_389_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f00b6d0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_390_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_390_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_390_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_390_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_390_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_390_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_390_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_390_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_390_ice,
;                              zero(Model_390_ice),
;                              Epoch_1),
;                           one(Model_390_ice) !=
;                           zero(Model_390_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_390_ice,
;                          S1,
;                          zero(Model_390_ice),
;                          first(Model_390_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_390_ice) ==
;                 ep(Model_390_ice, S1, first(Model_390_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_390_ice,
;                        S1,
;                        zero(Model_390_ice),
;                        first(Model_390_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_390_ice,
;                          S1,
;                          zero(Model_390_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_390_ice,
;                        S1,
;                        zero(Model_390_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_390_ice,
;                           S1,
;                           one(Model_390_ice),
;                           Node_1)),
;                transfer(Model_390_ice,
;                         S1,
;                         one(Model_390_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_390_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_390_ice))),
;                transfer(Model_390_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_390_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_390_ice,
;                       S1,
;                       first(Model_390_ice))),
;                le(Model_390_ice,
;                   one(Model_390_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_390_ice,
;                        S1,
;                        one(Model_390_ice),
;                        first(Model_390_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_390_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_390_ice))),
;                le(Model_390_ice,
;                   one(Model_390_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_390_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_390_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_390_ice, S1, Node_1),
;                     zero(Model_390_ice) ==
;                     ep(Model_390_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_390_ice) ==
;                           ep(Model_390_ice,
;                              S1,
;                              first(Model_390_ice))),
;                       zero(Model_390_ice) ==
;                       one(Model_390_ice))),
;                transfer(Model_390_ice,
;                         S1,
;                         ep(Model_390_ice,
;                            S1,
;                            first(Model_390_ice)),
;                         first(Model_390_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_390_ice) ==
;                ep(Model_390_ice, S1, first(Model_390_ice)),
;                locked(Model_390_ice,
;                       S1,
;                       ep(Model_390_ice,
;                          S1,
;                          first(Model_390_ice)),
;                       first(Model_390_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_390_ice,
;                            S1,
;                            one(Model_390_ice),
;                            Node_1),
;                     zero(Model_390_ice) ==
;                     ep(Model_390_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_390_ice,
;                   ep(Model_390_ice, S1, Node_1),
;                   ep(Model_390_ice,
;                      S1,
;                      first(Model_390_ice))),
;                locked(Model_390_ice,
;                       S1,
;                       ep(Model_390_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(zero(Model_390_ice) ==
;                ep(Model_390_ice, S1, Node_1),
;                locked(Model_390_ice,
;                       S1,
;                       ep(Model_390_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_390_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_390_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_390_ice,
;                          one(Model_390_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_390_ice,
;                          S1,
;                          one(Model_390_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_390_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_390_ice)),
;                     one(Model_390_ice) ==
;                     ep(Model_390_ice,
;                        S1,
;                        first(Model_390_ice))))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_390_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_390_ice))),
;                Not(le(Model_390_ice,
;                       ep(Model_390_ice,
;                          S1,
;                          first(Model_390_ice)),
;                       Epoch_1)),
;                Epoch_1 ==
;                ep(Model_390_ice, S1, first(Model_390_ice))))),
;  ForAll(Epoch_1,
;         Or(Not(held(Model_390_ice, S1, first(Model_390_ice))),
;            Not(And(transfer(Model_390_ice,
;                             S1,
;                             Epoch_1,
;                             first(Model_390_ice)),
;                    one(Model_390_ice) ==
;                    ep(Model_390_ice,
;                       S1,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_390_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!0))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!0)))
;          Epoch!val!3
;          (ite a!1 Epoch!val!1 Epoch!val!0))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!0)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_390_ice S1 Node!val!0 Node!val!0)
                (inv Model_390_ice S1 Node!val!0 Node!val!1)
                (inv Model_390_ice S1 Node!val!1 Node!val!0)
                (inv Model_390_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_390_ice S2 Node!val!0 Node!val!0)
           (inv Model_390_ice S2 Node!val!0 Node!val!1)
           (inv Model_390_ice S2 Node!val!1 Node!val!0)
           (inv Model_390_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f079be0>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_391_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_391_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_391_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_391_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_391_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_391_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_391_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_391_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_391_ice,
;                              zero(Model_391_ice),
;                              Epoch_1),
;                           one(Model_391_ice) !=
;                           zero(Model_391_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_391_ice,
;                          S1,
;                          zero(Model_391_ice),
;                          first(Model_391_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_391_ice) ==
;                 ep(Model_391_ice, S1, first(Model_391_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_391_ice,
;                        S1,
;                        zero(Model_391_ice),
;                        first(Model_391_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_391_ice,
;                          S1,
;                          zero(Model_391_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_391_ice,
;                        S1,
;                        zero(Model_391_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_391_ice,
;                           S1,
;                           one(Model_391_ice),
;                           Node_1)),
;                transfer(Model_391_ice,
;                         S1,
;                         one(Model_391_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_391_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_391_ice))),
;                transfer(Model_391_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_391_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_391_ice,
;                       S1,
;                       first(Model_391_ice))),
;                le(Model_391_ice,
;                   one(Model_391_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_391_ice,
;                        S1,
;                        one(Model_391_ice),
;                        first(Model_391_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_391_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_391_ice))),
;                le(Model_391_ice,
;                   one(Model_391_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_391_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_391_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_391_ice, S1, Node_1),
;                     zero(Model_391_ice) ==
;                     ep(Model_391_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_391_ice) ==
;                           ep(Model_391_ice,
;                              S1,
;                              first(Model_391_ice))),
;                       zero(Model_391_ice) ==
;                       one(Model_391_ice))),
;                transfer(Model_391_ice,
;                         S1,
;                         ep(Model_391_ice,
;                            S1,
;                            first(Model_391_ice)),
;                         first(Model_391_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_391_ice) ==
;                ep(Model_391_ice, S1, first(Model_391_ice)),
;                locked(Model_391_ice,
;                       S1,
;                       ep(Model_391_ice,
;                          S1,
;                          first(Model_391_ice)),
;                       first(Model_391_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_391_ice,
;                            S1,
;                            one(Model_391_ice),
;                            Node_1),
;                     zero(Model_391_ice) ==
;                     ep(Model_391_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_391_ice,
;                   ep(Model_391_ice, S1, Node_1),
;                   ep(Model_391_ice,
;                      S1,
;                      first(Model_391_ice))),
;                locked(Model_391_ice,
;                       S1,
;                       ep(Model_391_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(locked(Model_391_ice,
;                       S1,
;                       ep(Model_391_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_391_ice),
;                zero(Model_391_ice) ==
;                ep(Model_391_ice, S1, Node_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_391_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_391_ice,
;                          one(Model_391_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_391_ice,
;                          S1,
;                          one(Model_391_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_391_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_391_ice)),
;                     one(Model_391_ice) ==
;                     ep(Model_391_ice,
;                        S1,
;                        first(Model_391_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_391_ice, S1, first(Model_391_ice)),
;                Not(locked(Model_391_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_391_ice))),
;                Not(le(Model_391_ice,
;                       ep(Model_391_ice,
;                          S1,
;                          first(Model_391_ice)),
;                       Epoch_1))))),
;  ForAll(Epoch_1,
;         Or(one(Model_391_ice) ==
;            ep(Model_391_ice, S1, first(Model_391_ice)),
;            Epoch_1 == one(Model_391_ice),
;            Not(le(Model_391_ice,
;                   Epoch_1,
;                   one(Model_391_ice))),
;            Epoch_1 == zero(Model_391_ice),
;            held(Model_391_ice, S1, first(Model_391_ice)))),
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun Model_391_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
;        Epoch!val!4
;        Epoch!val!1))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_391_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_391_ice S1 Node!val!0 Node!val!0))
         (inv Model_391_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; <invar_synth.utils.qexpr.QExpr object at 0x7fba7f282490>
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_392_ice,
;                              Epoch_1,
;                              Epoch_1),
;                           Implies(And(le(Model_392_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_392_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_392_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_392_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_392_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_392_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_392_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_392_ice,
;                              zero(Model_392_ice),
;                              Epoch_1),
;                           one(Model_392_ice) !=
;                           zero(Model_392_ice))))),
;  And(ForAll(Node_1,
;             Not(transfer(Model_392_ice,
;                          S1,
;                          zero(Model_392_ice),
;                          first(Model_392_ice)))),
;      ForAll(Node_1,
;             Not(zero(Model_392_ice) ==
;                 ep(Model_392_ice, S1, first(Model_392_ice)))),
;      ForAll(Node_1,
;             Not(locked(Model_392_ice,
;                        S1,
;                        zero(Model_392_ice),
;                        first(Model_392_ice)))),
;      ForAll(Node_1,
;             Not(transfer(Model_392_ice,
;                          S1,
;                          zero(Model_392_ice),
;                          Node_1))),
;      ForAll(Node_1,
;             Not(locked(Model_392_ice,
;                        S1,
;                        zero(Model_392_ice),
;                        Node_1))),
;      ForAll(Node_1,
;             Or(Not(locked(Model_392_ice,
;                           S1,
;                           one(Model_392_ice),
;                           Node_1)),
;                transfer(Model_392_ice,
;                         S1,
;                         one(Model_392_ice),
;                         Node_1))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_392_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_392_ice))),
;                transfer(Model_392_ice,
;                         S1,
;                         Epoch_1,
;                         first(Model_392_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(Epoch_1 ==
;                    ep(Model_392_ice,
;                       S1,
;                       first(Model_392_ice))),
;                le(Model_392_ice,
;                   one(Model_392_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             Not(locked(Model_392_ice,
;                        S1,
;                        one(Model_392_ice),
;                        first(Model_392_ice)))),
;      ForAll(Epoch_1,
;             Or(Not(locked(Model_392_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_392_ice))),
;                le(Model_392_ice,
;                   one(Model_392_ice),
;                   Epoch_1))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(locked(Model_392_ice,
;                                  S1,
;                                  Epoch_1,
;                                  Node_1)),
;                       transfer(Model_392_ice,
;                                S1,
;                                Epoch_1,
;                                Node_1)))),
;      ForAll(Node_1,
;             Not(And(held(Model_392_ice, S1, Node_1),
;                     zero(Model_392_ice) ==
;                     ep(Model_392_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(Not(Or(Not(one(Model_392_ice) ==
;                           ep(Model_392_ice,
;                              S1,
;                              first(Model_392_ice))),
;                       zero(Model_392_ice) ==
;                       one(Model_392_ice))),
;                transfer(Model_392_ice,
;                         S1,
;                         ep(Model_392_ice,
;                            S1,
;                            first(Model_392_ice)),
;                         first(Model_392_ice)))),
;      ForAll(Node_1,
;             Or(one(Model_392_ice) ==
;                ep(Model_392_ice, S1, first(Model_392_ice)),
;                locked(Model_392_ice,
;                       S1,
;                       ep(Model_392_ice,
;                          S1,
;                          first(Model_392_ice)),
;                       first(Model_392_ice)))),
;      ForAll(Node_1,
;             Not(And(locked(Model_392_ice,
;                            S1,
;                            one(Model_392_ice),
;                            Node_1),
;                     zero(Model_392_ice) ==
;                     ep(Model_392_ice, S1, Node_1)))),
;      ForAll(Node_1,
;             Or(le(Model_392_ice,
;                   ep(Model_392_ice, S1, Node_1),
;                   ep(Model_392_ice,
;                      S1,
;                      first(Model_392_ice))),
;                locked(Model_392_ice,
;                       S1,
;                       ep(Model_392_ice, S1, Node_1),
;                       Node_1))),
;      ForAll(Node_1,
;             Or(zero(Model_392_ice) ==
;                ep(Model_392_ice, S1, Node_1),
;                locked(Model_392_ice,
;                       S1,
;                       ep(Model_392_ice, S1, Node_1),
;                       Node_1),
;                Node_1 == first(Model_392_ice))),
;      ForAll(Node_1,
;             ForAll(Epoch_1,
;                    Or(Not(transfer(Model_392_ice,
;                                    S1,
;                                    Epoch_1,
;                                    Node_1)),
;                       le(Model_392_ice,
;                          one(Model_392_ice),
;                          Epoch_1)))),
;      ForAll(Node_1,
;             Not(transfer(Model_392_ice,
;                          S1,
;                          one(Model_392_ice),
;                          Node_1))),
;      ForAll(Epoch_1,
;             Not(And(locked(Model_392_ice,
;                            S1,
;                            Epoch_1,
;                            first(Model_392_ice)),
;                     one(Model_392_ice) ==
;                     ep(Model_392_ice,
;                        S1,
;                        first(Model_392_ice))))),
;      ForAll(Epoch_1,
;             Or(Epoch_1 ==
;                ep(Model_392_ice, S1, first(Model_392_ice)),
;                Not(locked(Model_392_ice,
;                           S1,
;                           Epoch_1,
;                           first(Model_392_ice))),
;                Not(le(Model_392_ice,
;                       ep(Model_392_ice,
;                          S1,
;                          first(Model_392_ice)),
;                       Epoch_1))))),
;  ForAll(Node_1,
;         ForAll(Node_2,
;                Or(one(Model_392_ice) ==
;                   ep(Model_392_ice,
;                      S1,
;                      first(Model_392_ice)),
;                   Node_1 == first(Model_392_ice),
;                   Node_2 == first(Model_392_ice),
;                   Not(Or(Not(held(Model_392_ice,
; ...
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_392_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!1)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!4 Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_392_ice S1 Node!val!0 Node!val!0)
                (inv Model_392_ice S1 Node!val!0 Node!val!1)
                (inv Model_392_ice S1 Node!val!1 Node!val!0)
                (inv Model_392_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_392_ice S2 Node!val!0 Node!val!0)
           (inv Model_392_ice S2 Node!val!0 Node!val!1)
           (inv Model_392_ice S2 Node!val!1 Node!val!0)
           (inv Model_392_ice S2 Node!val!1 Node!val!1)))))

; this one includes assertion of axioms, so no need to assert it again
(assert (forall ((Epoch_1 Epoch))
  (forall ((Epoch_2 Epoch))
    (forall ((Epoch_3 Epoch))
      (and (le Model_DUMMYMODEL Epoch_1 Epoch_1)
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_3))
               (le Model_DUMMYMODEL Epoch_1 Epoch_3))
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_1))
               (= Epoch_1 Epoch_2))
           (or (le Model_DUMMYMODEL Epoch_1 Epoch_2)
               (le Model_DUMMYMODEL Epoch_2 Epoch_1))
           (le Model_DUMMYMODEL (zero Model_DUMMYMODEL) Epoch_1)
           (distinct (one Model_DUMMYMODEL) (zero Model_DUMMYMODEL)))))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL
                 DUMMYSTATE
                 (zero Model_DUMMYMODEL)
                 (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (= (zero Model_DUMMYMODEL)
          (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (zero Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1))
      (transfer Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1))))
(assert (forall ((Epoch_1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))
      (transfer Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))))
(assert (forall ((Epoch_1 Epoch))
  (let ((a!1 (not (= Epoch_1
                     (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
    (or a!1 (le Model_DUMMYMODEL (one Model_DUMMYMODEL) Epoch_1)))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (one Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Epoch_1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 (first Model_DUMMYMODEL)))
      (le Model_DUMMYMODEL (one Model_DUMMYMODEL) Epoch_1))))
(assert (forall ((Node_1 Node))
  (forall ((Epoch_1 Epoch))
    (or (not (locked Model_DUMMYMODEL DUMMYSTATE Epoch_1 Node_1))
        (transfer Model_DUMMYMODEL DUMMYSTATE Epoch_1 Node_1)))))
(assert (forall ((Node_1 Node))
  (not (and (held Model_DUMMYMODEL DUMMYSTATE Node_1)
            (= (zero Model_DUMMYMODEL) (ep Model_DUMMYMODEL DUMMYSTATE Node_1))))))
(assert (forall ((Node_1 Node))
  (let ((a!1 (not (= (one Model_DUMMYMODEL)
                     (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
  (let ((a!2 (not (or a!1 (= (zero Model_DUMMYMODEL) (one Model_DUMMYMODEL))))))
    (or a!2
        (transfer Model_DUMMYMODEL
                  DUMMYSTATE
                  (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
                  (first Model_DUMMYMODEL)))))))
(assert (forall ((Node_1 Node))
  (or (= (one Model_DUMMYMODEL)
         (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
      (locked Model_DUMMYMODEL
              DUMMYSTATE
              (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
              (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (and (locked Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1)
            (= (zero Model_DUMMYMODEL) (ep Model_DUMMYMODEL DUMMYSTATE Node_1))))))
(assert (forall ((Node_1 Node))
  (or (le Model_DUMMYMODEL
          (ep Model_DUMMYMODEL DUMMYSTATE Node_1)
          (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
      (locked Model_DUMMYMODEL
              DUMMYSTATE
              (ep Model_DUMMYMODEL DUMMYSTATE Node_1)
              Node_1))))
(assert (forall ((Node_1 Node))
  (or (= Node_1 (first Model_DUMMYMODEL))
      (= (zero Model_DUMMYMODEL) (ep Model_DUMMYMODEL DUMMYSTATE Node_1))
      (locked Model_DUMMYMODEL
              DUMMYSTATE
              (ep Model_DUMMYMODEL DUMMYSTATE Node_1)
              Node_1))))
(assert (forall ((Node_1 Node))
  (forall ((Epoch_1 Epoch))
    (or (not (transfer Model_DUMMYMODEL DUMMYSTATE Epoch_1 Node_1))
        (le Model_DUMMYMODEL (one Model_DUMMYMODEL) Epoch_1)))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL DUMMYSTATE (one Model_DUMMYMODEL) Node_1))))
(assert (forall ((Epoch_1 Epoch))
  (let ((a!1 (and (locked Model_DUMMYMODEL
                          DUMMYSTATE
                          Epoch_1
                          (first Model_DUMMYMODEL))
                  (= (one Model_DUMMYMODEL)
                     (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
    (not a!1))))
(assert (forall ((Epoch_1 Epoch))
  (let ((a!1 (not (le Model_DUMMYMODEL
                      (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
                      Epoch_1))))
    (or (= Epoch_1 (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
        a!1
        (not (locked Model_DUMMYMODEL
                     DUMMYSTATE
                     Epoch_1
                     (first Model_DUMMYMODEL)))))))
(assert (not (inv Model_DUMMYMODEL DUMMYSTATE Node!val!0 Node!val!0)))

; the following is to assert that we don't get True as an invariant
(declare-fun N1 () Node)
(declare-fun N2 () Node)
;(assert (not (inv Model_DUMMYMODEL DUMMYSTATE N1 N2)))

(check-synth)

