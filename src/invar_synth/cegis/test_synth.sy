
(set-option :random-seed 123)

;(declare-sort ModelId)
;(declare-sort StateId)
;(declare-sort Node)
;(declare-sort Epoch)

(declare-datatypes ( (Node 0) ) ((
(Node!val!0) 
(Node!val!2) 
(Node!val!1) 
)))

(declare-datatypes ( (Epoch 0) ) ((
(Epoch!val!2) 
(Epoch!val!1) 
(Epoch!val!0) 
(Epoch!val!5) 
(Epoch!val!4) 
(Epoch!val!3) 
)))

(declare-datatypes ( (ModelId 0) ) ((
(Model_DUMMYMODEL) 
(Model_38_ice) 
(Model_1_pos) 
(Model_37_ice) 
(Model_28_ice) 
(Model_27_ice) 
(Model_11_pos) 
(Model_26_ice) 
(Model_29_ice) 
(Model_30_ice) 
(Model_0_pos) 
(Model_42_ice) 
(Model_32_ice) 
(Model_43_ice) 
(Model_45_ice) 
(Model_40_ice) 
(Model_35_ice) 
(Model_34_ice) 
(Model_31_ice) 
(Model_41_ice) 
(Model_44_ice) 
(Model_39_ice) 
(Model_36_ice) 
(Model_46_ice) 
(Model_33_ice) 
)))

(declare-datatypes ( (StateId 0) ) ((
(DUMMYSTATE) 
(S2) 
(S1) 
(init) 
)))


;(declare-fun held (ModelId StateId Node) Bool)
;(declare-fun locked (ModelId StateId Epoch Node) Bool)
;(declare-fun transfer (ModelId StateId Epoch Node) Bool)
;(declare-fun ep (ModelId StateId Node) Epoch)
;(declare-fun le (ModelId Epoch Epoch) Bool)
;(declare-fun zero (ModelId) Epoch)
;(declare-fun one (ModelId) Epoch)
;(declare-fun first (ModelId) Node)

(declare-fun held_dummy (ModelId StateId Node) Bool)
(define-fun held ((a0 ModelId) (a1 StateId) (a2 Node)) Bool
    	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!2) ) true
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!2) ) true
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!2) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Node!val!1) ) true
	(held_dummy a0 a1 a2 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(declare-fun locked_dummy (ModelId StateId Epoch Node) Bool)
(define-fun locked ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
    	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(locked_dummy a0 a1 a2 a3 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(declare-fun transfer_dummy (ModelId StateId Epoch Node) Bool)
(define-fun transfer ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
    	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!5) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!5) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!2) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!3) (= a3 Node!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!0) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!4) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!2) (= a3 Node!val!1) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Epoch!val!1) (= a3 Node!val!1) ) false
	(transfer_dummy a0 a1 a2 a3 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(declare-fun ep_dummy (ModelId StateId Node) Epoch)
(define-fun ep ((a0 ModelId) (a1 StateId) (a2 Node)) Epoch
    	(ite (and (= a0 Model_0_pos) (= a1 init) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_1_pos) (= a1 init) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_11_pos) (= a1 init) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_26_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_26_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_27_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_27_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_28_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_28_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_29_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_29_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_30_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_30_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_31_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_31_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_32_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_32_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_33_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_33_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_34_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!1
	(ite (and (= a0 Model_34_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_35_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!5
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_35_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!5
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_36_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!0
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_36_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_37_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_37_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_38_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_38_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!1
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_39_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!2
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_39_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_40_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_40_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!2
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_41_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!4
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_41_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!4
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_42_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!3
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_42_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!3
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_43_ice) (= a1 S1) (= a2 Node!val!2) ) Epoch!val!3
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!1
	(ite (and (= a0 Model_43_ice) (= a1 S2) (= a2 Node!val!2) ) Epoch!val!3
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_44_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!3
	(ite (and (= a0 Model_44_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!0
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_45_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!3
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_45_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_46_ice) (= a1 S1) (= a2 Node!val!1) ) Epoch!val!2
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Node!val!0) ) Epoch!val!4
	(ite (and (= a0 Model_46_ice) (= a1 S2) (= a2 Node!val!1) ) Epoch!val!3
	(ep_dummy a0 a1 a2 )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(declare-fun le_dummy (ModelId Epoch Epoch) Bool)
(define-fun le ((a0 ModelId) (a1 Epoch) (a2 Epoch)) Bool
    	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_0_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_1_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_11_pos) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_26_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_27_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_28_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_29_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_30_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_31_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_32_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_33_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_34_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!5) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!5) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!5) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!5) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!5) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!5) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!5) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_35_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_36_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_37_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_38_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_39_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_40_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_41_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_42_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_43_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_44_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) false
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_45_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!3) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!0) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!0) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!4) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!4) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!3) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!2) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!2) (= a2 Epoch!val!1) ) true
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!3) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!0) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!4) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!2) ) false
	(ite (and (= a0 Model_46_ice) (= a1 Epoch!val!1) (= a2 Epoch!val!1) ) true
	(le_dummy a0 a1 a2 ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)
(declare-fun zero_dummy (ModelId) Epoch)
(define-fun zero ((a0 ModelId)) Epoch
    	(ite (and (= a0 Model_0_pos) ) Epoch!val!2
	(ite (and (= a0 Model_1_pos) ) Epoch!val!2
	(ite (and (= a0 Model_11_pos) ) Epoch!val!0
	(ite (and (= a0 Model_26_ice) ) Epoch!val!2
	(ite (and (= a0 Model_27_ice) ) Epoch!val!1
	(ite (and (= a0 Model_28_ice) ) Epoch!val!3
	(ite (and (= a0 Model_29_ice) ) Epoch!val!2
	(ite (and (= a0 Model_30_ice) ) Epoch!val!2
	(ite (and (= a0 Model_31_ice) ) Epoch!val!3
	(ite (and (= a0 Model_32_ice) ) Epoch!val!2
	(ite (and (= a0 Model_33_ice) ) Epoch!val!4
	(ite (and (= a0 Model_34_ice) ) Epoch!val!3
	(ite (and (= a0 Model_35_ice) ) Epoch!val!1
	(ite (and (= a0 Model_36_ice) ) Epoch!val!3
	(ite (and (= a0 Model_37_ice) ) Epoch!val!2
	(ite (and (= a0 Model_38_ice) ) Epoch!val!2
	(ite (and (= a0 Model_39_ice) ) Epoch!val!4
	(ite (and (= a0 Model_40_ice) ) Epoch!val!3
	(ite (and (= a0 Model_41_ice) ) Epoch!val!0
	(ite (and (= a0 Model_42_ice) ) Epoch!val!0
	(ite (and (= a0 Model_43_ice) ) Epoch!val!3
	(ite (and (= a0 Model_44_ice) ) Epoch!val!2
	(ite (and (= a0 Model_45_ice) ) Epoch!val!1
	(ite (and (= a0 Model_46_ice) ) Epoch!val!0
	(zero_dummy a0 )))))))))))))))))))))))))
)
(declare-fun one_dummy (ModelId) Epoch)
(define-fun one ((a0 ModelId)) Epoch
    	(ite (and (= a0 Model_0_pos) ) Epoch!val!1
	(ite (and (= a0 Model_1_pos) ) Epoch!val!1
	(ite (and (= a0 Model_11_pos) ) Epoch!val!2
	(ite (and (= a0 Model_26_ice) ) Epoch!val!3
	(ite (and (= a0 Model_27_ice) ) Epoch!val!2
	(ite (and (= a0 Model_28_ice) ) Epoch!val!2
	(ite (and (= a0 Model_29_ice) ) Epoch!val!1
	(ite (and (= a0 Model_30_ice) ) Epoch!val!1
	(ite (and (= a0 Model_31_ice) ) Epoch!val!2
	(ite (and (= a0 Model_32_ice) ) Epoch!val!1
	(ite (and (= a0 Model_33_ice) ) Epoch!val!3
	(ite (and (= a0 Model_34_ice) ) Epoch!val!4
	(ite (and (= a0 Model_35_ice) ) Epoch!val!0
	(ite (and (= a0 Model_36_ice) ) Epoch!val!2
	(ite (and (= a0 Model_37_ice) ) Epoch!val!1
	(ite (and (= a0 Model_38_ice) ) Epoch!val!1
	(ite (and (= a0 Model_39_ice) ) Epoch!val!3
	(ite (and (= a0 Model_40_ice) ) Epoch!val!2
	(ite (and (= a0 Model_41_ice) ) Epoch!val!1
	(ite (and (= a0 Model_42_ice) ) Epoch!val!1
	(ite (and (= a0 Model_43_ice) ) Epoch!val!2
	(ite (and (= a0 Model_44_ice) ) Epoch!val!1
	(ite (and (= a0 Model_45_ice) ) Epoch!val!0
	(ite (and (= a0 Model_46_ice) ) Epoch!val!1
	(one_dummy a0 )))))))))))))))))))))))))
)
(declare-fun first_dummy (ModelId) Node)
(define-fun first ((a0 ModelId)) Node
    	(ite (and (= a0 Model_0_pos) ) Node!val!0
	(ite (and (= a0 Model_1_pos) ) Node!val!1
	(ite (and (= a0 Model_11_pos) ) Node!val!2
	(ite (and (= a0 Model_26_ice) ) Node!val!0
	(ite (and (= a0 Model_27_ice) ) Node!val!0
	(ite (and (= a0 Model_28_ice) ) Node!val!0
	(ite (and (= a0 Model_29_ice) ) Node!val!0
	(ite (and (= a0 Model_30_ice) ) Node!val!0
	(ite (and (= a0 Model_31_ice) ) Node!val!0
	(ite (and (= a0 Model_32_ice) ) Node!val!0
	(ite (and (= a0 Model_33_ice) ) Node!val!0
	(ite (and (= a0 Model_34_ice) ) Node!val!0
	(ite (and (= a0 Model_35_ice) ) Node!val!0
	(ite (and (= a0 Model_36_ice) ) Node!val!0
	(ite (and (= a0 Model_37_ice) ) Node!val!0
	(ite (and (= a0 Model_38_ice) ) Node!val!0
	(ite (and (= a0 Model_39_ice) ) Node!val!0
	(ite (and (= a0 Model_40_ice) ) Node!val!0
	(ite (and (= a0 Model_41_ice) ) Node!val!0
	(ite (and (= a0 Model_42_ice) ) Node!val!0
	(ite (and (= a0 Model_43_ice) ) Node!val!0
	(ite (and (= a0 Model_44_ice) ) Node!val!0
	(ite (and (= a0 Model_45_ice) ) Node!val!0
	(ite (and (= a0 Model_46_ice) ) Node!val!0
	(first_dummy a0 )))))))))))))))))))))))))
)

(synth-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool 
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool 
            (
                (held m s Node_)
                (locked m s Epoch_ Node_)
                (transfer m s Epoch_ Node_)
                (le m Epoch_ Epoch_)

                (= Node_ Node_)
                (= Epoch_ Epoch_)

                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)     
            )
        )

        (Node_ Node
            (
                n1
n2
            )
        )

        (Epoch_ Epoch
            (
                
                (ep m s Node_)
            )
        )
    
    )
)

; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(False)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!1
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_0_pos init Node!val!0 Node!val!0)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; (forall ((n1 Node)) (held Model_1_pos init n1))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_1_pos, init, Node_1) ==
;                    (Node_1 == first(Model_1_pos)),
;                    Implies(Node_1 != first(Model_1_pos),
;                            ep(Model_1_pos, init, Node_1) ==
;                            zero(Model_1_pos)),
;                    ep(Model_1_pos, init, first(Model_1_pos)) ==
;                    one(Model_1_pos),
;                    transfer(Model_1_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_1_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_1_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_1_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_1_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_1_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_1_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_1_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_1_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_1_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_1_pos,
;                              zero(Model_1_pos),
;                              Epoch_1),
;                           one(Model_1_pos) !=
;                           zero(Model_1_pos))))),
;  Not(ForAll(n1, held(Model_1_pos, init, n1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun Model_1_pos () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (not (= x!2 Node!val!1)))
;        Epoch!val!2
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;             Epoch!val!1
;             Epoch!val!0)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_1_pos init Node!val!0 Node!val!0)
     (inv Model_1_pos init Node!val!0 Node!val!1)
     (inv Model_1_pos init Node!val!1 Node!val!0)
     (inv Model_1_pos init Node!val!1 Node!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (= (ep Model_11_pos init n1) (ep Model_11_pos init n2))) (= n2 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_11_pos, init, Node_1) ==
;                    (Node_1 == first(Model_11_pos)),
;                    Implies(Node_1 != first(Model_11_pos),
;                            ep(Model_11_pos, init, Node_1) ==
;                            zero(Model_11_pos)),
;                    ep(Model_11_pos,
;                       init,
;                       first(Model_11_pos)) ==
;                    one(Model_11_pos),
;                    transfer(Model_11_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_11_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_11_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_11_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_11_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_11_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_11_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_11_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_11_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_11_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_11_pos,
;                              zero(Model_11_pos),
;                              Epoch_1),
;                           one(Model_11_pos) !=
;                           zero(Model_11_pos))))),
;  Not(ForAll([n1, n2],
;             Or(Not(ep(Model_11_pos, init, n1) ==
;                    ep(Model_11_pos, init, n2)),
;                n2 == n1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_11_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!0))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!0)
;                       (not (= x!2 Node!val!2))))))
;     (ite a!1 Epoch!val!0 Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!2)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (and (inv Model_11_pos init Node!val!0 Node!val!0)
     (inv Model_11_pos init Node!val!0 Node!val!1)
     (inv Model_11_pos init Node!val!0 Node!val!2)
     (inv Model_11_pos init Node!val!1 Node!val!0)
     (inv Model_11_pos init Node!val!1 Node!val!1)
     (inv Model_11_pos init Node!val!1 Node!val!2)
     (inv Model_11_pos init Node!val!2 Node!val!0)
     (inv Model_11_pos init Node!val!2 Node!val!1)
     (inv Model_11_pos init Node!val!2 Node!val!2)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (transfer Model_26_ice S1 e1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_26_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_26_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_26_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_26_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_26_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_26_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_26_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_26_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_26_ice,
;                              zero(Model_26_ice),
;                              Epoch_1),
;                           one(Model_26_ice) !=
;                           zero(Model_26_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S1, e1, n1)),
;                transfer(Model_26_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S1, e1, n1)),
;                transfer(Model_26_ice,
;                         S1,
;                         ep(Model_26_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, e1], Not(transfer(Model_26_ice, S1, e1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S2, e1, n1)),
;                transfer(Model_26_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S2, e1, n1)),
;                transfer(Model_26_ice,
;                         S2,
;                         ep(Model_26_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, e1],
;             Not(transfer(Model_26_ice, S2, e1, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_26_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_26_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_26_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_26_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_26_ice, S1, Node_1),
;                               Not(le(Model_26_ice,
;                                      Epoch_1,
;                                      ep(Model_26_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_26_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_26_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_26_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_26_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_26_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_26_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_26_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_26_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_26_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!3))
;        (= x!3 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_26_ice S1 Node!val!0 Node!val!0)
                (inv Model_26_ice S1 Node!val!0 Node!val!1)
                (inv Model_26_ice S1 Node!val!1 Node!val!0)
                (inv Model_26_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_26_ice S2 Node!val!0 Node!val!0)
           (inv Model_26_ice S2 Node!val!0 Node!val!1)
           (inv Model_26_ice S2 Node!val!1 Node!val!0)
           (inv Model_26_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (locked Model_27_ice S1 e1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_27_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_27_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_27_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_27_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_27_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_27_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_27_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_27_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_27_ice,
;                              zero(Model_27_ice),
;                              Epoch_1),
;                           one(Model_27_ice) !=
;                           zero(Model_27_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S1, e1, n1)),
;                transfer(Model_27_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S1, e1, n1)),
;                transfer(Model_27_ice,
;                         S1,
;                         ep(Model_27_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, e1], Not(locked(Model_27_ice, S1, e1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S2, e1, n1)),
;                transfer(Model_27_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S2, e1, n1)),
;                transfer(Model_27_ice,
;                         S2,
;                         ep(Model_27_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, e1], Not(locked(Model_27_ice, S2, e1, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_27_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_27_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_27_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_27_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_27_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_27_ice,
;                               Epoch_1,
;                               ep(Model_27_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_27_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_27_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_27_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_27_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_27_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_27_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_27_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_27_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_27_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!3
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;             Epoch!val!0
;             Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_27_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_27_ice S1 Node!val!0 Node!val!0))
         (inv Model_27_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (locked Model_28_ice S1 e1 n1)) (held Model_28_ice S1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_28_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_28_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_28_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_28_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_28_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_28_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_28_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_28_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_28_ice,
;                              zero(Model_28_ice),
;                              Epoch_1),
;                           one(Model_28_ice) !=
;                           zero(Model_28_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S1, e1, n1)),
;                transfer(Model_28_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S1, e1, n1)),
;                transfer(Model_28_ice,
;                         S1,
;                         ep(Model_28_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, e1],
;         Or(Not(locked(Model_28_ice, S1, e1, n1)),
;            held(Model_28_ice, S1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S2, e1, n1)),
;                transfer(Model_28_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S2, e1, n1)),
;                transfer(Model_28_ice,
;                         S2,
;                         ep(Model_28_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S2, e1, n1)),
;                held(Model_28_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_28_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_28_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_28_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_28_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_28_ice, S1, Node_1),
;                               Not(le(Model_28_ice,
;                                      Epoch_1,
;                                      ep(Model_28_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_28_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_28_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_28_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_28_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_28_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_28_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_28_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_28_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_28_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
;        Epoch!val!1
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (or (not (and (inv Model_28_ice S1 Node!val!0 Node!val!0)))
    (and (and (inv Model_28_ice S1 Node!val!0 Node!val!0))
         (inv Model_28_ice S2 Node!val!0 Node!val!0))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (not (locked Model_29_ice S1 e1 n1)) (= n2 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_29_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_29_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_29_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_29_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_29_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_29_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_29_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_29_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_29_ice,
;                              zero(Model_29_ice),
;                              Epoch_1),
;                           one(Model_29_ice) !=
;                           zero(Model_29_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S1, e1, n1)),
;                transfer(Model_29_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S1, e1, n1)),
;                transfer(Model_29_ice,
;                         S1,
;                         ep(Model_29_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2, e1],
;         Or(Not(locked(Model_29_ice, S1, e1, n1)), n2 == n1)),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S2, e1, n1)),
;                transfer(Model_29_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S2, e1, n1)),
;                transfer(Model_29_ice,
;                         S2,
;                         ep(Model_29_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2, e1],
;             Or(Not(locked(Model_29_ice, S2, e1, n1)),
;                n2 == n1))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_29_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_29_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_29_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_29_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_29_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_29_ice,
;                               Epoch_1,
;                               ep(Model_29_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_29_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_29_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_29_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_29_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_29_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_29_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_29_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_29_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_29_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!0
;     Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_29_ice S1 Node!val!0 Node!val!0)
                (inv Model_29_ice S1 Node!val!0 Node!val!1)
                (inv Model_29_ice S1 Node!val!1 Node!val!0)
                (inv Model_29_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_29_ice S2 Node!val!0 Node!val!0)
           (inv Model_29_ice S2 Node!val!0 Node!val!1)
           (inv Model_29_ice S2 Node!val!1 Node!val!0)
           (inv Model_29_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node))
;   (or (not (transfer Model_30_ice S1 (ep Model_30_ice S1 n1) n1))
;       (locked Model_30_ice S1 (ep Model_30_ice S1 n1) n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_30_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_30_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_30_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_30_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_30_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_30_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_30_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_30_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_30_ice,
;                              zero(Model_30_ice),
;                              Epoch_1),
;                           one(Model_30_ice) !=
;                           zero(Model_30_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S1, e1, n1)),
;                transfer(Model_30_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S1, e1, n1)),
;                transfer(Model_30_ice,
;                         S1,
;                         ep(Model_30_ice, S1, n1),
;                         n1)))),
;  ForAll(n1,
;         Or(Not(transfer(Model_30_ice,
;                         S1,
;                         ep(Model_30_ice, S1, n1),
;                         n1)),
;            locked(Model_30_ice,
;                   S1,
;                   ep(Model_30_ice, S1, n1),
;                   n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S2, e1, n1)),
;                transfer(Model_30_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S2, e1, n1)),
;                transfer(Model_30_ice,
;                         S2,
;                         ep(Model_30_ice, S2, n1),
;                         n1)))),
;  Not(ForAll(n1,
;             Or(Not(transfer(Model_30_ice,
;                             S2,
;                             ep(Model_30_ice, S2, n1),
;                             n1)),
;                locked(Model_30_ice,
;                       S2,
;                       ep(Model_30_ice, S2, n1),
;                       n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_30_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_30_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_30_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_30_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_30_ice, S1, Node_1),
;                               Not(le(Model_30_ice,
;                                      Epoch_1,
;                                      ep(Model_30_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_30_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_30_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_30_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_30_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_30_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_30_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_30_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_30_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_30_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!0 Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (= x!3 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_30_ice S1 Node!val!0 Node!val!0)
                (inv Model_30_ice S1 Node!val!0 Node!val!1)
                (inv Model_30_ice S1 Node!val!1 Node!val!0)
                (inv Model_30_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_30_ice S2 Node!val!0 Node!val!0)
           (inv Model_30_ice S2 Node!val!0 Node!val!1)
           (inv Model_30_ice S2 Node!val!1 Node!val!0)
           (inv Model_30_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (= n2 n1) (not (held Model_31_ice S1 n2)) (not (held Model_31_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_31_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_31_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_31_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_31_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_31_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_31_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_31_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_31_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_31_ice,
;                              zero(Model_31_ice),
;                              Epoch_1),
;                           one(Model_31_ice) !=
;                           zero(Model_31_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S1, e1, n1)),
;                transfer(Model_31_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S1, e1, n1)),
;                transfer(Model_31_ice,
;                         S1,
;                         ep(Model_31_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(n2 == n1,
;            Not(held(Model_31_ice, S1, n2)),
;            Not(held(Model_31_ice, S1, n1)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S2, e1, n1)),
;                transfer(Model_31_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S2, e1, n1)),
;                transfer(Model_31_ice,
;                         S2,
;                         ep(Model_31_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(n2 == n1,
;                Not(held(Model_31_ice, S2, n2)),
;                Not(held(Model_31_ice, S2, n1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_31_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_31_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_31_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_31_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_31_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_31_ice,
;                               Epoch_1,
;                               ep(Model_31_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_31_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_31_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_31_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_31_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_31_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_31_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_31_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_31_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_31_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!1
;     Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!3))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_31_ice S1 Node!val!0 Node!val!0)
                (inv Model_31_ice S1 Node!val!0 Node!val!1)
                (inv Model_31_ice S1 Node!val!1 Node!val!0)
                (inv Model_31_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_31_ice S2 Node!val!0 Node!val!0)
           (inv Model_31_ice S2 Node!val!0 Node!val!1)
           (inv Model_31_ice S2 Node!val!1 Node!val!0)
           (inv Model_31_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (= n1 n2)
;       (= n2 n1)
;       (not (transfer Model_32_ice S1 (ep Model_32_ice S1 n2) n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_32_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_32_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_32_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_32_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_32_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_32_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_32_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_32_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_32_ice,
;                              zero(Model_32_ice),
;                              Epoch_1),
;                           one(Model_32_ice) !=
;                           zero(Model_32_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S1, e1, n1)),
;                transfer(Model_32_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S1, e1, n1)),
;                transfer(Model_32_ice,
;                         S1,
;                         ep(Model_32_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(n1 == n2,
;            n2 == n1,
;            Not(transfer(Model_32_ice,
;                         S1,
;                         ep(Model_32_ice, S1, n2),
;                         n1)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S2, e1, n1)),
;                transfer(Model_32_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S2, e1, n1)),
;                transfer(Model_32_ice,
;                         S2,
;                         ep(Model_32_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(n1 == n2,
;                n2 == n1,
;                Not(transfer(Model_32_ice,
;                             S2,
;                             ep(Model_32_ice, S2, n2),
;                             n1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_32_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_32_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_32_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_32_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_32_ice, S1, Node_1),
;                               Not(le(Model_32_ice,
;                                      Epoch_1,
;                                      ep(Model_32_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_32_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_32_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_32_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_32_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_32_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_32_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_32_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_32_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_32_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   Epoch!val!1)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (= x!2 Node!val!1)
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!0
;                   a!1)))
;   (let ((a!3 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   a!2)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (= x!2 Node!val!1)
;               (not (= x!2 Node!val!2)))
;          Epoch!val!0
;          a!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_32_ice S1 Node!val!0 Node!val!0)
                (inv Model_32_ice S1 Node!val!0 Node!val!1)
                (inv Model_32_ice S1 Node!val!0 Node!val!2)
                (inv Model_32_ice S1 Node!val!1 Node!val!0)
                (inv Model_32_ice S1 Node!val!1 Node!val!1)
                (inv Model_32_ice S1 Node!val!1 Node!val!2)
                (inv Model_32_ice S1 Node!val!2 Node!val!0)
                (inv Model_32_ice S1 Node!val!2 Node!val!1)
                (inv Model_32_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_32_ice S2 Node!val!0 Node!val!0)
           (inv Model_32_ice S2 Node!val!0 Node!val!1)
           (inv Model_32_ice S2 Node!val!0 Node!val!2)
           (inv Model_32_ice S2 Node!val!1 Node!val!0)
           (inv Model_32_ice S2 Node!val!1 Node!val!1)
           (inv Model_32_ice S2 Node!val!1 Node!val!2)
           (inv Model_32_ice S2 Node!val!2 Node!val!0)
           (inv Model_32_ice S2 Node!val!2 Node!val!1)
           (inv Model_32_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (held Model_33_ice S1 n1)
;       (le Model_33_ice (ep Model_33_ice S1 n1) (ep Model_33_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_33_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_33_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_33_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_33_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_33_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_33_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_33_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_33_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_33_ice,
;                              zero(Model_33_ice),
;                              Epoch_1),
;                           one(Model_33_ice) !=
;                           zero(Model_33_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_33_ice, S1, e1, n1)),
;                transfer(Model_33_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_33_ice, S1, e1, n1)),
;                transfer(Model_33_ice,
;                         S1,
;                         ep(Model_33_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(held(Model_33_ice, S1, n1),
;            le(Model_33_ice,
;               ep(Model_33_ice, S1, n1),
;               ep(Model_33_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_33_ice, S2, e1, n1)),
;                transfer(Model_33_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_33_ice, S2, e1, n1)),
;                transfer(Model_33_ice,
;                         S2,
;                         ep(Model_33_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(le(Model_33_ice,
;                   ep(Model_33_ice, S2, n1),
;                   ep(Model_33_ice, S2, n2)),
;                held(Model_33_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_33_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_33_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_33_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_33_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_33_ice, S1, Node_1),
;                               Not(le(Model_33_ice,
;                                      Epoch_1,
;                                      ep(Model_33_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_33_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_33_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_33_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_33_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_33_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_33_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_33_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_33_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_33_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2))))))
;     (ite a!1 Epoch!val!1 Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!4))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_33_ice S1 Node!val!0 Node!val!0)
                (inv Model_33_ice S1 Node!val!0 Node!val!1)
                (inv Model_33_ice S1 Node!val!0 Node!val!2)
                (inv Model_33_ice S1 Node!val!1 Node!val!0)
                (inv Model_33_ice S1 Node!val!1 Node!val!1)
                (inv Model_33_ice S1 Node!val!1 Node!val!2)
                (inv Model_33_ice S1 Node!val!2 Node!val!0)
                (inv Model_33_ice S1 Node!val!2 Node!val!1)
                (inv Model_33_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_33_ice S2 Node!val!0 Node!val!0)
           (inv Model_33_ice S2 Node!val!0 Node!val!1)
           (inv Model_33_ice S2 Node!val!0 Node!val!2)
           (inv Model_33_ice S2 Node!val!1 Node!val!0)
           (inv Model_33_ice S2 Node!val!1 Node!val!1)
           (inv Model_33_ice S2 Node!val!1 Node!val!2)
           (inv Model_33_ice S2 Node!val!2 Node!val!0)
           (inv Model_33_ice S2 Node!val!2 Node!val!1)
           (inv Model_33_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (and (held Model_34_ice S1 n2) (held Model_34_ice S1 n1)))
;       (= (ep Model_34_ice S1 n2) (ep Model_34_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_34_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_34_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_34_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_34_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_34_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_34_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_34_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_34_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_34_ice,
;                              zero(Model_34_ice),
;                              Epoch_1),
;                           one(Model_34_ice) !=
;                           zero(Model_34_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S1, e1, n1)),
;                transfer(Model_34_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S1, e1, n1)),
;                transfer(Model_34_ice,
;                         S1,
;                         ep(Model_34_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(And(held(Model_34_ice, S1, n2),
;                    held(Model_34_ice, S1, n1))),
;            ep(Model_34_ice, S1, n2) ==
;            ep(Model_34_ice, S1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S2, e1, n1)),
;                transfer(Model_34_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S2, e1, n1)),
;                transfer(Model_34_ice,
;                         S2,
;                         ep(Model_34_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(And(held(Model_34_ice, S2, n2),
;                        held(Model_34_ice, S2, n1))),
;                ep(Model_34_ice, S2, n2) ==
;                ep(Model_34_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_34_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_34_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_34_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_34_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_34_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_34_ice,
;                               Epoch_1,
;                               ep(Model_34_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_34_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_34_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_34_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_34_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_34_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_34_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_34_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_34_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_34_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1 Epoch!val!1 Epoch!val!0))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!4))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_34_ice S1 Node!val!0 Node!val!0)
                (inv Model_34_ice S1 Node!val!0 Node!val!1)
                (inv Model_34_ice S1 Node!val!1 Node!val!0)
                (inv Model_34_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_34_ice S2 Node!val!0 Node!val!0)
           (inv Model_34_ice S2 Node!val!0 Node!val!1)
           (inv Model_34_ice S2 Node!val!1 Node!val!0)
           (inv Model_34_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (held Model_35_ice S1 n2)
;       (not (le Model_35_ice (ep Model_35_ice S1 n1) (ep Model_35_ice S1 n2)))
;       (not (held Model_35_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_35_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_35_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_35_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_35_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_35_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_35_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_35_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_35_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_35_ice,
;                              zero(Model_35_ice),
;                              Epoch_1),
;                           one(Model_35_ice) !=
;                           zero(Model_35_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S1, e1, n1)),
;                transfer(Model_35_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S1, e1, n1)),
;                transfer(Model_35_ice,
;                         S1,
;                         ep(Model_35_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(held(Model_35_ice, S1, n2),
;            Not(le(Model_35_ice,
;                   ep(Model_35_ice, S1, n1),
;                   ep(Model_35_ice, S1, n2))),
;            Not(held(Model_35_ice, S1, n1)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S2, e1, n1)),
;                transfer(Model_35_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S2, e1, n1)),
;                transfer(Model_35_ice,
;                         S2,
;                         ep(Model_35_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(le(Model_35_ice,
;                       ep(Model_35_ice, S2, n1),
;                       ep(Model_35_ice, S2, n2))),
;                Not(held(Model_35_ice, S2, n1)),
;                held(Model_35_ice, S2, n2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_35_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_35_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_35_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_35_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_35_ice, S1, Node_1),
;                               Not(le(Model_35_ice,
;                                      Epoch_1,
;                                      ep(Model_35_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_35_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_35_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_35_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_35_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_35_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_35_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_35_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_35_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!5 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_35_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))
;                       (not (= x!2 Node!val!2))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!2))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!2)))
;          Epoch!val!5
;          (ite a!1 Epoch!val!4 Epoch!val!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!5)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!5))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_35_ice S1 Node!val!0 Node!val!0)
                (inv Model_35_ice S1 Node!val!0 Node!val!1)
                (inv Model_35_ice S1 Node!val!0 Node!val!2)
                (inv Model_35_ice S1 Node!val!1 Node!val!0)
                (inv Model_35_ice S1 Node!val!1 Node!val!1)
                (inv Model_35_ice S1 Node!val!1 Node!val!2)
                (inv Model_35_ice S1 Node!val!2 Node!val!0)
                (inv Model_35_ice S1 Node!val!2 Node!val!1)
                (inv Model_35_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_35_ice S2 Node!val!0 Node!val!0)
           (inv Model_35_ice S2 Node!val!0 Node!val!1)
           (inv Model_35_ice S2 Node!val!0 Node!val!2)
           (inv Model_35_ice S2 Node!val!1 Node!val!0)
           (inv Model_35_ice S2 Node!val!1 Node!val!1)
           (inv Model_35_ice S2 Node!val!1 Node!val!2)
           (inv Model_35_ice S2 Node!val!2 Node!val!0)
           (inv Model_35_ice S2 Node!val!2 Node!val!1)
           (inv Model_35_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (= (ep Model_36_ice S1 n1) (ep Model_36_ice S1 n2)))
;       (not (held Model_36_ice S1 n2))
;       (held Model_36_ice S1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_36_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_36_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_36_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_36_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_36_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_36_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_36_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_36_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_36_ice,
;                              zero(Model_36_ice),
;                              Epoch_1),
;                           one(Model_36_ice) !=
;                           zero(Model_36_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S1, e1, n1)),
;                transfer(Model_36_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S1, e1, n1)),
;                transfer(Model_36_ice,
;                         S1,
;                         ep(Model_36_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(ep(Model_36_ice, S1, n1) ==
;                ep(Model_36_ice, S1, n2)),
;            Not(held(Model_36_ice, S1, n2)),
;            held(Model_36_ice, S1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S2, e1, n1)),
;                transfer(Model_36_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S2, e1, n1)),
;                transfer(Model_36_ice,
;                         S2,
;                         ep(Model_36_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(held(Model_36_ice, S2, n1),
;                Not(ep(Model_36_ice, S2, n1) ==
;                    ep(Model_36_ice, S2, n2)),
;                Not(held(Model_36_ice, S2, n2))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_36_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_36_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_36_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_36_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_36_ice, S1, Node_1),
;                               Not(le(Model_36_ice,
;                                      Epoch_1,
;                                      ep(Model_36_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_36_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_36_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_36_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_36_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_36_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_36_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_36_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_36_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_36_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!0 Epoch!val!1)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!2))
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!2))
;            (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!1)
;        (not (= x!2 Epoch!val!3))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_36_ice S1 Node!val!0 Node!val!0)
                (inv Model_36_ice S1 Node!val!0 Node!val!1)
                (inv Model_36_ice S1 Node!val!0 Node!val!2)
                (inv Model_36_ice S1 Node!val!1 Node!val!0)
                (inv Model_36_ice S1 Node!val!1 Node!val!1)
                (inv Model_36_ice S1 Node!val!1 Node!val!2)
                (inv Model_36_ice S1 Node!val!2 Node!val!0)
                (inv Model_36_ice S1 Node!val!2 Node!val!1)
                (inv Model_36_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_36_ice S2 Node!val!0 Node!val!0)
           (inv Model_36_ice S2 Node!val!0 Node!val!1)
           (inv Model_36_ice S2 Node!val!0 Node!val!2)
           (inv Model_36_ice S2 Node!val!1 Node!val!0)
           (inv Model_36_ice S2 Node!val!1 Node!val!1)
           (inv Model_36_ice S2 Node!val!1 Node!val!2)
           (inv Model_36_ice S2 Node!val!2 Node!val!0)
           (inv Model_36_ice S2 Node!val!2 Node!val!1)
           (inv Model_36_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (= n2 n1)
;       (not (held Model_37_ice S1 n1))
;       (not (transfer Model_37_ice S1 (ep Model_37_ice S1 n1) n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_37_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_37_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_37_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_37_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_37_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_37_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_37_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_37_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_37_ice,
;                              zero(Model_37_ice),
;                              Epoch_1),
;                           one(Model_37_ice) !=
;                           zero(Model_37_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S1, e1, n1)),
;                transfer(Model_37_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S1, e1, n1)),
;                transfer(Model_37_ice,
;                         S1,
;                         ep(Model_37_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(n2 == n1,
;            Not(held(Model_37_ice, S1, n1)),
;            Not(transfer(Model_37_ice,
;                         S1,
;                         ep(Model_37_ice, S1, n1),
;                         n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S2, e1, n1)),
;                transfer(Model_37_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S2, e1, n1)),
;                transfer(Model_37_ice,
;                         S2,
;                         ep(Model_37_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(n2 == n1,
;                Not(transfer(Model_37_ice,
;                             S2,
;                             ep(Model_37_ice, S2, n1),
;                             n2)),
;                Not(held(Model_37_ice, S2, n1))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_37_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_37_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_37_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_37_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_37_ice, S1, Node_1),
;                               Not(le(Model_37_ice,
;                                      Epoch_1,
;                                      ep(Model_37_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_37_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_37_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_37_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_37_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_37_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_37_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_37_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_37_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_37_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   Epoch!val!1)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (= x!2 Node!val!1)
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!0
;                   a!1)))
;   (let ((a!3 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!3
;                   a!2)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (= x!2 Node!val!1)
;               (not (= x!2 Node!val!2)))
;          Epoch!val!0
;          a!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_37_ice S1 Node!val!0 Node!val!0)
                (inv Model_37_ice S1 Node!val!0 Node!val!1)
                (inv Model_37_ice S1 Node!val!0 Node!val!2)
                (inv Model_37_ice S1 Node!val!1 Node!val!0)
                (inv Model_37_ice S1 Node!val!1 Node!val!1)
                (inv Model_37_ice S1 Node!val!1 Node!val!2)
                (inv Model_37_ice S1 Node!val!2 Node!val!0)
                (inv Model_37_ice S1 Node!val!2 Node!val!1)
                (inv Model_37_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_37_ice S2 Node!val!0 Node!val!0)
           (inv Model_37_ice S2 Node!val!0 Node!val!1)
           (inv Model_37_ice S2 Node!val!0 Node!val!2)
           (inv Model_37_ice S2 Node!val!1 Node!val!0)
           (inv Model_37_ice S2 Node!val!1 Node!val!1)
           (inv Model_37_ice S2 Node!val!1 Node!val!2)
           (inv Model_37_ice S2 Node!val!2 Node!val!0)
           (inv Model_37_ice S2 Node!val!2 Node!val!1)
           (inv Model_37_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (held Model_38_ice S1 n1)
;       (not (transfer Model_38_ice S1 (ep Model_38_ice S1 n1) n2))
;       (not (held Model_38_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_38_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_38_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_38_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_38_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_38_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_38_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_38_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_38_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_38_ice,
;                              zero(Model_38_ice),
;                              Epoch_1),
;                           one(Model_38_ice) !=
;                           zero(Model_38_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S1, e1, n1)),
;                transfer(Model_38_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S1, e1, n1)),
;                transfer(Model_38_ice,
;                         S1,
;                         ep(Model_38_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(held(Model_38_ice, S1, n1),
;            Not(transfer(Model_38_ice,
;                         S1,
;                         ep(Model_38_ice, S1, n1),
;                         n2)),
;            Not(held(Model_38_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S2, e1, n1)),
;                transfer(Model_38_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S2, e1, n1)),
;                transfer(Model_38_ice,
;                         S2,
;                         ep(Model_38_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(held(Model_38_ice, S2, n2)),
;                Not(transfer(Model_38_ice,
;                             S2,
;                             ep(Model_38_ice, S2, n1),
;                             n2)),
;                held(Model_38_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_38_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_38_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_38_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_38_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_38_ice, S1, Node_1),
;                               Not(le(Model_38_ice,
;                                      Epoch_1,
;                                      ep(Model_38_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_38_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_38_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_38_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_38_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_38_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_38_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_38_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_38_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_38_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!0
;     (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!2))
;                          (not (= x!2 Node!val!1)))
;                     Epoch!val!3
;                     Epoch!val!1)))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!2))
;                 (not (= x!2 Node!val!1)))
;            Epoch!val!3
;            (ite (and (= x!0 ModelId!val!0)
;                      (= x!1 StateId!val!1)
;                      (= x!2 Node!val!1))
;                 Epoch!val!0
;                 a!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Node!val!2)
;            (not (= x!2 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!2)
;            (not (= x!2 Node!val!1)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_38_ice S1 Node!val!0 Node!val!0)
                (inv Model_38_ice S1 Node!val!0 Node!val!1)
                (inv Model_38_ice S1 Node!val!0 Node!val!2)
                (inv Model_38_ice S1 Node!val!1 Node!val!0)
                (inv Model_38_ice S1 Node!val!1 Node!val!1)
                (inv Model_38_ice S1 Node!val!1 Node!val!2)
                (inv Model_38_ice S1 Node!val!2 Node!val!0)
                (inv Model_38_ice S1 Node!val!2 Node!val!1)
                (inv Model_38_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_38_ice S2 Node!val!0 Node!val!0)
           (inv Model_38_ice S2 Node!val!0 Node!val!1)
           (inv Model_38_ice S2 Node!val!0 Node!val!2)
           (inv Model_38_ice S2 Node!val!1 Node!val!0)
           (inv Model_38_ice S2 Node!val!1 Node!val!1)
           (inv Model_38_ice S2 Node!val!1 Node!val!2)
           (inv Model_38_ice S2 Node!val!2 Node!val!0)
           (inv Model_38_ice S2 Node!val!2 Node!val!1)
           (inv Model_38_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (locked Model_39_ice S1 (ep Model_39_ice S1 n2) n1))
;       (held Model_39_ice S1 n1)
;       (not (held Model_39_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_39_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_39_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_39_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_39_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_39_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_39_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_39_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_39_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_39_ice,
;                              zero(Model_39_ice),
;                              Epoch_1),
;                           one(Model_39_ice) !=
;                           zero(Model_39_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_39_ice, S1, e1, n1)),
;                transfer(Model_39_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_39_ice, S1, e1, n1)),
;                transfer(Model_39_ice,
;                         S1,
;                         ep(Model_39_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(locked(Model_39_ice,
;                       S1,
;                       ep(Model_39_ice, S1, n2),
;                       n1)),
;            held(Model_39_ice, S1, n1),
;            Not(held(Model_39_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_39_ice, S2, e1, n1)),
;                transfer(Model_39_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_39_ice, S2, e1, n1)),
;                transfer(Model_39_ice,
;                         S2,
;                         ep(Model_39_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(held(Model_39_ice, S2, n2)),
;                Not(locked(Model_39_ice,
;                           S2,
;                           ep(Model_39_ice, S2, n2),
;                           n1)),
;                held(Model_39_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_39_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_39_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_39_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_39_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_39_ice, S1, Node_1),
;                               Not(le(Model_39_ice,
;                                      Epoch_1,
;                                      ep(Model_39_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_39_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_39_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_39_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_39_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_39_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_39_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_39_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_39_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_39_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2))))))
;     (ite a!1 Epoch!val!1 Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_39_ice S1 Node!val!0 Node!val!0)
                (inv Model_39_ice S1 Node!val!0 Node!val!1)
                (inv Model_39_ice S1 Node!val!0 Node!val!2)
                (inv Model_39_ice S1 Node!val!1 Node!val!0)
                (inv Model_39_ice S1 Node!val!1 Node!val!1)
                (inv Model_39_ice S1 Node!val!1 Node!val!2)
                (inv Model_39_ice S1 Node!val!2 Node!val!0)
                (inv Model_39_ice S1 Node!val!2 Node!val!1)
                (inv Model_39_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_39_ice S2 Node!val!0 Node!val!0)
           (inv Model_39_ice S2 Node!val!0 Node!val!1)
           (inv Model_39_ice S2 Node!val!0 Node!val!2)
           (inv Model_39_ice S2 Node!val!1 Node!val!0)
           (inv Model_39_ice S2 Node!val!1 Node!val!1)
           (inv Model_39_ice S2 Node!val!1 Node!val!2)
           (inv Model_39_ice S2 Node!val!2 Node!val!0)
           (inv Model_39_ice S2 Node!val!2 Node!val!1)
           (inv Model_39_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (held Model_40_ice S1 n1)
;       (not (held Model_40_ice S1 n2))
;       (not (locked Model_40_ice S1 (ep Model_40_ice S1 n1) n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_40_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_40_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_40_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_40_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_40_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_40_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_40_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_40_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_40_ice,
;                              zero(Model_40_ice),
;                              Epoch_1),
;                           one(Model_40_ice) !=
;                           zero(Model_40_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_40_ice, S1, e1, n1)),
;                transfer(Model_40_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_40_ice, S1, e1, n1)),
;                transfer(Model_40_ice,
;                         S1,
;                         ep(Model_40_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(held(Model_40_ice, S1, n1),
;            Not(held(Model_40_ice, S1, n2)),
;            Not(locked(Model_40_ice,
;                       S1,
;                       ep(Model_40_ice, S1, n1),
;                       n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_40_ice, S2, e1, n1)),
;                transfer(Model_40_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_40_ice, S2, e1, n1)),
;                transfer(Model_40_ice,
;                         S2,
;                         ep(Model_40_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(held(Model_40_ice, S2, n2)),
;                Not(locked(Model_40_ice,
;                           S2,
;                           ep(Model_40_ice, S2, n1),
;                           n2)),
;                held(Model_40_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_40_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_40_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_40_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_40_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_40_ice, S1, Node_1),
;                               Not(le(Model_40_ice,
;                                      Epoch_1,
;                                      ep(Model_40_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_40_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_40_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_40_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_40_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_40_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_40_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_40_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_40_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_40_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!4
;                   Epoch!val!2)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (= x!2 Node!val!1)
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!1
;                   a!1)))
;   (let ((a!3 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!1)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!4
;                   a!2)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!0)
;               (= x!2 Node!val!1)
;               (not (= x!2 Node!val!2)))
;          Epoch!val!1
;          a!3)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!3 Node!val!1))
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_40_ice S1 Node!val!0 Node!val!0)
                (inv Model_40_ice S1 Node!val!0 Node!val!1)
                (inv Model_40_ice S1 Node!val!0 Node!val!2)
                (inv Model_40_ice S1 Node!val!1 Node!val!0)
                (inv Model_40_ice S1 Node!val!1 Node!val!1)
                (inv Model_40_ice S1 Node!val!1 Node!val!2)
                (inv Model_40_ice S1 Node!val!2 Node!val!0)
                (inv Model_40_ice S1 Node!val!2 Node!val!1)
                (inv Model_40_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_40_ice S2 Node!val!0 Node!val!0)
           (inv Model_40_ice S2 Node!val!0 Node!val!1)
           (inv Model_40_ice S2 Node!val!0 Node!val!2)
           (inv Model_40_ice S2 Node!val!1 Node!val!0)
           (inv Model_40_ice S2 Node!val!1 Node!val!1)
           (inv Model_40_ice S2 Node!val!1 Node!val!2)
           (inv Model_40_ice S2 Node!val!2 Node!val!0)
           (inv Model_40_ice S2 Node!val!2 Node!val!1)
           (inv Model_40_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (transfer Model_41_ice S1 (ep Model_41_ice S1 n2) n1))
;       (le Model_41_ice (ep Model_41_ice S1 n1) (ep Model_41_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_41_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_41_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_41_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_41_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_41_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_41_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_41_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_41_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_41_ice,
;                              zero(Model_41_ice),
;                              Epoch_1),
;                           one(Model_41_ice) !=
;                           zero(Model_41_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_41_ice, S1, e1, n1)),
;                transfer(Model_41_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_41_ice, S1, e1, n1)),
;                transfer(Model_41_ice,
;                         S1,
;                         ep(Model_41_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(transfer(Model_41_ice,
;                         S1,
;                         ep(Model_41_ice, S1, n2),
;                         n1)),
;            le(Model_41_ice,
;               ep(Model_41_ice, S1, n1),
;               ep(Model_41_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_41_ice, S2, e1, n1)),
;                transfer(Model_41_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_41_ice, S2, e1, n1)),
;                transfer(Model_41_ice,
;                         S2,
;                         ep(Model_41_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(transfer(Model_41_ice,
;                             S2,
;                             ep(Model_41_ice, S2, n2),
;                             n1)),
;                le(Model_41_ice,
;                   ep(Model_41_ice, S2, n1),
;                   ep(Model_41_ice, S2, n2))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_41_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_41_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_41_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_41_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_41_ice, S1, Node_1),
;                               Not(le(Model_41_ice,
;                                      Epoch_1,
;                                      ep(Model_41_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_41_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_41_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_41_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_41_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_41_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_41_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_41_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_41_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_41_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!2))
;     Epoch!val!4
;     (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!1))
;                          (not (= x!2 Node!val!2)))
;                     Epoch!val!3
;                     Epoch!val!2)))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!1))
;                 (not (= x!2 Node!val!2)))
;            Epoch!val!3
;            (ite (and (= x!0 ModelId!val!0)
;                      (= x!1 StateId!val!0)
;                      (= x!2 Node!val!2))
;                 Epoch!val!4
;                 a!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!1)
;        (= x!2 Node!val!1)
;        (not (= x!2 Node!val!2))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!0))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!4))
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_41_ice S1 Node!val!0 Node!val!0)
                (inv Model_41_ice S1 Node!val!0 Node!val!1)
                (inv Model_41_ice S1 Node!val!0 Node!val!2)
                (inv Model_41_ice S1 Node!val!1 Node!val!0)
                (inv Model_41_ice S1 Node!val!1 Node!val!1)
                (inv Model_41_ice S1 Node!val!1 Node!val!2)
                (inv Model_41_ice S1 Node!val!2 Node!val!0)
                (inv Model_41_ice S1 Node!val!2 Node!val!1)
                (inv Model_41_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_41_ice S2 Node!val!0 Node!val!0)
           (inv Model_41_ice S2 Node!val!0 Node!val!1)
           (inv Model_41_ice S2 Node!val!0 Node!val!2)
           (inv Model_41_ice S2 Node!val!1 Node!val!0)
           (inv Model_41_ice S2 Node!val!1 Node!val!1)
           (inv Model_41_ice S2 Node!val!1 Node!val!2)
           (inv Model_41_ice S2 Node!val!2 Node!val!0)
           (inv Model_41_ice S2 Node!val!2 Node!val!1)
           (inv Model_41_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (transfer Model_42_ice S1 (ep Model_42_ice S1 n2) n2))
;       (le Model_42_ice (ep Model_42_ice S1 n1) (ep Model_42_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_42_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_42_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_42_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_42_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_42_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_42_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_42_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_42_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_42_ice,
;                              zero(Model_42_ice),
;                              Epoch_1),
;                           one(Model_42_ice) !=
;                           zero(Model_42_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_42_ice, S1, e1, n1)),
;                transfer(Model_42_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_42_ice, S1, e1, n1)),
;                transfer(Model_42_ice,
;                         S1,
;                         ep(Model_42_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(transfer(Model_42_ice,
;                         S1,
;                         ep(Model_42_ice, S1, n2),
;                         n2)),
;            le(Model_42_ice,
;               ep(Model_42_ice, S1, n1),
;               ep(Model_42_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_42_ice, S2, e1, n1)),
;                transfer(Model_42_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_42_ice, S2, e1, n1)),
;                transfer(Model_42_ice,
;                         S2,
;                         ep(Model_42_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(transfer(Model_42_ice,
;                             S2,
;                             ep(Model_42_ice, S2, n2),
;                             n2)),
;                le(Model_42_ice,
;                   ep(Model_42_ice, S2, n1),
;                   ep(Model_42_ice, S2, n2))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_42_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_42_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_42_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_42_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_42_ice, S1, Node_1),
;                               Not(le(Model_42_ice,
;                                      Epoch_1,
;                                      ep(Model_42_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_42_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_42_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_42_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_42_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_42_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_42_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_42_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_42_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_42_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!2))
;                          (not (= x!2 Node!val!1)))
;                     Epoch!val!4
;                     Epoch!val!3)))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!2))
;                 (not (= x!2 Node!val!1)))
;            Epoch!val!4
;            (ite (and (= x!0 ModelId!val!0)
;                      (= x!1 StateId!val!1)
;                      (= x!2 Node!val!1))
;                 Epoch!val!2
;                 a!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_42_ice S1 Node!val!0 Node!val!0)
                (inv Model_42_ice S1 Node!val!0 Node!val!1)
                (inv Model_42_ice S1 Node!val!0 Node!val!2)
                (inv Model_42_ice S1 Node!val!1 Node!val!0)
                (inv Model_42_ice S1 Node!val!1 Node!val!1)
                (inv Model_42_ice S1 Node!val!1 Node!val!2)
                (inv Model_42_ice S1 Node!val!2 Node!val!0)
                (inv Model_42_ice S1 Node!val!2 Node!val!1)
                (inv Model_42_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_42_ice S2 Node!val!0 Node!val!0)
           (inv Model_42_ice S2 Node!val!0 Node!val!1)
           (inv Model_42_ice S2 Node!val!0 Node!val!2)
           (inv Model_42_ice S2 Node!val!1 Node!val!0)
           (inv Model_42_ice S2 Node!val!1 Node!val!1)
           (inv Model_42_ice S2 Node!val!1 Node!val!2)
           (inv Model_42_ice S2 Node!val!2 Node!val!0)
           (inv Model_42_ice S2 Node!val!2 Node!val!1)
           (inv Model_42_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (locked Model_43_ice S1 (ep Model_43_ice S1 n2) n2))
;       (held Model_43_ice S1 n2)
;       (not (held Model_43_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_43_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_43_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_43_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_43_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_43_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_43_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_43_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_43_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_43_ice,
;                              zero(Model_43_ice),
;                              Epoch_1),
;                           one(Model_43_ice) !=
;                           zero(Model_43_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_43_ice, S1, e1, n1)),
;                transfer(Model_43_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_43_ice, S1, e1, n1)),
;                transfer(Model_43_ice,
;                         S1,
;                         ep(Model_43_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(locked(Model_43_ice,
;                       S1,
;                       ep(Model_43_ice, S1, n2),
;                       n2)),
;            held(Model_43_ice, S1, n2),
;            Not(held(Model_43_ice, S1, n1)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_43_ice, S2, e1, n1)),
;                transfer(Model_43_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_43_ice, S2, e1, n1)),
;                transfer(Model_43_ice,
;                         S2,
;                         ep(Model_43_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(held(Model_43_ice, S2, n1)),
;                Not(locked(Model_43_ice,
;                           S2,
;                           ep(Model_43_ice, S2, n2),
;                           n2)),
;                held(Model_43_ice, S2, n2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_43_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_43_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_43_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_43_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_43_ice, S1, Node_1),
;                               Not(le(Model_43_ice,
;                                      Epoch_1,
;                                      ep(Model_43_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_43_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_43_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_43_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_43_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_43_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_43_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_43_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_43_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_43_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2))))))
;     (ite a!1 Epoch!val!1 Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1)
;            (not (= x!3 Node!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_43_ice S1 Node!val!0 Node!val!0)
                (inv Model_43_ice S1 Node!val!0 Node!val!1)
                (inv Model_43_ice S1 Node!val!0 Node!val!2)
                (inv Model_43_ice S1 Node!val!1 Node!val!0)
                (inv Model_43_ice S1 Node!val!1 Node!val!1)
                (inv Model_43_ice S1 Node!val!1 Node!val!2)
                (inv Model_43_ice S1 Node!val!2 Node!val!0)
                (inv Model_43_ice S1 Node!val!2 Node!val!1)
                (inv Model_43_ice S1 Node!val!2 Node!val!2))))
  (or (not a!1)
      (and a!1
           (inv Model_43_ice S2 Node!val!0 Node!val!0)
           (inv Model_43_ice S2 Node!val!0 Node!val!1)
           (inv Model_43_ice S2 Node!val!0 Node!val!2)
           (inv Model_43_ice S2 Node!val!1 Node!val!0)
           (inv Model_43_ice S2 Node!val!1 Node!val!1)
           (inv Model_43_ice S2 Node!val!1 Node!val!2)
           (inv Model_43_ice S2 Node!val!2 Node!val!0)
           (inv Model_43_ice S2 Node!val!2 Node!val!1)
           (inv Model_43_ice S2 Node!val!2 Node!val!2)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (locked Model_44_ice S1 (ep Model_44_ice S1 n2) n1))
;       (= (ep Model_44_ice S1 n2) (ep Model_44_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_44_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_44_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_44_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_44_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_44_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_44_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_44_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_44_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_44_ice,
;                              zero(Model_44_ice),
;                              Epoch_1),
;                           one(Model_44_ice) !=
;                           zero(Model_44_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_44_ice, S1, e1, n1)),
;                transfer(Model_44_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_44_ice, S1, e1, n1)),
;                transfer(Model_44_ice,
;                         S1,
;                         ep(Model_44_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(locked(Model_44_ice,
;                       S1,
;                       ep(Model_44_ice, S1, n2),
;                       n1)),
;            ep(Model_44_ice, S1, n2) ==
;            ep(Model_44_ice, S1, n1))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_44_ice, S2, e1, n1)),
;                transfer(Model_44_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_44_ice, S2, e1, n1)),
;                transfer(Model_44_ice,
;                         S2,
;                         ep(Model_44_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(locked(Model_44_ice,
;                           S2,
;                           ep(Model_44_ice, S2, n2),
;                           n1)),
;                ep(Model_44_ice, S2, n2) ==
;                ep(Model_44_ice, S2, n1)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_44_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_44_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_44_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_44_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_44_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_44_ice,
;                               Epoch_1,
;                               ep(Model_44_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_44_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_44_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_44_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_44_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_44_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_44_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_44_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_44_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_44_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!0
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (= x!2 Node!val!1))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1 Epoch!val!3 Epoch!val!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!0)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_44_ice S1 Node!val!0 Node!val!0)
                (inv Model_44_ice S1 Node!val!0 Node!val!1)
                (inv Model_44_ice S1 Node!val!1 Node!val!0)
                (inv Model_44_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_44_ice S2 Node!val!0 Node!val!0)
           (inv Model_44_ice S2 Node!val!0 Node!val!1)
           (inv Model_44_ice S2 Node!val!1 Node!val!0)
           (inv Model_44_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (locked Model_45_ice S1 (ep Model_45_ice S1 n2) n2))
;       (le Model_45_ice (ep Model_45_ice S1 n1) (ep Model_45_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_45_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_45_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_45_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_45_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_45_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_45_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_45_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_45_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_45_ice,
;                              zero(Model_45_ice),
;                              Epoch_1),
;                           one(Model_45_ice) !=
;                           zero(Model_45_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_45_ice, S1, e1, n1)),
;                transfer(Model_45_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_45_ice, S1, e1, n1)),
;                transfer(Model_45_ice,
;                         S1,
;                         ep(Model_45_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(locked(Model_45_ice,
;                       S1,
;                       ep(Model_45_ice, S1, n2),
;                       n2)),
;            le(Model_45_ice,
;               ep(Model_45_ice, S1, n1),
;               ep(Model_45_ice, S1, n2)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_45_ice, S2, e1, n1)),
;                transfer(Model_45_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_45_ice, S2, e1, n1)),
;                transfer(Model_45_ice,
;                         S2,
;                         ep(Model_45_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(locked(Model_45_ice,
;                           S2,
;                           ep(Model_45_ice, S2, n2),
;                           n2)),
;                le(Model_45_ice,
;                   ep(Model_45_ice, S2, n1),
;                   ep(Model_45_ice, S2, n2))))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_45_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_45_ice,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  ForAll(Epoch_1,
;         ForAll(Node_1,
;                ForAll(Node_2,
;                       Implies(And(locked(Model_45_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_1),
;                                   locked(Model_45_ice,
;                                         S2,
;                                         Epoch_1,
;                                         Node_2)),
;                               Node_1 == Node_2)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_45_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_45_ice,
;                               Epoch_1,
;                               ep(Model_45_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_45_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_45_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_45_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_45_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_45_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_45_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_45_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_45_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_45_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!0))
;        (not (= x!2 Epoch!val!1))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!2
;     (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!0)
;                         (not (= x!2 Node!val!1)))
;                    (and (= x!0 ModelId!val!0)
;                         (= x!1 StateId!val!1)
;                         (not (= x!2 Node!val!1))))))
;       (ite a!1 Epoch!val!4 Epoch!val!3))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!0)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_45_ice S1 Node!val!0 Node!val!0)
                (inv Model_45_ice S1 Node!val!0 Node!val!1)
                (inv Model_45_ice S1 Node!val!1 Node!val!0)
                (inv Model_45_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_45_ice S2 Node!val!0 Node!val!0)
           (inv Model_45_ice S2 Node!val!0 Node!val!1)
           (inv Model_45_ice S2 Node!val!1 Node!val!0)
           (inv Model_45_ice S2 Node!val!1 Node!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (locked Model_46_ice S1 (ep Model_46_ice S1 n2) n1))
;       (le Model_46_ice (ep Model_46_ice S1 n2) (ep Model_46_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_46_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_46_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_46_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_46_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_46_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_46_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_46_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_46_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_46_ice,
;                              zero(Model_46_ice),
;                              Epoch_1),
;                           one(Model_46_ice) !=
;                           zero(Model_46_ice))))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_46_ice, S1, e1, n1)),
;                transfer(Model_46_ice, S1, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_46_ice, S1, e1, n1)),
;                transfer(Model_46_ice,
;                         S1,
;                         ep(Model_46_ice, S1, n1),
;                         n1)))),
;  ForAll([n1, n2],
;         Or(Not(locked(Model_46_ice,
;                       S1,
;                       ep(Model_46_ice, S1, n2),
;                       n1)),
;            le(Model_46_ice,
;               ep(Model_46_ice, S1, n2),
;               ep(Model_46_ice, S1, n1)))),
;  And(ForAll([n1, e1],
;             Or(Not(locked(Model_46_ice, S2, e1, n1)),
;                transfer(Model_46_ice, S2, e1, n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_46_ice, S2, e1, n1)),
;                transfer(Model_46_ice,
;                         S2,
;                         ep(Model_46_ice, S2, n1),
;                         n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(locked(Model_46_ice,
;                           S2,
;                           ep(Model_46_ice, S2, n2),
;                           n1)),
;                le(Model_46_ice,
;                   ep(Model_46_ice, S2, n2),
;                   ep(Model_46_ice, S2, n1))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_46_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_46_ice,
;                               Epoch_1,
;                               ep(Model_46_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_46_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_46_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_46_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_46_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_46_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_46_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_46_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_46_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_46_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                          (= x!1 StateId!val!0)
;                          (not (= x!2 Node!val!1)))
;                     Epoch!val!4
;                     Epoch!val!0)))
;       (ite (and (= x!0 ModelId!val!0)
;                 (= x!1 StateId!val!1)
;                 (not (= x!2 Node!val!1)))
;            Epoch!val!4
;            (ite (and (= x!0 ModelId!val!0)
;                      (= x!1 StateId!val!1)
;                      (= x!2 Node!val!1))
;                 Epoch!val!2
;                 a!1)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!0)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!3 Node!val!1)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (let ((a!1 (and (inv Model_46_ice S1 Node!val!0 Node!val!0)
                (inv Model_46_ice S1 Node!val!0 Node!val!1)
                (inv Model_46_ice S1 Node!val!1 Node!val!0)
                (inv Model_46_ice S1 Node!val!1 Node!val!1))))
  (or (not a!1)
      (and a!1
           (inv Model_46_ice S2 Node!val!0 Node!val!0)
           (inv Model_46_ice S2 Node!val!0 Node!val!1)
           (inv Model_46_ice S2 Node!val!1 Node!val!0)
           (inv Model_46_ice S2 Node!val!1 Node!val!1)))))



;(declare-fun Model_DUMMYMODEL () ModelId)
;(declare-fun DUMMYSTATE () StateId)
(declare-fun N1 () Node)
(declare-fun N2 () Node)

; this one includes assertion of axioms, so no need to assert it again
(assert (forall ((Epoch_1 Epoch))
  (forall ((Epoch_2 Epoch))
    (forall ((Epoch_3 Epoch))
      (and (le Model_DUMMYMODEL Epoch_1 Epoch_1)
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_3))
               (le Model_DUMMYMODEL Epoch_1 Epoch_3))
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_1))
               (= Epoch_1 Epoch_2))
           (or (le Model_DUMMYMODEL Epoch_1 Epoch_2)
               (le Model_DUMMYMODEL Epoch_2 Epoch_1))
           (le Model_DUMMYMODEL (zero Model_DUMMYMODEL) Epoch_1)
           (distinct (one Model_DUMMYMODEL) (zero Model_DUMMYMODEL)))))))
(assert (forall ((n1 Node) (e1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE e1 n1))
      (transfer Model_DUMMYMODEL DUMMYSTATE e1 n1))))
(assert (forall ((n1 Node) (e1 Epoch))
  (or (not (locked Model_DUMMYMODEL DUMMYSTATE e1 n1))
      (transfer Model_DUMMYMODEL
                DUMMYSTATE
                (ep Model_DUMMYMODEL DUMMYSTATE n1)
                n1))))

(assert (not (inv Model_DUMMYMODEL DUMMYSTATE N1 N2)))

(check-synth)
        