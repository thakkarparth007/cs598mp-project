
(set-logic ALL)

(set-option :random-seed 123)

(declare-datatypes ( (Node 0) ) ((
(Node!val!0) 
(Node!val!1) 
)))

(declare-datatypes ( (Epoch 0) ) ((
(Epoch!val!2) 
(Epoch!val!1) 
(Epoch!val!0) 
(Epoch!val!4) 
(Epoch!val!3) 
)))

(declare-datatypes ( (ModelId 0) ) ((
(Model_DUMMYMODEL) 
(Model_48_pos) 
(Model_1_pos) 
(Model_41_pos) 
(Model_77_ice) 
(Model_47_pos) 
(Model_44_pos) 
(Model_36_pos) 
(Model_0_pos) 
(Model_39_pos) 
(Model_42_pos) 
(Model_46_pos) 
(Model_51_pos) 
(Model_38_pos) 
(Model_5_pos) 
(Model_43_pos) 
(Model_37_pos) 
(Model_50_pos) 
(Model_49_pos) 
(Model_2_pos) 
(Model_45_pos) 
(Model_40_pos) 
)))

(declare-datatypes ( (StateId 0) ) ((
(DUMMYSTATE) 
(S2) 
(S1) 
(init) 
)))

;; definitions of functions defining models.
(declare-fun ep_dummy (ModelId StateId Node) Epoch)
(define-fun ep ((a0 ModelId) (a1 StateId) (a2 Node)) Epoch
(ite (= a0 Model_DUMMYMODEL) (ep_dummy a0 a1 a2 )
    (ite (= a0 Model_5_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!2
;        if a2 IN [Node!val!1, ] 
            Epoch!val!1
        )
    (ite (= a0 Model_37_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_38_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_41_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_42_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_43_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_44_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_45_pos)
        (ite (= a2 Node!val!0)
            Epoch!val!0
;        if a2 IN [Node!val!1, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_77_ice)
        (ite (= a1 S1)
            Epoch!val!1
;        if a1 IN [S2, ] 
            Epoch!val!2
        )
    (ite (= a0 Model_0_pos)
        Epoch!val!1
    (ite (= a0 Model_40_pos)
        Epoch!val!3
    (ite (or (= a0 Model_51_pos) (= a0 Model_46_pos) (= a0 Model_1_pos) (= a0 Model_50_pos) )
        Epoch!val!0
;    if a0 IN [Model_48_pos, Model_47_pos, Model_49_pos, Model_36_pos, Model_39_pos, Model_2_pos, ] 
        Epoch!val!2
    ))))))))))))
))

(declare-fun held_dummy (ModelId StateId Node) Bool)
(define-fun held ((a0 ModelId) (a1 StateId) (a2 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (held_dummy a0 a1 a2 )
    (ite (= a0 Model_5_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_37_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_38_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_41_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_42_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_43_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_44_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_45_pos)
        (ite (= a2 Node!val!0)
            false
;        if a2 IN [Node!val!1, ] 
            true
        )
    (ite (= a0 Model_77_ice)
        (ite (= a1 S1)
            false
;        if a1 IN [S2, ] 
            true
        )
;    if a0 IN [Model_48_pos, Model_51_pos, Model_47_pos, Model_49_pos, Model_36_pos, Model_1_pos, Model_0_pos, Model_39_pos, Model_40_pos, Model_50_pos, Model_2_pos, Model_46_pos, ] 
        true
    )))))))))
))

(declare-fun transfer_dummy (ModelId StateId Epoch Node) Bool)
(define-fun transfer ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (transfer_dummy a0 a1 a2 a3 )
    (ite (= a1 S1)
        (ite (= a2 Epoch!val!0)
            false
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            true
        )
    (ite (= a1 S2)
        (ite (= a2 Epoch!val!0)
            false
;        if a2 IN [Epoch!val!2, Epoch!val!1, ] 
            true
        )
;    if a1 IN [init, ] 
        false
    ))
))

(declare-fun locked_dummy (ModelId StateId Epoch Node) Bool)
(define-fun locked ((a0 ModelId) (a1 StateId) (a2 Epoch) (a3 Node)) Bool
(ite (= a0 Model_DUMMYMODEL) (locked_dummy a0 a1 a2 a3 )
    (ite (= a1 S2)
        (ite (= a2 Epoch!val!2)
            true
;        if a2 IN [Epoch!val!0, Epoch!val!1, ] 
            false
        )
;    if a1 IN [S1, init, ] 
        false
    )
))

(declare-fun le_dummy (ModelId Epoch Epoch) Bool)
(define-fun le ((a0 ModelId) (a1 Epoch) (a2 Epoch)) Bool
(ite (= a0 Model_DUMMYMODEL) (le_dummy a0 a1 a2 )
    (ite (= a1 Epoch!val!0)
        (ite (= a0 Model_0_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_1_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_5_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_36_pos)
            (ite (= a2 Epoch!val!1)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, ] 
                true
            )
        (ite (= a0 Model_39_pos)
            (ite (or (= a2 Epoch!val!4) (= a2 Epoch!val!1) )
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_40_pos)
            (ite (or (= a2 Epoch!val!0) (= a2 Epoch!val!2) )
                true
;            if a2 IN [Epoch!val!4, Epoch!val!1, Epoch!val!3, ] 
                false
            )
        (ite (= a0 Model_46_pos)
            (ite (= a2 Epoch!val!4)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_47_pos)
            (ite (or (= a2 Epoch!val!4) (= a2 Epoch!val!1) )
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_48_pos)
            (ite (or (= a2 Epoch!val!0) (= a2 Epoch!val!3) )
                true
;            if a2 IN [Epoch!val!4, Epoch!val!2, Epoch!val!1, ] 
                false
            )
        (ite (= a0 Model_49_pos)
            (ite (or (= a2 Epoch!val!4) (= a2 Epoch!val!2) )
                false
;            if a2 IN [Epoch!val!0, Epoch!val!1, Epoch!val!3, ] 
                true
            )
        (ite (= a0 Model_50_pos)
            (ite (= a2 Epoch!val!0)
                true
;            if a2 IN [Epoch!val!1, Epoch!val!2, Epoch!val!3, ] 
                false
            )
        (ite (= a0 Model_51_pos)
            (ite (= a2 Epoch!val!3)
                false
;            if a2 IN [Epoch!val!0, Epoch!val!2, Epoch!val!1, ] 
                true
            )
;        if a0 IN [Model_38_pos, Model_77_ice, Model_44_pos, Model_43_pos, Model_41_pos, Model_45_pos, Model_37_pos, Model_2_pos, Model_42_pos, ] 
            true
        ))))))))))))
    (ite (= a1 Epoch!val!2)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_48_pos) (= a0 Model_5_pos) (= a0 Model_1_pos) (= a0 Model_0_pos) (= a0 Model_50_pos) (= a0 Model_49_pos) )
                true
;            if a0 IN [Model_51_pos, Model_47_pos, Model_38_pos, Model_77_ice, Model_44_pos, Model_36_pos, Model_43_pos, Model_41_pos, Model_45_pos, Model_39_pos, Model_37_pos, Model_40_pos, Model_2_pos, Model_42_pos, Model_46_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_47_pos) (= a0 Model_36_pos) (= a0 Model_43_pos) (= a0 Model_45_pos) (= a0 Model_39_pos) (= a0 Model_37_pos) (= a0 Model_40_pos) (= a0 Model_2_pos) (= a0 Model_77_ice) )
                false
;            if a0 IN [Model_48_pos, Model_51_pos, Model_38_pos, Model_5_pos, Model_44_pos, Model_1_pos, Model_0_pos, Model_41_pos, Model_50_pos, Model_49_pos, Model_42_pos, Model_46_pos, ] 
                true
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_48_pos) (= a0 Model_49_pos) )
                true
;            if a0 IN [Model_51_pos, Model_47_pos, Model_39_pos, Model_40_pos, Model_50_pos, Model_46_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            true
;        if a2 IN [Epoch!val!4, ] 
            false
        ))))
    (ite (= a1 Epoch!val!1)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_48_pos) (= a0 Model_47_pos) (= a0 Model_5_pos) (= a0 Model_36_pos) (= a0 Model_1_pos) (= a0 Model_0_pos) (= a0 Model_39_pos) (= a0 Model_40_pos) (= a0 Model_50_pos) )
                true
;            if a0 IN [Model_51_pos, Model_38_pos, Model_77_ice, Model_44_pos, Model_49_pos, Model_43_pos, Model_41_pos, Model_45_pos, Model_37_pos, Model_2_pos, Model_42_pos, Model_46_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_47_pos) (= a0 Model_36_pos) (= a0 Model_43_pos) (= a0 Model_45_pos) (= a0 Model_39_pos) (= a0 Model_37_pos) (= a0 Model_40_pos) (= a0 Model_2_pos) (= a0 Model_77_ice) )
                true
;            if a0 IN [Model_48_pos, Model_51_pos, Model_38_pos, Model_5_pos, Model_44_pos, Model_1_pos, Model_0_pos, Model_41_pos, Model_50_pos, Model_49_pos, Model_42_pos, Model_46_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            (ite (or (= a0 Model_51_pos) (= a0 Model_46_pos) (= a0 Model_50_pos) )
                false
;            if a0 IN [Model_48_pos, Model_47_pos, Model_39_pos, Model_40_pos, Model_49_pos, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            true
;        if a2 IN [Epoch!val!4, ] 
            false
        ))))
    (ite (= a1 Epoch!val!3)
        (ite (= a2 Epoch!val!0)
            (ite (or (= a0 Model_51_pos) (= a0 Model_40_pos) (= a0 Model_50_pos) )
                true
;            if a0 IN [Model_48_pos, Model_47_pos, Model_39_pos, Model_49_pos, Model_46_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!2)
            (ite (or (= a0 Model_48_pos) (= a0 Model_49_pos) )
                false
;            if a0 IN [Model_51_pos, Model_47_pos, Model_39_pos, Model_40_pos, Model_50_pos, Model_46_pos, ] 
                true
            )
        (ite (= a2 Epoch!val!1)
            (ite (or (= a0 Model_51_pos) (= a0 Model_46_pos) (= a0 Model_50_pos) )
                true
;            if a0 IN [Model_48_pos, Model_47_pos, Model_39_pos, Model_40_pos, Model_49_pos, ] 
                false
            )
        (ite (= a2 Epoch!val!3)
            true
;        if a2 IN [Epoch!val!4, ] 
            false
        ))))
;    if a1 IN [Epoch!val!4, ] 
        true
    ))))
))

(declare-fun zero_dummy (ModelId) Epoch)
(define-fun zero ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (zero_dummy a0 )
    (ite (= a0 Model_36_pos)
        Epoch!val!1
    (ite (or (= a0 Model_51_pos) (= a0 Model_50_pos) )
        Epoch!val!3
    (ite (or (= a0 Model_5_pos) (= a0 Model_1_pos) (= a0 Model_0_pos) )
        Epoch!val!2
    (ite (or (= a0 Model_48_pos) (= a0 Model_47_pos) (= a0 Model_39_pos) (= a0 Model_40_pos) (= a0 Model_49_pos) (= a0 Model_46_pos) )
        Epoch!val!4
;    if a0 IN [Model_38_pos, Model_77_ice, Model_44_pos, Model_43_pos, Model_41_pos, Model_45_pos, Model_37_pos, Model_2_pos, Model_42_pos, ] 
        Epoch!val!0
    ))))
))

(declare-fun one_dummy (ModelId) Epoch)
(define-fun one ((a0 ModelId)) Epoch
(ite (= a0 Model_DUMMYMODEL) (one_dummy a0 )
    (ite (= a0 Model_40_pos)
        Epoch!val!3
    (ite (or (= a0 Model_5_pos) (= a0 Model_77_ice) (= a0 Model_0_pos) )
        Epoch!val!1
    (ite (or (= a0 Model_51_pos) (= a0 Model_46_pos) (= a0 Model_1_pos) (= a0 Model_50_pos) )
        Epoch!val!0
;    if a0 IN [Model_48_pos, Model_47_pos, Model_38_pos, Model_44_pos, Model_49_pos, Model_36_pos, Model_43_pos, Model_41_pos, Model_45_pos, Model_39_pos, Model_37_pos, Model_2_pos, Model_42_pos, ] 
        Epoch!val!2
    )))
))

(declare-fun first_dummy (ModelId) Node)
(define-fun first ((a0 ModelId)) Node
(ite (= a0 Model_DUMMYMODEL) (first_dummy a0 )
    (ite (or (= a0 Model_38_pos) (= a0 Model_5_pos) (= a0 Model_44_pos) (= a0 Model_43_pos) (= a0 Model_41_pos) (= a0 Model_45_pos) (= a0 Model_37_pos) (= a0 Model_42_pos) )
        Node!val!1
;    if a0 IN [Model_48_pos, Model_51_pos, Model_47_pos, Model_49_pos, Model_36_pos, Model_1_pos, Model_0_pos, Model_39_pos, Model_40_pos, Model_50_pos, Model_2_pos, Model_77_ice, Model_46_pos, ] 
        Node!val!0
    )
))

(synth-fun inv ((m ModelId) (s StateId) (n1 Node)) Bool

    ;; Declare the non-terminals that would be used in the grammar

    (
        (Start Bool)
        (Atom Bool)
        (Node_ Node)
		(Epoch_ Epoch)
    )

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
;                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool
            (
                (le m Epoch_ Epoch_)
				(held m s Node_)
				(transfer m s Epoch_ Node_)
				(locked m s Epoch_ Node_)

                (= n1 (first m))
				(= (zero m) (one m))
				(= (zero m) (ep m s Node_))
				(= (one m) (ep m s Node_))

;                (and Atom Atom)
;                (or Atom Atom)
;                (=> Atom Atom)
;                (not Atom)
            )
        )

        (Node_ Node (
			n1
			(first m)
		))
		(Epoch_ Epoch (
			(zero m)
			(one m)
			(ep m s Node_)
		))
    )
)

(constraint (and (inv Model_0_pos init Node!val!0)))


(constraint (and (inv Model_1_pos init Node!val!0)))


(constraint (and (inv Model_2_pos init Node!val!0)))


(constraint (and (inv Model_5_pos init Node!val!0)))


(constraint (and (inv Model_36_pos init Node!val!0)))


(constraint (and (inv Model_37_pos init Node!val!0)))


(constraint (and (inv Model_38_pos init Node!val!0)))


(constraint (and (inv Model_39_pos init Node!val!0)))


(constraint (and (inv Model_40_pos init Node!val!0)))


(constraint (and (inv Model_41_pos init Node!val!0)))


(constraint (and (inv Model_42_pos init Node!val!0)))


(constraint (and (inv Model_43_pos init Node!val!0)))


(constraint (and (inv Model_44_pos init Node!val!0)))


(constraint (and (inv Model_45_pos init Node!val!0)))


(constraint (and (inv Model_46_pos init Node!val!0)))


(constraint (and (inv Model_47_pos init Node!val!0)))


(constraint (and (inv Model_48_pos init Node!val!0)))


(constraint (and (inv Model_49_pos init Node!val!0)))


(constraint (and (inv Model_50_pos init Node!val!0)))


(constraint (and (inv Model_51_pos init Node!val!0)))


(constraint (or (not (and (inv Model_77_ice S1 Node!val!0)))
    (and (and (inv Model_77_ice S1 Node!val!0))
         (inv Model_77_ice S2 Node!val!0))))

; this one includes assertion of axioms, so no need to assert it again
(assert (forall ((Epoch_1 Epoch))
  (forall ((Epoch_2 Epoch))
    (forall ((Epoch_3 Epoch))
      (and (le Model_DUMMYMODEL Epoch_1 Epoch_1)
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_3))
               (le Model_DUMMYMODEL Epoch_1 Epoch_3))
           (=> (and (le Model_DUMMYMODEL Epoch_1 Epoch_2)
                    (le Model_DUMMYMODEL Epoch_2 Epoch_1))
               (= Epoch_1 Epoch_2))
           (or (le Model_DUMMYMODEL Epoch_1 Epoch_2)
               (le Model_DUMMYMODEL Epoch_2 Epoch_1))
           (le Model_DUMMYMODEL (zero Model_DUMMYMODEL) Epoch_1)
           (distinct (one Model_DUMMYMODEL) (zero Model_DUMMYMODEL)))))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (zero Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (= (zero Model_DUMMYMODEL)
          (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL
                 DUMMYSTATE
                 (zero Model_DUMMYMODEL)
                 (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (not (transfer Model_DUMMYMODEL DUMMYSTATE (zero Model_DUMMYMODEL) Node_1))))
(assert (forall ((Node_1 Node))
  (or (locked Model_DUMMYMODEL
              DUMMYSTATE
              (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
              (first Model_DUMMYMODEL))
      (= (one Model_DUMMYMODEL)
         (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))))))
(assert (forall ((Node_1 Node))
  (and (le Model_DUMMYMODEL
           (one Model_DUMMYMODEL)
           (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
       (le Model_DUMMYMODEL
           (ep Model_DUMMYMODEL DUMMYSTATE Node_1)
           (ep Model_DUMMYMODEL DUMMYSTATE Node_1)))))
(assert (forall ((Node_1 Node))
  (not (locked Model_DUMMYMODEL
               DUMMYSTATE
               (one Model_DUMMYMODEL)
               (first Model_DUMMYMODEL)))))
(assert (forall ((Node_1 Node))
  (or (= (one Model_DUMMYMODEL)
         (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL)))
      (transfer Model_DUMMYMODEL
                DUMMYSTATE
                (ep Model_DUMMYMODEL DUMMYSTATE (first Model_DUMMYMODEL))
                (first Model_DUMMYMODEL)))))
(assert (not (inv Model_DUMMYMODEL DUMMYSTATE Node!val!0)))

; the following is to assert that we don't get True as an invariant
(declare-fun N1 () Node)
;(assert (not (inv Model_DUMMYMODEL DUMMYSTATE N1)))

(check-synth)

