
(set-logic ALL)

(declare-sort ModelId)
(declare-sort Node)
(declare-sort Epoch)

(declare-fun Node!val!0_m (ModelId) Node)
(declare-fun Node!val!1_m (ModelId) Node)
(declare-fun Node!val!2_m (ModelId) Node)

(declare-fun Epoch!val!4_m (ModelId) Epoch)
(declare-fun Epoch!val!0_m (ModelId) Epoch)
(declare-fun Epoch!val!2_m (ModelId) Epoch)
(declare-fun Epoch!val!3_m (ModelId) Epoch)
(declare-fun Epoch!val!1_m (ModelId) Epoch)

(declare-fun Model_0 () ModelId)
(declare-fun Model_3 () ModelId)
(declare-fun Model_2 () ModelId)
(declare-fun Model_4 () ModelId)
(declare-fun Model_1 () ModelId)


(declare-fun held_m (ModelId Node) Bool)
(declare-fun locked_m (ModelId Epoch Node) Bool)
(declare-fun transfer_m (ModelId Epoch Node) Bool)
(declare-fun ep_m (ModelId Node) Epoch)
(declare-fun le_m (ModelId Epoch Epoch) Bool)
(declare-fun zero_m (ModelId) Epoch)
(declare-fun one_m (ModelId) Epoch)
(declare-fun first_m (ModelId) Node)

(synth-fun inv ((m ModelId) (n1 Node) (e1 Epoch)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool 
            (
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool 
            (
                (held_m m Node_)
                (locked_m m Epoch_ Node_)
                (transfer_m m Epoch_ Node_)
                (le_m m Epoch_ Epoch_)
            )
        )

        (Node_ Node
            (
                n1
            )
        )

        (Epoch_ Epoch
            (
                e1
                (ep_m m Node_)
            )
        )
    
    )
)

; candidate invariant was : (cex type: <class '__main__.PositiveCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero)))))
;   (and a!1 false))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll([n, e],
;         And(init.held(n) == (n == first),
;             Implies(n != first, init.ep(n) == zero),
;             init.ep(first) == one,
;             init.transfer(e, n) == False,
;             init.locked(e, n) == False)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  Not(And(ForAll([e1, e2, e3],
;                 And(le(e1, e1),
;                     Implies(And(le(e1, e2), le(e2, e3)),
;                             le(e1, e3)),
;                     Implies(And(le(e1, e2), le(e2, e1)),
;                             e1 == e2),
;                     Or(le(e1, e2), le(e2, e1)),
;                     le(zero, e1),
;                     one != zero)),
;          False))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!1) (= x Epoch!val!2) (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun first () Node
;   Node!val!0)
; (define-fun one () Epoch
;   Epoch!val!1)
; (define-fun init.ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!1)) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))))
; (define-fun init.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun init.held ((x!0 Node)) Bool
;   true)
; (define-fun init.locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (distinct (Node!val!0_m Model_0) ))
(constraint (distinct (Epoch!val!1_m Model_0)  (Epoch!val!2_m Model_0)  (Epoch!val!0_m Model_0) ))
(constraint (and (= (zero_m Model_0) (Epoch!val!2_m Model_0))
     (= (first_m Model_0) (Node!val!0_m Model_0))
     (= (one_m Model_0) (Epoch!val!1_m Model_0))
     (= (ep_m Model_0 (Node!val!0_m Model_0)) (Epoch!val!1_m Model_0))
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!1_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!2_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!1_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!2_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!1_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!2_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (transfer_m Model_0 (Epoch!val!1_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (transfer_m Model_0 (Epoch!val!2_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (transfer_m Model_0 (Epoch!val!0_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (held_m Model_0 (Node!val!0_m Model_0)) true)
     (= (locked_m Model_0 (Epoch!val!1_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (locked_m Model_0 (Epoch!val!2_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (locked_m Model_0 (Epoch!val!0_m Model_0) (Node!val!0_m Model_0))
        false)
     (inv Model_0 (Node!val!0_m Model_0) (Epoch!val!1_m Model_0))
     (inv Model_0 (Node!val!0_m Model_0) (Epoch!val!2_m Model_0))
     (inv Model_0 (Node!val!0_m Model_0) (Epoch!val!0_m Model_0))))


; candidate invariant was : (cex type: <class '__main__.PositiveCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero)))))
;   (and a!1 (forall ((n1 Node)) (init.held n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll([n, e],
;         And(init.held(n) == (n == first),
;             Implies(n != first, init.ep(n) == zero),
;             init.ep(first) == one,
;             init.transfer(e, n) == False,
;             init.locked(e, n) == False)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  Not(And(ForAll([e1, e2, e3],
;                 And(le(e1, e1),
;                     Implies(And(le(e1, e2), le(e2, e3)),
;                             le(e1, e3)),
;                     Implies(And(le(e1, e2), le(e2, e1)),
;                             e1 == e2),
;                     Or(le(e1, e2), le(e2, e1)),
;                     le(zero, e1),
;                     one != zero)),
;          ForAll(n1, init.held(n1))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!1) (= x Epoch!val!2) (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun one () Epoch
;   Epoch!val!1)
; (define-fun first () Node
;   Node!val!1)
; (define-fun init.ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!1
;     Epoch!val!2))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!1)) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))))
; (define-fun init.held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun init.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun init.locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (distinct (Node!val!1_m Model_1)  (Node!val!0_m Model_1) ))
(constraint (distinct (Epoch!val!1_m Model_1)  (Epoch!val!2_m Model_1)  (Epoch!val!0_m Model_1) ))
(constraint (and (= (zero_m Model_1) (Epoch!val!2_m Model_1))
     (= (one_m Model_1) (Epoch!val!1_m Model_1))
     (= (first_m Model_1) (Node!val!1_m Model_1))
     (= (ep_m Model_1 (Node!val!1_m Model_1)) (Epoch!val!1_m Model_1))
     (= (ep_m Model_1 (Node!val!0_m Model_1)) (Epoch!val!2_m Model_1))
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!1_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!2_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!0_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!1_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!2_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!0_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!1_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!2_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!0_m Model_1)) true)
     (= (held_m Model_1 (Node!val!1_m Model_1)) true)
     (= (held_m Model_1 (Node!val!0_m Model_1)) false)
     (= (transfer_m Model_1 (Epoch!val!1_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!1_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!2_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!2_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!0_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!0_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!1_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!1_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!2_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!2_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!0_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!0_m Model_1) (Node!val!0_m Model_1))
        false)
     (inv Model_1 (Node!val!1_m Model_1) (Epoch!val!1_m Model_1))
     (inv Model_1 (Node!val!1_m Model_1) (Epoch!val!2_m Model_1))
     (inv Model_1 (Node!val!1_m Model_1) (Epoch!val!0_m Model_1))
     (inv Model_1 (Node!val!0_m Model_1) (Epoch!val!1_m Model_1))
     (inv Model_1 (Node!val!0_m Model_1) (Epoch!val!2_m Model_1))
     (inv Model_1 (Node!val!0_m Model_1) (Epoch!val!0_m Model_1))))


; candidate invariant was : (cex type: <class '__main__.NegativeCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero))))
;       (a!2 (forall ((n1 Node) (e1 Epoch))
;              (or (pre.transfer e1 n1) (le (pre.ep n1) (pre.ep n1))))))
;   (and a!1 a!2))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  And(ForAll([e1, e2, e3],
;             And(le(e1, e1),
;                 Implies(And(le(e1, e2), le(e2, e3)),
;                         le(e1, e3)),
;                 Implies(And(le(e1, e2), le(e2, e1)),
;                         e1 == e2),
;                 Or(le(e1, e2), le(e2, e1)),
;                 le(zero, e1),
;                 one != zero)),
;      ForAll([n1, e1],
;             Or(pre.transfer(e1, n1),
;                le(pre.ep(n1), pre.ep(n1))))),
;  Not(ForAll([e1, n1, n2],
;             Implies(And(pre.locked(e1, n1),
;                         pre.locked(e1, n2)),
;                     n1 == n2)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!2))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!1) (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))))
; (define-fun pre.ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun pre.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   true)
; (define-fun pre.locked ((x!0 Epoch) (x!1 Node)) Bool
;   true)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (distinct (Node!val!1_m Model_2)  (Node!val!0_m Model_2)  (Node!val!2_m Model_2) ))
(constraint (distinct (Epoch!val!1_m Model_2)  (Epoch!val!2_m Model_2)  (Epoch!val!3_m Model_2)  (Epoch!val!0_m Model_2) ))
(constraint (let ((a!1 (not (and (inv Model_2
                          (Node!val!1_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Epoch!val!0_m Model_2))))))
  (and (= (zero_m Model_2) (Epoch!val!3_m Model_2))
       (= (one_m Model_2) (Epoch!val!2_m Model_2))
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!2_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!0_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!0_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!3_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!0_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!2_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!0_m Model_2)) true)
       (= (ep_m Model_2 (Node!val!1_m Model_2)) (Epoch!val!2_m Model_2))
       (= (ep_m Model_2 (Node!val!0_m Model_2)) (Epoch!val!2_m Model_2))
       (= (ep_m Model_2 (Node!val!2_m Model_2)) (Epoch!val!2_m Model_2))
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!2_m Model_2))
          true)
       a!1)))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (or (post.held n1) (le (post.ep n1) e1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(pre.transfer(e1, n1), le(pre.ep(n1), pre.ep(n1)))),
;  ForAll([n1, e1], Or(pre.held(n1), le(pre.ep(n1), e1))),
;  Not(ForAll([n1, e1],
;             Or(post.held(n1), le(post.ep(n1), e1)))),
;  Exists([n1, n2, e],
;         And(pre.held(n1), Not(le(e, pre.ep(n1))))),
;  ForAll([n1, n2, e],
;         Implies(And(pre.held(n1), Not(le(e, pre.ep(n1)))),
;                 And(ForAll([EE, NN],
;                            post.transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               pre.transfer(EE, NN))),
;                     ForAll(NN,
;                            post.held(NN) ==
;                            If(NN == n1, False, pre.held(NN))),
;                     ForAll([EE, NN],
;                            post.locked(EE, NN) ==
;                            pre.locked(EE, NN)),
;                     ForAll(NN, post.ep(NN) == pre.ep(NN)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!1) (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!3)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3)))))
; (define-fun post.ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun post.locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun pre.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun pre.held ((x!0 Node)) Bool
;   true)
; (define-fun post.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!1) (not (= x!0 Epoch!val!3))))
; (define-fun pre.ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun post.held ((x!0 Node)) Bool
;   false)
; (define-fun pre.locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (distinct (Node!val!0_m Model_3) ))
(constraint (distinct (Epoch!val!1_m Model_3)  (Epoch!val!2_m Model_3)  (Epoch!val!3_m Model_3)  (Epoch!val!4_m Model_3)  (Epoch!val!0_m Model_3) ))
(constraint (let ((a!1 (and (inv Model_3 (Node!val!0_m Model_3) (Epoch!val!1_m Model_3))
                (inv Model_3 (Node!val!0_m Model_3) (Epoch!val!2_m Model_3))
                (inv Model_3 (Node!val!0_m Model_3) (Epoch!val!3_m Model_3))
                (inv Model_3 (Node!val!0_m Model_3) (Epoch!val!4_m Model_3))
                (inv Model_3 (Node!val!0_m Model_3) (Epoch!val!0_m Model_3)))))
(let ((a!2 (and (= (one_m Model_3) (Epoch!val!3_m Model_3))
                (= (zero_m Model_3) (Epoch!val!4_m Model_3))
                (= (le_m Model_3
                         (Epoch!val!1_m Model_3)
                         (Epoch!val!1_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!1_m Model_3)
                         (Epoch!val!2_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!1_m Model_3)
                         (Epoch!val!3_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!1_m Model_3)
                         (Epoch!val!4_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!1_m Model_3)
                         (Epoch!val!0_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!2_m Model_3)
                         (Epoch!val!1_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!2_m Model_3)
                         (Epoch!val!2_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!2_m Model_3)
                         (Epoch!val!3_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!2_m Model_3)
                         (Epoch!val!4_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!2_m Model_3)
                         (Epoch!val!0_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!3_m Model_3)
                         (Epoch!val!1_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!3_m Model_3)
                         (Epoch!val!2_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!3_m Model_3)
                         (Epoch!val!3_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!3_m Model_3)
                         (Epoch!val!4_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!3_m Model_3)
                         (Epoch!val!0_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!4_m Model_3)
                         (Epoch!val!1_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!4_m Model_3)
                         (Epoch!val!2_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!4_m Model_3)
                         (Epoch!val!3_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!4_m Model_3)
                         (Epoch!val!4_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!4_m Model_3)
                         (Epoch!val!0_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!0_m Model_3)
                         (Epoch!val!1_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!0_m Model_3)
                         (Epoch!val!2_m Model_3))
                   true)
                (= (le_m Model_3
                         (Epoch!val!0_m Model_3)
                         (Epoch!val!3_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!0_m Model_3)
                         (Epoch!val!4_m Model_3))
                   false)
                (= (le_m Model_3
                         (Epoch!val!0_m Model_3)
                         (Epoch!val!0_m Model_3))
                   true)
                (= (transfer_m Model_3
                                   (Epoch!val!1_m Model_3)
                                   (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                   (Epoch!val!2_m Model_3)
                                   (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                   (Epoch!val!3_m Model_3)
                                   (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                   (Epoch!val!4_m Model_3)
                                   (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                   (Epoch!val!0_m Model_3)
                                   (Node!val!0_m Model_3))
                   false)
                (= (held_m Model_3 (Node!val!0_m Model_3)) true)
                (= (ep_m Model_3 (Node!val!0_m Model_3))
                   (Epoch!val!2_m Model_3))
                (= (locked_m Model_3
                                 (Epoch!val!1_m Model_3)
                                 (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                 (Epoch!val!2_m Model_3)
                                 (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                 (Epoch!val!3_m Model_3)
                                 (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                 (Epoch!val!4_m Model_3)
                                 (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                 (Epoch!val!0_m Model_3)
                                 (Node!val!0_m Model_3))
                   false)
                a!1))
      (a!3 (and (= (ep_m Model_3 (Node!val!0_m Model_3))
                   (Epoch!val!2_m Model_3))
                (= (locked_m Model_3
                                  (Epoch!val!1_m Model_3)
                                  (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                  (Epoch!val!2_m Model_3)
                                  (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                  (Epoch!val!3_m Model_3)
                                  (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                  (Epoch!val!4_m Model_3)
                                  (Node!val!0_m Model_3))
                   false)
                (= (locked_m Model_3
                                  (Epoch!val!0_m Model_3)
                                  (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                    (Epoch!val!1_m Model_3)
                                    (Node!val!0_m Model_3))
                   true)
                (= (transfer_m Model_3
                                    (Epoch!val!2_m Model_3)
                                    (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                    (Epoch!val!3_m Model_3)
                                    (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                    (Epoch!val!4_m Model_3)
                                    (Node!val!0_m Model_3))
                   false)
                (= (transfer_m Model_3
                                    (Epoch!val!0_m Model_3)
                                    (Node!val!0_m Model_3))
                   false)
                (= (held_m Model_3 (Node!val!0_m Model_3)) false)
                a!1)))
  (=> a!2 a!3))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (post.locked e1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(pre.transfer(e1, n1), le(pre.ep(n1), pre.ep(n1)))),
;  ForAll([n1, e1], Not(pre.locked(e1, n1))),
;  Not(ForAll([n1, e1], Not(post.locked(e1, n1)))),
;  Exists([n, e],
;         And(pre.transfer(e, n), Not(le(e, pre.ep(n))))),
;  ForAll([n, e],
;         Implies(And(pre.transfer(e, n),
;                     Not(le(e, pre.ep(n)))),
;                 And(ForAll(NN,
;                            post.held(NN) ==
;                            If(n == NN, True, pre.held(NN))),
;                     ForAll(NN,
;                            post.ep(NN) ==
;                            If(n == NN, e, pre.ep(NN))),
;                     ForAll([EE, NN],
;                            post.locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               pre.locked(EE, NN))),
;                     ForAll([EE, NN],
;                            post.transfer(EE, NN) ==
;                            pre.transfer(EE, NN)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!2))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!2)) (= x!1 Epoch!val!2))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))))
; (define-fun post.ep ((x!0 Node)) Epoch
;   Epoch!val!0)
; (define-fun post.locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0) (not (= x!0 Epoch!val!3)) (not (= x!0 Epoch!val!2))))
; (define-fun pre.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0) (not (= x!0 Epoch!val!3)) (not (= x!0 Epoch!val!2))))
; (define-fun pre.held ((x!0 Node)) Bool
;   false)
; (define-fun post.transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0) (not (= x!0 Epoch!val!3)) (not (= x!0 Epoch!val!2))))
; (define-fun pre.ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun post.held ((x!0 Node)) Bool
;   true)
; (define-fun pre.locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(constraint (distinct (Node!val!0_m Model_4) ))
(constraint (distinct (Epoch!val!1_m Model_4)  (Epoch!val!2_m Model_4)  (Epoch!val!3_m Model_4)  (Epoch!val!0_m Model_4) ))
(constraint (let ((a!1 (and (inv Model_4 (Node!val!0_m Model_4) (Epoch!val!1_m Model_4))
                (inv Model_4 (Node!val!0_m Model_4) (Epoch!val!2_m Model_4))
                (inv Model_4 (Node!val!0_m Model_4) (Epoch!val!3_m Model_4))
                (inv Model_4 (Node!val!0_m Model_4) (Epoch!val!0_m Model_4)))))
(let ((a!2 (and (= (one_m Model_4) (Epoch!val!2_m Model_4))
                (= (zero_m Model_4) (Epoch!val!3_m Model_4))
                (= (le_m Model_4
                         (Epoch!val!1_m Model_4)
                         (Epoch!val!1_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!1_m Model_4)
                         (Epoch!val!2_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!1_m Model_4)
                         (Epoch!val!3_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!1_m Model_4)
                         (Epoch!val!0_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!2_m Model_4)
                         (Epoch!val!1_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!2_m Model_4)
                         (Epoch!val!2_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!2_m Model_4)
                         (Epoch!val!3_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!2_m Model_4)
                         (Epoch!val!0_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!3_m Model_4)
                         (Epoch!val!1_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!3_m Model_4)
                         (Epoch!val!2_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!3_m Model_4)
                         (Epoch!val!3_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!3_m Model_4)
                         (Epoch!val!0_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!0_m Model_4)
                         (Epoch!val!1_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!0_m Model_4)
                         (Epoch!val!2_m Model_4))
                   true)
                (= (le_m Model_4
                         (Epoch!val!0_m Model_4)
                         (Epoch!val!3_m Model_4))
                   false)
                (= (le_m Model_4
                         (Epoch!val!0_m Model_4)
                         (Epoch!val!0_m Model_4))
                   true)
                (= (transfer_m Model_4
                                   (Epoch!val!1_m Model_4)
                                   (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                   (Epoch!val!2_m Model_4)
                                   (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                   (Epoch!val!3_m Model_4)
                                   (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                   (Epoch!val!0_m Model_4)
                                   (Node!val!0_m Model_4))
                   true)
                (= (held_m Model_4 (Node!val!0_m Model_4)) false)
                (= (ep_m Model_4 (Node!val!0_m Model_4))
                   (Epoch!val!1_m Model_4))
                (= (locked_m Model_4
                                 (Epoch!val!1_m Model_4)
                                 (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                 (Epoch!val!2_m Model_4)
                                 (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                 (Epoch!val!3_m Model_4)
                                 (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                 (Epoch!val!0_m Model_4)
                                 (Node!val!0_m Model_4))
                   false)
                a!1))
      (a!3 (and (= (ep_m Model_4 (Node!val!0_m Model_4))
                   (Epoch!val!0_m Model_4))
                (= (locked_m Model_4
                                  (Epoch!val!1_m Model_4)
                                  (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                  (Epoch!val!2_m Model_4)
                                  (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                  (Epoch!val!3_m Model_4)
                                  (Node!val!0_m Model_4))
                   false)
                (= (locked_m Model_4
                                  (Epoch!val!0_m Model_4)
                                  (Node!val!0_m Model_4))
                   true)
                (= (transfer_m Model_4
                                    (Epoch!val!1_m Model_4)
                                    (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                    (Epoch!val!2_m Model_4)
                                    (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                    (Epoch!val!3_m Model_4)
                                    (Node!val!0_m Model_4))
                   false)
                (= (transfer_m Model_4
                                    (Epoch!val!0_m Model_4)
                                    (Node!val!0_m Model_4))
                   true)
                (= (held_m Model_4 (Node!val!0_m Model_4)) true)
                a!1)))
  (=> a!2 a!3))))



(declare-fun DUMMYMODEL () ModelId)
(declare-fun N1 () Node)
(declare-fun E1 () Epoch)


(assert (not (= (inv DUMMYMODEL N1 E1) true)))

(check-synth)
        