
(set-logic ALL)

(set-option :random-seed 123)

(declare-sort ModelId)
(declare-sort StateId)
(declare-sort Node)
(declare-sort Epoch)

(declare-fun Node!val!3 () Node)
(declare-fun Node!val!0 () Node)
(declare-fun Node!val!2 () Node)
(declare-fun Node!val!1 () Node)

(declare-fun Epoch!val!2 () Epoch)
(declare-fun Epoch!val!1 () Epoch)
(declare-fun Epoch!val!0 () Epoch)
(declare-fun Epoch!val!4 () Epoch)
(declare-fun Epoch!val!3 () Epoch)

(declare-fun Model_38_ice () ModelId)
(declare-fun Model_6_pos () ModelId)
(declare-fun Model_25_ice () ModelId)
(declare-fun Model_37_ice () ModelId)
(declare-fun Model_28_ice () ModelId)
(declare-fun Model_33_pos () ModelId)
(declare-fun Model_27_ice () ModelId)
(declare-fun Model_26_ice () ModelId)
(declare-fun Model_29_ice () ModelId)
(declare-fun Model_30_ice () ModelId)
(declare-fun Model_0_pos () ModelId)
(declare-fun Model_32_ice () ModelId)
(declare-fun Model_24_ice () ModelId)
(declare-fun Model_35_ice () ModelId)
(declare-fun Model_34_ice () ModelId)
(declare-fun Model_31_ice () ModelId)
(declare-fun Model_2_pos () ModelId)
(declare-fun Model_22_neg () ModelId)
(declare-fun Model_23_ice () ModelId)
(declare-fun Model_36_ice () ModelId)

(declare-fun S2 () StateId)
(declare-fun S1 () StateId)
(declare-fun init () StateId)


(declare-fun held (ModelId StateId Node) Bool)
(declare-fun locked (ModelId StateId Epoch Node) Bool)
(declare-fun transfer (ModelId StateId Epoch Node) Bool)
(declare-fun ep (ModelId StateId Node) Epoch)
(declare-fun le (ModelId Epoch Epoch) Bool)
(declare-fun zero (ModelId) Epoch)
(declare-fun one (ModelId) Epoch)
(declare-fun first (ModelId) Node)

;(define-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
;   (=> (not (= n1 n2))
;       (or (not (locked m s e1 n1))
;           (not (locked m s e1 n2))
;       )))

(define-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
   (=> (and (locked m s e1 n1)
            (locked m s e1 n2))
       (= n1 n2)))


;(synth-fun inv ((m ModelId) (s StateId) (n1 Node) (n2 Node) (e1 Epoch)) Bool
;
;    ;; Declare the non-terminals that would be used in the grammar
;    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))
;
;    ;; Define the grammar for allowed implementations of inv
;    (
;        (Start Bool 
;            (
;                Atom
;                (and Atom Atom)
;                (or Atom Atom)
;                (=> Atom Atom)
;                (not Atom)
;            )
;        )
;
;        (Atom Bool 
;            (
;                (held m s Node_)
;                (locked m s Epoch_ Node_)
;                (transfer m s Epoch_ Node_)
;                (le m Epoch_ Epoch_)
;
;                (= Node_ Node_)
;                (= Epoch_ Epoch_)
;
;                (and Atom Atom)
;                (or Atom Atom)
;                (=> Atom Atom)
;                (not Atom)     
;            )
;        )
;
;        (Node_ Node
;            (
;                n1
;n2
;            )
;        )
;
;        (Epoch_ Epoch
;            (
;                e1
;                (ep m s Node_)
;            )
;        )
;    
;    )
;)

; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; False
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_0_pos, init, Node_1) ==
;                    (Node_1 == first(Model_0_pos)),
;                    Implies(Node_1 != first(Model_0_pos),
;                            ep(Model_0_pos, init, Node_1) ==
;                            zero(Model_0_pos)),
;                    ep(Model_0_pos, init, first(Model_0_pos)) ==
;                    one(Model_0_pos),
;                    transfer(Model_0_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_0_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_0_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_0_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_0_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_0_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_0_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_0_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_0_pos,
;                              zero(Model_0_pos),
;                              Epoch_1),
;                           one(Model_0_pos) !=
;                           zero(Model_0_pos))))),
;  Not(False)]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_0_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!0)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_0_pos init Node!val!0) Epoch!val!1)
     (= (held Model_0_pos init Node!val!0) true)
     (= (transfer Model_0_pos init Epoch!val!0 Node!val!0) false)
     (= (transfer Model_0_pos init Epoch!val!2 Node!val!0) false)
     (= (transfer Model_0_pos init Epoch!val!1 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!0 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!2 Node!val!0) false)
     (= (locked Model_0_pos init Epoch!val!1 Node!val!0) false)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_0_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_0_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_0_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_0_pos) Epoch!val!2)
     (= (one Model_0_pos) Epoch!val!1)
     (= (first Model_0_pos) Node!val!0)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_0_pos init Node!val!0 Node!val!0 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; (forall ((n1 Node)) (held Model_2_pos init n1))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_2_pos, init, Node_1) ==
;                    (Node_1 == first(Model_2_pos)),
;                    Implies(Node_1 != first(Model_2_pos),
;                            ep(Model_2_pos, init, Node_1) ==
;                            zero(Model_2_pos)),
;                    ep(Model_2_pos, init, first(Model_2_pos)) ==
;                    one(Model_2_pos),
;                    transfer(Model_2_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_2_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_2_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_2_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_2_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_2_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_2_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_2_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_2_pos,
;                              zero(Model_2_pos),
;                              Epoch_1),
;                           one(Model_2_pos) !=
;                           zero(Model_2_pos))))),
;  Not(ForAll(n1, held(Model_2_pos, init, n1)))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_2_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (not (= x!2 Node!val!1)))
;        Epoch!val!1
;        Epoch!val!2))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!2)))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_2_pos init Node!val!0) Epoch!val!1)
     (= (ep Model_2_pos init Node!val!1) Epoch!val!2)
     (= (held Model_2_pos init Node!val!0) false)
     (= (held Model_2_pos init Node!val!1) true)
     (= (transfer Model_2_pos init Epoch!val!0 Node!val!0) false)
     (= (transfer Model_2_pos init Epoch!val!0 Node!val!1) false)
     (= (transfer Model_2_pos init Epoch!val!2 Node!val!0) false)
     (= (transfer Model_2_pos init Epoch!val!2 Node!val!1) false)
     (= (transfer Model_2_pos init Epoch!val!1 Node!val!0) false)
     (= (transfer Model_2_pos init Epoch!val!1 Node!val!1) false)
     (= (locked Model_2_pos init Epoch!val!0 Node!val!0) false)
     (= (locked Model_2_pos init Epoch!val!0 Node!val!1) false)
     (= (locked Model_2_pos init Epoch!val!2 Node!val!0) false)
     (= (locked Model_2_pos init Epoch!val!2 Node!val!1) false)
     (= (locked Model_2_pos init Epoch!val!1 Node!val!0) false)
     (= (locked Model_2_pos init Epoch!val!1 Node!val!1) false)
     (= (le Model_2_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_2_pos Epoch!val!0 Epoch!val!2) true)
     (= (le Model_2_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_2_pos Epoch!val!2 Epoch!val!0) false)
     (= (le Model_2_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_2_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_2_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_2_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_2_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_2_pos) Epoch!val!1)
     (= (one Model_2_pos) Epoch!val!2)
     (= (first Model_2_pos) Node!val!1)
     (inv Model_2_pos init Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_2_pos init Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_2_pos init Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_2_pos init Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_2_pos init Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_2_pos init Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_2_pos init Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_2_pos init Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_2_pos init Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_2_pos init Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_2_pos init Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_2_pos init Node!val!1 Node!val!1 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (= n1 n2) (held Model_6_pos init n1) (held Model_6_pos init n2)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_6_pos, init, Node_1) ==
;                    (Node_1 == first(Model_6_pos)),
;                    Implies(Node_1 != first(Model_6_pos),
;                            ep(Model_6_pos, init, Node_1) ==
;                            zero(Model_6_pos)),
;                    ep(Model_6_pos, init, first(Model_6_pos)) ==
;                    one(Model_6_pos),
;                    transfer(Model_6_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_6_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_6_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_6_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_6_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_6_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_6_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_6_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_6_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_6_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_6_pos,
;                              zero(Model_6_pos),
;                              Epoch_1),
;                           one(Model_6_pos) !=
;                           zero(Model_6_pos))))),
;  Not(ForAll([n1, n2],
;             Or(n1 == n2,
;                held(Model_6_pos, init, n1),
;                held(Model_6_pos, init, n2))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_6_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!0))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!2))
;                       (not (= x!2 Node!val!0)))))
;         (a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (= x!2 Node!val!2)
;                        (not (= x!2 Node!val!0)))
;                   Epoch!val!1
;                   Epoch!val!0)))
;     (ite a!1 Epoch!val!2 a!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!2)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Node!val!2)
;        (not (= x!2 Node!val!0))))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_6_pos init Node!val!0) Epoch!val!2)
     (= (ep Model_6_pos init Node!val!1) Epoch!val!2)
     (= (ep Model_6_pos init Node!val!2) Epoch!val!1)
     (= (held Model_6_pos init Node!val!0) false)
     (= (held Model_6_pos init Node!val!1) false)
     (= (held Model_6_pos init Node!val!2) true)
     (= (transfer Model_6_pos init Epoch!val!0 Node!val!0) false)
     (= (transfer Model_6_pos init Epoch!val!0 Node!val!1) false)
     (= (transfer Model_6_pos init Epoch!val!0 Node!val!2) false)
     (= (transfer Model_6_pos init Epoch!val!2 Node!val!0) false)
     (= (transfer Model_6_pos init Epoch!val!2 Node!val!1) false)
     (= (transfer Model_6_pos init Epoch!val!2 Node!val!2) false)
     (= (transfer Model_6_pos init Epoch!val!1 Node!val!0) false)
     (= (transfer Model_6_pos init Epoch!val!1 Node!val!1) false)
     (= (transfer Model_6_pos init Epoch!val!1 Node!val!2) false)
     (= (locked Model_6_pos init Epoch!val!0 Node!val!0) false)
     (= (locked Model_6_pos init Epoch!val!0 Node!val!1) false)
     (= (locked Model_6_pos init Epoch!val!0 Node!val!2) false)
     (= (locked Model_6_pos init Epoch!val!2 Node!val!0) false)
     (= (locked Model_6_pos init Epoch!val!2 Node!val!1) false)
     (= (locked Model_6_pos init Epoch!val!2 Node!val!2) false)
     (= (locked Model_6_pos init Epoch!val!1 Node!val!0) false)
     (= (locked Model_6_pos init Epoch!val!1 Node!val!1) false)
     (= (locked Model_6_pos init Epoch!val!1 Node!val!2) false)
     (= (le Model_6_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_6_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_6_pos Epoch!val!0 Epoch!val!1) true)
     (= (le Model_6_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_6_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_6_pos Epoch!val!2 Epoch!val!1) true)
     (= (le Model_6_pos Epoch!val!1 Epoch!val!0) false)
     (= (le Model_6_pos Epoch!val!1 Epoch!val!2) false)
     (= (le Model_6_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_6_pos) Epoch!val!2)
     (= (one Model_6_pos) Epoch!val!1)
     (= (first Model_6_pos) Node!val!2)
     (inv Model_6_pos init Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_6_pos init Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_6_pos init Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_6_pos init Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_6_pos init Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_6_pos init Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_6_pos init Node!val!0 Node!val!2 Epoch!val!0)
     (inv Model_6_pos init Node!val!0 Node!val!2 Epoch!val!2)
     (inv Model_6_pos init Node!val!0 Node!val!2 Epoch!val!1)
     (inv Model_6_pos init Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_6_pos init Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_6_pos init Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_6_pos init Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_6_pos init Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_6_pos init Node!val!1 Node!val!1 Epoch!val!1)
     (inv Model_6_pos init Node!val!1 Node!val!2 Epoch!val!0)
     (inv Model_6_pos init Node!val!1 Node!val!2 Epoch!val!2)
     (inv Model_6_pos init Node!val!1 Node!val!2 Epoch!val!1)
     (inv Model_6_pos init Node!val!2 Node!val!0 Epoch!val!0)
     (inv Model_6_pos init Node!val!2 Node!val!0 Epoch!val!2)
     (inv Model_6_pos init Node!val!2 Node!val!0 Epoch!val!1)
     (inv Model_6_pos init Node!val!2 Node!val!1 Epoch!val!0)
     (inv Model_6_pos init Node!val!2 Node!val!1 Epoch!val!2)
     (inv Model_6_pos init Node!val!2 Node!val!1 Epoch!val!1)
     (inv Model_6_pos init Node!val!2 Node!val!2 Epoch!val!0)
     (inv Model_6_pos init Node!val!2 Node!val!2 Epoch!val!2)
     (inv Model_6_pos init Node!val!2 Node!val!2 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.NegativeCEX'>)
; True
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_22_neg, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_22_neg,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_22_neg,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_22_neg,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_22_neg,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_22_neg,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_22_neg,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_22_neg,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_22_neg,
;                              zero(Model_22_neg),
;                              Epoch_1),
;                           one(Model_22_neg) !=
;                           zero(Model_22_neg))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_22_neg,
;                           S1,
;                           ep(Model_22_neg, S1, n1),
;                           n1)),
;                transfer(Model_22_neg,
;                         S1,
;                         ep(Model_22_neg, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_22_neg, S1, e1, n1)),
;                le(Model_22_neg,
;                   e1,
;                   ep(Model_22_neg, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_22_neg, S1, e1, n1)),
;                locked(Model_22_neg,
;                       S1,
;                       ep(Model_22_neg, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_22_neg, S1, e1, n1)),
;                transfer(Model_22_neg, S1, e1, n1)))),
;  True,
;  Not(ForAll(Epoch_1,
;             ForAll(Node_1,
;                    ForAll(Node_2,
;                           Implies(And(locked(Model_22_neg,
;                                         S1,
;                                         Epoch_1,
;                                         Node_1),
;                                       locked(Model_22_neg,
;                                         S1,
;                                         Epoch_1,
;                                         Node_2)),
;                                   Node_1 == Node_2)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_22_neg () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (not (= x!2 Node!val!0)))
;        Epoch!val!2
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;             Epoch!val!1
;             Epoch!val!0)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!0))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_22_neg S1 Node!val!0) Epoch!val!1)
     (= (ep Model_22_neg S1 Node!val!1) Epoch!val!2)
     (= (held Model_22_neg S1 Node!val!0) false)
     (= (held Model_22_neg S1 Node!val!1) false)
     (= (transfer Model_22_neg S1 Epoch!val!3 Node!val!0) false)
     (= (transfer Model_22_neg S1 Epoch!val!3 Node!val!1) false)
     (= (transfer Model_22_neg S1 Epoch!val!0 Node!val!0) true)
     (= (transfer Model_22_neg S1 Epoch!val!0 Node!val!1) true)
     (= (transfer Model_22_neg S1 Epoch!val!4 Node!val!0) false)
     (= (transfer Model_22_neg S1 Epoch!val!4 Node!val!1) false)
     (= (transfer Model_22_neg S1 Epoch!val!2 Node!val!0) false)
     (= (transfer Model_22_neg S1 Epoch!val!2 Node!val!1) true)
     (= (transfer Model_22_neg S1 Epoch!val!1 Node!val!0) true)
     (= (transfer Model_22_neg S1 Epoch!val!1 Node!val!1) false)
     (= (locked Model_22_neg S1 Epoch!val!3 Node!val!0) false)
     (= (locked Model_22_neg S1 Epoch!val!3 Node!val!1) false)
     (= (locked Model_22_neg S1 Epoch!val!0 Node!val!0) true)
     (= (locked Model_22_neg S1 Epoch!val!0 Node!val!1) true)
     (= (locked Model_22_neg S1 Epoch!val!4 Node!val!0) false)
     (= (locked Model_22_neg S1 Epoch!val!4 Node!val!1) false)
     (= (locked Model_22_neg S1 Epoch!val!2 Node!val!0) false)
     (= (locked Model_22_neg S1 Epoch!val!2 Node!val!1) true)
     (= (locked Model_22_neg S1 Epoch!val!1 Node!val!0) true)
     (= (locked Model_22_neg S1 Epoch!val!1 Node!val!1) false)
     (= (le Model_22_neg Epoch!val!3 Epoch!val!3) true)
     (= (le Model_22_neg Epoch!val!3 Epoch!val!0) false)
     (= (le Model_22_neg Epoch!val!3 Epoch!val!4) false)
     (= (le Model_22_neg Epoch!val!3 Epoch!val!2) false)
     (= (le Model_22_neg Epoch!val!3 Epoch!val!1) false)
     (= (le Model_22_neg Epoch!val!0 Epoch!val!3) true)
     (= (le Model_22_neg Epoch!val!0 Epoch!val!0) true)
     (= (le Model_22_neg Epoch!val!0 Epoch!val!4) false)
     (= (le Model_22_neg Epoch!val!0 Epoch!val!2) true)
     (= (le Model_22_neg Epoch!val!0 Epoch!val!1) true)
     (= (le Model_22_neg Epoch!val!4 Epoch!val!3) true)
     (= (le Model_22_neg Epoch!val!4 Epoch!val!0) true)
     (= (le Model_22_neg Epoch!val!4 Epoch!val!4) true)
     (= (le Model_22_neg Epoch!val!4 Epoch!val!2) true)
     (= (le Model_22_neg Epoch!val!4 Epoch!val!1) true)
     (= (le Model_22_neg Epoch!val!2 Epoch!val!3) true)
     (= (le Model_22_neg Epoch!val!2 Epoch!val!0) false)
     (= (le Model_22_neg Epoch!val!2 Epoch!val!4) false)
     (= (le Model_22_neg Epoch!val!2 Epoch!val!2) true)
     (= (le Model_22_neg Epoch!val!2 Epoch!val!1) true)
     (= (le Model_22_neg Epoch!val!1 Epoch!val!3) true)
     (= (le Model_22_neg Epoch!val!1 Epoch!val!0) false)
     (= (le Model_22_neg Epoch!val!1 Epoch!val!4) false)
     (= (le Model_22_neg Epoch!val!1 Epoch!val!2) false)
     (= (le Model_22_neg Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_22_neg) Epoch!val!4)
     (= (one Model_22_neg) Epoch!val!3)
     (= (first Model_22_neg) Node!val!0)
     (not (and (inv Model_22_neg S1 Node!val!0 Node!val!0 Epoch!val!3)
               (inv Model_22_neg S1 Node!val!0 Node!val!0 Epoch!val!0)
               (inv Model_22_neg S1 Node!val!0 Node!val!0 Epoch!val!4)
               (inv Model_22_neg S1 Node!val!0 Node!val!0 Epoch!val!2)
               (inv Model_22_neg S1 Node!val!0 Node!val!0 Epoch!val!1)
               (inv Model_22_neg S1 Node!val!0 Node!val!1 Epoch!val!3)
               (inv Model_22_neg S1 Node!val!0 Node!val!1 Epoch!val!0)
               (inv Model_22_neg S1 Node!val!0 Node!val!1 Epoch!val!4)
               (inv Model_22_neg S1 Node!val!0 Node!val!1 Epoch!val!2)
               (inv Model_22_neg S1 Node!val!0 Node!val!1 Epoch!val!1)
               (inv Model_22_neg S1 Node!val!1 Node!val!0 Epoch!val!3)
               (inv Model_22_neg S1 Node!val!1 Node!val!0 Epoch!val!0)
               (inv Model_22_neg S1 Node!val!1 Node!val!0 Epoch!val!4)
               (inv Model_22_neg S1 Node!val!1 Node!val!0 Epoch!val!2)
               (inv Model_22_neg S1 Node!val!1 Node!val!0 Epoch!val!1)
               (inv Model_22_neg S1 Node!val!1 Node!val!1 Epoch!val!3)
               (inv Model_22_neg S1 Node!val!1 Node!val!1 Epoch!val!0)
               (inv Model_22_neg S1 Node!val!1 Node!val!1 Epoch!val!4)
               (inv Model_22_neg S1 Node!val!1 Node!val!1 Epoch!val!2)
               (inv Model_22_neg S1 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (transfer Model_23_ice S1 e1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_23_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_23_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_23_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_23_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_23_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_23_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_23_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_23_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_23_ice,
;                              zero(Model_23_ice),
;                              Epoch_1),
;                           one(Model_23_ice) !=
;                           zero(Model_23_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_23_ice,
;                           S1,
;                           ep(Model_23_ice, S1, n1),
;                           n1)),
;                transfer(Model_23_ice,
;                         S1,
;                         ep(Model_23_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_23_ice, S1, e1, n1)),
;                le(Model_23_ice,
;                   e1,
;                   ep(Model_23_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_23_ice, S1, e1, n1)),
;                locked(Model_23_ice,
;                       S1,
;                       ep(Model_23_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_23_ice, S1, e1, n1)),
;                transfer(Model_23_ice, S1, e1, n1)))),
;  ForAll([n1, e1], Not(transfer(Model_23_ice, S1, e1, n1))),
;  Not(ForAll([n1, e1],
;             Not(transfer(Model_23_ice, S2, e1, n1)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_23_ice, S1, Node_1),
;                               Not(le(Model_23_ice,
;                                      Epoch_1,
;                                      ep(Model_23_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_23_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_23_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_23_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_23_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_23_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_23_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_23_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_23_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_23_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!3) (= x!2 Epoch!val!3))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!3))
;        (= x!3 Node!val!1)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_23_ice S1 Node!val!0) Epoch!val!1)
                (= (ep Model_23_ice S1 Node!val!1) Epoch!val!1)
                (= (held Model_23_ice S1 Node!val!0) true)
                (= (held Model_23_ice S1 Node!val!1) false)
                (= (transfer Model_23_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_23_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_23_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_23_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_23_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_23_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_23_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_23_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_23_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_23_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_23_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_23_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_23_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_23_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_23_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_23_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_23_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_23_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_23_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_23_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_23_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_23_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_23_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_23_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_23_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_23_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_23_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_23_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_23_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_23_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_23_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_23_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_23_ice) Epoch!val!2)
                (= (one Model_23_ice) Epoch!val!3)
                (= (first Model_23_ice) Node!val!0)))
      (a!2 (and (inv Model_23_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_23_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_23_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_23_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_23_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_23_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_23_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_23_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_23_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_23_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_23_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_23_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_23_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_23_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_23_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_23_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_23_ice S2 Node!val!0) Epoch!val!1)
           (= (ep Model_23_ice S2 Node!val!1) Epoch!val!1)
           (= (held Model_23_ice S2 Node!val!0) false)
           (= (held Model_23_ice S2 Node!val!1) false)
           (= (transfer Model_23_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_23_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_23_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_23_ice S2 Epoch!val!0 Node!val!1) true)
           (= (transfer Model_23_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_23_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_23_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_23_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_23_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_23_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_23_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_23_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_23_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_23_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_23_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_23_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_23_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_23_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_23_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_23_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_23_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_23_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_23_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_23_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_23_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_23_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_23_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_23_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_23_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_23_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_23_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_23_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node)) (not (locked Model_24_ice S1 (ep Model_24_ice S1 n1) n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_24_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_24_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_24_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_24_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_24_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_24_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_24_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_24_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_24_ice,
;                              zero(Model_24_ice),
;                              Epoch_1),
;                           one(Model_24_ice) !=
;                           zero(Model_24_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_24_ice,
;                           S1,
;                           ep(Model_24_ice, S1, n1),
;                           n1)),
;                transfer(Model_24_ice,
;                         S1,
;                         ep(Model_24_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_24_ice, S1, e1, n1)),
;                le(Model_24_ice,
;                   e1,
;                   ep(Model_24_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_24_ice, S1, e1, n1)),
;                locked(Model_24_ice,
;                       S1,
;                       ep(Model_24_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_24_ice, S1, e1, n1)),
;                transfer(Model_24_ice, S1, e1, n1)))),
;  ForAll(n1,
;         Not(locked(Model_24_ice,
;                    S1,
;                    ep(Model_24_ice, S1, n1),
;                    n1))),
;  Not(ForAll(n1,
;             Not(locked(Model_24_ice,
;                        S2,
;                        ep(Model_24_ice, S2, n1),
;                        n1)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_24_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_24_ice,
;                               Epoch_1,
;                               ep(Model_24_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_24_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_24_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_24_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_24_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_24_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_24_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_24_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_24_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_24_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!3
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!1))))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_24_ice S1 Node!val!0) Epoch!val!0)
                (= (held Model_24_ice S1 Node!val!0) false)
                (= (transfer Model_24_ice S1 Epoch!val!3 Node!val!0) true)
                (= (transfer Model_24_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_24_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_24_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_24_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_24_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_24_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_24_ice S1 Epoch!val!1 Node!val!0) false)
                (= (le Model_24_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_24_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_24_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_24_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_24_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_24_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_24_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_24_ice Epoch!val!0 Epoch!val!1) true)
                (= (le Model_24_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_24_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_24_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_24_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_24_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_24_ice Epoch!val!1 Epoch!val!0) false)
                (= (le Model_24_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_24_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_24_ice) Epoch!val!2)
                (= (one Model_24_ice) Epoch!val!1)
                (= (first Model_24_ice) Node!val!0)))
      (a!2 (and (inv Model_24_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_24_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_24_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_24_ice S1 Node!val!0 Node!val!0 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_24_ice S2 Node!val!0) Epoch!val!3)
           (= (held Model_24_ice S2 Node!val!0) true)
           (= (transfer Model_24_ice S2 Epoch!val!3 Node!val!0) true)
           (= (transfer Model_24_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_24_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_24_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_24_ice S2 Epoch!val!3 Node!val!0) true)
           (= (locked Model_24_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_24_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_24_ice S2 Epoch!val!1 Node!val!0) false)
           (inv Model_24_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_24_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_24_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_24_ice S2 Node!val!0 Node!val!0 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node))
;   (or (not (locked Model_25_ice S1 (ep Model_25_ice S1 n1) n1))
;       (held Model_25_ice S1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_25_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_25_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_25_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_25_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_25_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_25_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_25_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_25_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_25_ice,
;                              zero(Model_25_ice),
;                              Epoch_1),
;                           one(Model_25_ice) !=
;                           zero(Model_25_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_25_ice,
;                           S1,
;                           ep(Model_25_ice, S1, n1),
;                           n1)),
;                transfer(Model_25_ice,
;                         S1,
;                         ep(Model_25_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_25_ice, S1, e1, n1)),
;                le(Model_25_ice,
;                   e1,
;                   ep(Model_25_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_25_ice, S1, e1, n1)),
;                locked(Model_25_ice,
;                       S1,
;                       ep(Model_25_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_25_ice, S1, e1, n1)),
;                transfer(Model_25_ice, S1, e1, n1)))),
;  ForAll(n1,
;         Or(Not(locked(Model_25_ice,
;                       S1,
;                       ep(Model_25_ice, S1, n1),
;                       n1)),
;            held(Model_25_ice, S1, n1))),
;  Not(ForAll(n1,
;             Or(Not(locked(Model_25_ice,
;                           S2,
;                           ep(Model_25_ice, S2, n1),
;                           n1)),
;                held(Model_25_ice, S2, n1)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_25_ice, S1, Node_1),
;                               Not(le(Model_25_ice,
;                                      Epoch_1,
;                                      ep(Model_25_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_25_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_25_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_25_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_25_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_25_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_25_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_25_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_25_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_25_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
;        Epoch!val!1
;        Epoch!val!0))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_25_ice S1 Node!val!0) Epoch!val!1)
                (= (held Model_25_ice S1 Node!val!0) true)
                (= (transfer Model_25_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_25_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_25_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_25_ice S1 Epoch!val!1 Node!val!0) true)
                (= (locked Model_25_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_25_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_25_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_25_ice S1 Epoch!val!1 Node!val!0) true)
                (= (le Model_25_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_25_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_25_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_25_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_25_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_25_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_25_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_25_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_25_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_25_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_25_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_25_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_25_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_25_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_25_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_25_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_25_ice) Epoch!val!2)
                (= (one Model_25_ice) Epoch!val!3)
                (= (first Model_25_ice) Node!val!0)))
      (a!2 (and (inv Model_25_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_25_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_25_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_25_ice S1 Node!val!0 Node!val!0 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_25_ice S2 Node!val!0) Epoch!val!1)
           (= (held Model_25_ice S2 Node!val!0) false)
           (= (transfer Model_25_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_25_ice S2 Epoch!val!0 Node!val!0) true)
           (= (transfer Model_25_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_25_ice S2 Epoch!val!1 Node!val!0) true)
           (= (locked Model_25_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_25_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_25_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_25_ice S2 Epoch!val!1 Node!val!0) true)
           (inv Model_25_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_25_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_25_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_25_ice S2 Node!val!0 Node!val!0 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (locked Model_26_ice S1 e1 n1)) (= e1 (ep Model_26_ice S1 n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_26_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_26_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_26_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_26_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_26_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_26_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_26_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_26_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_26_ice,
;                              zero(Model_26_ice),
;                              Epoch_1),
;                           one(Model_26_ice) !=
;                           zero(Model_26_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_26_ice,
;                           S1,
;                           ep(Model_26_ice, S1, n1),
;                           n1)),
;                transfer(Model_26_ice,
;                         S1,
;                         ep(Model_26_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S1, e1, n1)),
;                le(Model_26_ice,
;                   e1,
;                   ep(Model_26_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S1, e1, n1)),
;                locked(Model_26_ice,
;                       S1,
;                       ep(Model_26_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S1, e1, n1)),
;                transfer(Model_26_ice, S1, e1, n1)))),
;  ForAll([n1, e1],
;         Or(Not(locked(Model_26_ice, S1, e1, n1)),
;            e1 == ep(Model_26_ice, S1, n1))),
;  Not(ForAll([n1, e1],
;             Or(Not(locked(Model_26_ice, S2, e1, n1)),
;                e1 == ep(Model_26_ice, S2, n1)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_26_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_26_ice,
;                               Epoch_1,
;                               ep(Model_26_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_26_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_26_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_26_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_26_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_26_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_26_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_26_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_26_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; (define-fun Model_26_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0))
;        Epoch!val!0
;        (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1))
;             Epoch!val!1
;             Epoch!val!3)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_26_ice S1 Node!val!0) Epoch!val!1)
                (= (held Model_26_ice S1 Node!val!0) false)
                (= (transfer Model_26_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_26_ice S1 Epoch!val!0 Node!val!0) true)
                (= (transfer Model_26_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_26_ice S1 Epoch!val!1 Node!val!0) true)
                (= (locked Model_26_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_26_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_26_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_26_ice S1 Epoch!val!1 Node!val!0) true)
                (= (le Model_26_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_26_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_26_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_26_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_26_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_26_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_26_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_26_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_26_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_26_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_26_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_26_ice Epoch!val!2 Epoch!val!1) false)
                (= (le Model_26_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_26_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_26_ice Epoch!val!1 Epoch!val!2) true)
                (= (le Model_26_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_26_ice) Epoch!val!3)
                (= (one Model_26_ice) Epoch!val!2)
                (= (first Model_26_ice) Node!val!0)))
      (a!2 (and (inv Model_26_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_26_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_26_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_26_ice S1 Node!val!0 Node!val!0 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_26_ice S2 Node!val!0) Epoch!val!0)
           (= (held Model_26_ice S2 Node!val!0) true)
           (= (transfer Model_26_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_26_ice S2 Epoch!val!0 Node!val!0) true)
           (= (transfer Model_26_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_26_ice S2 Epoch!val!1 Node!val!0) true)
           (= (locked Model_26_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_26_ice S2 Epoch!val!0 Node!val!0) true)
           (= (locked Model_26_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_26_ice S2 Epoch!val!1 Node!val!0) true)
           (inv Model_26_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_26_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_26_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_26_ice S2 Node!val!0 Node!val!0 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n3 Node))
;   (or (held Model_27_ice S1 n1)
;       (le Model_27_ice (ep Model_27_ice S1 n1) (ep Model_27_ice S1 n3))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_27_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_27_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_27_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_27_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_27_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_27_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_27_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_27_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_27_ice,
;                              zero(Model_27_ice),
;                              Epoch_1),
;                           one(Model_27_ice) !=
;                           zero(Model_27_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_27_ice,
;                           S1,
;                           ep(Model_27_ice, S1, n1),
;                           n1)),
;                transfer(Model_27_ice,
;                         S1,
;                         ep(Model_27_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S1, e1, n1)),
;                le(Model_27_ice,
;                   e1,
;                   ep(Model_27_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S1, e1, n1)),
;                locked(Model_27_ice,
;                       S1,
;                       ep(Model_27_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_27_ice, S1, e1, n1)),
;                transfer(Model_27_ice, S1, e1, n1)))),
;  ForAll([n1, n3],
;         Or(held(Model_27_ice, S1, n1),
;            le(Model_27_ice,
;               ep(Model_27_ice, S1, n1),
;               ep(Model_27_ice, S1, n3)))),
;  Not(ForAll([n1, n3],
;             Or(held(Model_27_ice, S2, n1),
;                le(Model_27_ice,
;                   ep(Model_27_ice, S2, n1),
;                   ep(Model_27_ice, S2, n3))))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_27_ice, S1, Node_1),
;                               Not(le(Model_27_ice,
;                                      Epoch_1,
;                                      ep(Model_27_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_27_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_27_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_27_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_27_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_27_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_27_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_27_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_27_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_27_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1)
;                       (not (= x!2 Node!val!2)))))
;         (a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1))
;                        (not (= x!2 Node!val!2)))
;                   Epoch!val!2
;                   Epoch!val!4)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1))
;               (not (= x!2 Node!val!2)))
;          Epoch!val!2
;          (ite a!1 Epoch!val!1 a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Node!val!1))
;            (not (= x!2 Node!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!1)
;            (not (= x!2 Node!val!2)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (= x!3 Node!val!2)))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_27_ice S1 Node!val!0) Epoch!val!2)
                (= (ep Model_27_ice S1 Node!val!1) Epoch!val!1)
                (= (ep Model_27_ice S1 Node!val!2) Epoch!val!4)
                (= (held Model_27_ice S1 Node!val!0) true)
                (= (held Model_27_ice S1 Node!val!1) true)
                (= (held Model_27_ice S1 Node!val!2) false)
                (= (transfer Model_27_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_27_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_27_ice S1 Epoch!val!3 Node!val!2) false)
                (= (transfer Model_27_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_27_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_27_ice S1 Epoch!val!0 Node!val!2) false)
                (= (transfer Model_27_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_27_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_27_ice S1 Epoch!val!4 Node!val!2) false)
                (= (transfer Model_27_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_27_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_27_ice S1 Epoch!val!2 Node!val!2) false)
                (= (transfer Model_27_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_27_ice S1 Epoch!val!1 Node!val!1) false)
                (= (transfer Model_27_ice S1 Epoch!val!1 Node!val!2) false)
                (= (locked Model_27_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_27_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_27_ice S1 Epoch!val!3 Node!val!2) false)
                (= (locked Model_27_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_27_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_27_ice S1 Epoch!val!0 Node!val!2) false)
                (= (locked Model_27_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_27_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_27_ice S1 Epoch!val!4 Node!val!2) false)
                (= (locked Model_27_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_27_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_27_ice S1 Epoch!val!2 Node!val!2) false)
                (= (locked Model_27_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_27_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_27_ice S1 Epoch!val!1 Node!val!2) false)
                (= (le Model_27_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_27_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_27_ice Epoch!val!3 Epoch!val!4) false)
                (= (le Model_27_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_27_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_27_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_27_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_27_ice Epoch!val!0 Epoch!val!4) false)
                (= (le Model_27_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_27_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_27_ice Epoch!val!4 Epoch!val!3) true)
                (= (le Model_27_ice Epoch!val!4 Epoch!val!0) true)
                (= (le Model_27_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_27_ice Epoch!val!4 Epoch!val!2) true)
                (= (le Model_27_ice Epoch!val!4 Epoch!val!1) true)
                (= (le Model_27_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_27_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_27_ice Epoch!val!2 Epoch!val!4) false)
                (= (le Model_27_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_27_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_27_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_27_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_27_ice Epoch!val!1 Epoch!val!4) false)
                (= (le Model_27_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_27_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_27_ice) Epoch!val!4)
                (= (one Model_27_ice) Epoch!val!3)
                (= (first Model_27_ice) Node!val!0)))
      (a!2 (and (inv Model_27_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!0 Node!val!2 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!0 Node!val!2 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!0 Node!val!2 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!0 Node!val!2 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!0 Node!val!2 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!1 Node!val!1 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!1 Node!val!2 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!1 Node!val!2 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!1 Node!val!2 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!1 Node!val!2 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!1 Node!val!2 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!2 Node!val!0 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!2 Node!val!0 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!2 Node!val!0 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!2 Node!val!0 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!2 Node!val!0 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!2 Node!val!1 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!2 Node!val!1 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!2 Node!val!1 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!2 Node!val!1 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!2 Node!val!1 Epoch!val!1)
                (inv Model_27_ice S1 Node!val!2 Node!val!2 Epoch!val!3)
                (inv Model_27_ice S1 Node!val!2 Node!val!2 Epoch!val!0)
                (inv Model_27_ice S1 Node!val!2 Node!val!2 Epoch!val!4)
                (inv Model_27_ice S1 Node!val!2 Node!val!2 Epoch!val!2)
                (inv Model_27_ice S1 Node!val!2 Node!val!2 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_27_ice S2 Node!val!0) Epoch!val!2)
           (= (ep Model_27_ice S2 Node!val!1) Epoch!val!1)
           (= (ep Model_27_ice S2 Node!val!2) Epoch!val!4)
           (= (held Model_27_ice S2 Node!val!0) true)
           (= (held Model_27_ice S2 Node!val!1) false)
           (= (held Model_27_ice S2 Node!val!2) false)
           (= (transfer Model_27_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_27_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_27_ice S2 Epoch!val!3 Node!val!2) false)
           (= (transfer Model_27_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_27_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_27_ice S2 Epoch!val!0 Node!val!2) true)
           (= (transfer Model_27_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_27_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_27_ice S2 Epoch!val!4 Node!val!2) false)
           (= (transfer Model_27_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_27_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_27_ice S2 Epoch!val!2 Node!val!2) false)
           (= (transfer Model_27_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_27_ice S2 Epoch!val!1 Node!val!1) false)
           (= (transfer Model_27_ice S2 Epoch!val!1 Node!val!2) false)
           (= (locked Model_27_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_27_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_27_ice S2 Epoch!val!3 Node!val!2) false)
           (= (locked Model_27_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_27_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_27_ice S2 Epoch!val!0 Node!val!2) false)
           (= (locked Model_27_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_27_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_27_ice S2 Epoch!val!4 Node!val!2) false)
           (= (locked Model_27_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_27_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_27_ice S2 Epoch!val!2 Node!val!2) false)
           (= (locked Model_27_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_27_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_27_ice S2 Epoch!val!1 Node!val!2) false)
           (inv Model_27_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!0 Node!val!2 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!0 Node!val!2 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!0 Node!val!2 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!0 Node!val!2 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!0 Node!val!2 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!1 Node!val!1 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!1 Node!val!2 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!1 Node!val!2 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!1 Node!val!2 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!1 Node!val!2 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!1 Node!val!2 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!2 Node!val!0 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!2 Node!val!0 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!2 Node!val!0 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!2 Node!val!0 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!2 Node!val!0 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!2 Node!val!1 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!2 Node!val!1 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!2 Node!val!1 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!2 Node!val!1 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!2 Node!val!1 Epoch!val!1)
           (inv Model_27_ice S2 Node!val!2 Node!val!2 Epoch!val!3)
           (inv Model_27_ice S2 Node!val!2 Node!val!2 Epoch!val!0)
           (inv Model_27_ice S2 Node!val!2 Node!val!2 Epoch!val!4)
           (inv Model_27_ice S2 Node!val!2 Node!val!2 Epoch!val!2)
           (inv Model_27_ice S2 Node!val!2 Node!val!2 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n2 Node) (n3 Node))
;   (or (not (locked Model_28_ice S1 (ep Model_28_ice S1 n3) n3))
;       (= (ep Model_28_ice S1 n2) (ep Model_28_ice S1 n3))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_28_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_28_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_28_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_28_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_28_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_28_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_28_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_28_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_28_ice,
;                              zero(Model_28_ice),
;                              Epoch_1),
;                           one(Model_28_ice) !=
;                           zero(Model_28_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_28_ice,
;                           S1,
;                           ep(Model_28_ice, S1, n1),
;                           n1)),
;                transfer(Model_28_ice,
;                         S1,
;                         ep(Model_28_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S1, e1, n1)),
;                le(Model_28_ice,
;                   e1,
;                   ep(Model_28_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S1, e1, n1)),
;                locked(Model_28_ice,
;                       S1,
;                       ep(Model_28_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_28_ice, S1, e1, n1)),
;                transfer(Model_28_ice, S1, e1, n1)))),
;  ForAll([n2, n3],
;         Or(Not(locked(Model_28_ice,
;                       S1,
;                       ep(Model_28_ice, S1, n3),
;                       n3)),
;            ep(Model_28_ice, S1, n2) ==
;            ep(Model_28_ice, S1, n3))),
;  Not(ForAll([n2, n3],
;             Or(Not(locked(Model_28_ice,
;                           S2,
;                           ep(Model_28_ice, S2, n3),
;                           n3)),
;                ep(Model_28_ice, S2, n2) ==
;                ep(Model_28_ice, S2, n3)))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_28_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_28_ice,
;                               Epoch_1,
;                               ep(Model_28_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_28_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_28_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_28_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_28_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_28_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_28_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_28_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_28_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_28_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!1
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1))
;     Epoch!val!0
;     Epoch!val!2)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!1)
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!4))
;        (not (= x!2 Epoch!val!2))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_28_ice S1 Node!val!0) Epoch!val!2)
                (= (ep Model_28_ice S1 Node!val!1) Epoch!val!0)
                (= (held Model_28_ice S1 Node!val!0) false)
                (= (held Model_28_ice S1 Node!val!1) false)
                (= (transfer Model_28_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_28_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_28_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_28_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_28_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_28_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_28_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_28_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_28_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_28_ice S1 Epoch!val!1 Node!val!1) true)
                (= (locked Model_28_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_28_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_28_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_28_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_28_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_28_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_28_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_28_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_28_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_28_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_28_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_28_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_28_ice Epoch!val!3 Epoch!val!4) false)
                (= (le Model_28_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_28_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_28_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_28_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_28_ice Epoch!val!0 Epoch!val!4) false)
                (= (le Model_28_ice Epoch!val!0 Epoch!val!2) true)
                (= (le Model_28_ice Epoch!val!0 Epoch!val!1) true)
                (= (le Model_28_ice Epoch!val!4 Epoch!val!3) true)
                (= (le Model_28_ice Epoch!val!4 Epoch!val!0) true)
                (= (le Model_28_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_28_ice Epoch!val!4 Epoch!val!2) true)
                (= (le Model_28_ice Epoch!val!4 Epoch!val!1) true)
                (= (le Model_28_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_28_ice Epoch!val!2 Epoch!val!0) false)
                (= (le Model_28_ice Epoch!val!2 Epoch!val!4) false)
                (= (le Model_28_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_28_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_28_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_28_ice Epoch!val!1 Epoch!val!0) false)
                (= (le Model_28_ice Epoch!val!1 Epoch!val!4) false)
                (= (le Model_28_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_28_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_28_ice) Epoch!val!4)
                (= (one Model_28_ice) Epoch!val!3)
                (= (first Model_28_ice) Node!val!0)))
      (a!2 (and (inv Model_28_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_28_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_28_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_28_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_28_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_28_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_28_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_28_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_28_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_28_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_28_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_28_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_28_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_28_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_28_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_28_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_28_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_28_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_28_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_28_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_28_ice S2 Node!val!0) Epoch!val!2)
           (= (ep Model_28_ice S2 Node!val!1) Epoch!val!1)
           (= (held Model_28_ice S2 Node!val!0) false)
           (= (held Model_28_ice S2 Node!val!1) true)
           (= (transfer Model_28_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_28_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_28_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_28_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_28_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_28_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_28_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_28_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_28_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_28_ice S2 Epoch!val!1 Node!val!1) true)
           (= (locked Model_28_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_28_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_28_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_28_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_28_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_28_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_28_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_28_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_28_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_28_ice S2 Epoch!val!1 Node!val!1) true)
           (inv Model_28_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_28_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_28_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_28_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_28_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_28_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_28_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_28_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_28_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_28_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_28_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_28_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_28_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_28_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_28_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_28_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_28_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_28_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_28_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_28_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n2 Node) (n3 Node))
;   (or (= n3 n2)
;       (not (transfer Model_29_ice S1 (ep Model_29_ice S1 n2) n2))
;       (held Model_29_ice S1 n2)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_29_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_29_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_29_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_29_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_29_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_29_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_29_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_29_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_29_ice,
;                              zero(Model_29_ice),
;                              Epoch_1),
;                           one(Model_29_ice) !=
;                           zero(Model_29_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_29_ice,
;                           S1,
;                           ep(Model_29_ice, S1, n1),
;                           n1)),
;                transfer(Model_29_ice,
;                         S1,
;                         ep(Model_29_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S1, e1, n1)),
;                le(Model_29_ice,
;                   e1,
;                   ep(Model_29_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S1, e1, n1)),
;                locked(Model_29_ice,
;                       S1,
;                       ep(Model_29_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_29_ice, S1, e1, n1)),
;                transfer(Model_29_ice, S1, e1, n1)))),
;  ForAll([n2, n3],
;         Or(n3 == n2,
;            Not(transfer(Model_29_ice,
;                         S1,
;                         ep(Model_29_ice, S1, n2),
;                         n2)),
;            held(Model_29_ice, S1, n2))),
;  Not(ForAll([n2, n3],
;             Or(n3 == n2,
;                Not(transfer(Model_29_ice,
;                             S2,
;                             ep(Model_29_ice, S2, n2),
;                             n2)),
;                held(Model_29_ice, S2, n2)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_29_ice, S1, Node_1),
;                               Not(le(Model_29_ice,
;                                      Epoch_1,
;                                      ep(Model_29_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_29_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_29_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_29_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_29_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_29_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_29_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_29_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_29_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun Model_29_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!1))))))
;     (ite a!1 Epoch!val!3 Epoch!val!0)))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!1))
;        (= x!3 Node!val!2)
;        (not (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_29_ice S1 Node!val!0) Epoch!val!0)
                (= (ep Model_29_ice S1 Node!val!1) Epoch!val!0)
                (= (ep Model_29_ice S1 Node!val!2) Epoch!val!3)
                (= (held Model_29_ice S1 Node!val!0) false)
                (= (held Model_29_ice S1 Node!val!1) true)
                (= (held Model_29_ice S1 Node!val!2) false)
                (= (transfer Model_29_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_29_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_29_ice S1 Epoch!val!3 Node!val!2) false)
                (= (transfer Model_29_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_29_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_29_ice S1 Epoch!val!0 Node!val!2) false)
                (= (transfer Model_29_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_29_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_29_ice S1 Epoch!val!2 Node!val!2) false)
                (= (transfer Model_29_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_29_ice S1 Epoch!val!1 Node!val!1) false)
                (= (transfer Model_29_ice S1 Epoch!val!1 Node!val!2) false)
                (= (locked Model_29_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_29_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_29_ice S1 Epoch!val!3 Node!val!2) false)
                (= (locked Model_29_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_29_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_29_ice S1 Epoch!val!0 Node!val!2) false)
                (= (locked Model_29_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_29_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_29_ice S1 Epoch!val!2 Node!val!2) false)
                (= (locked Model_29_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_29_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_29_ice S1 Epoch!val!1 Node!val!2) false)
                (= (le Model_29_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_29_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_29_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_29_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_29_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_29_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_29_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_29_ice Epoch!val!0 Epoch!val!1) true)
                (= (le Model_29_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_29_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_29_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_29_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_29_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_29_ice Epoch!val!1 Epoch!val!0) false)
                (= (le Model_29_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_29_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_29_ice) Epoch!val!2)
                (= (one Model_29_ice) Epoch!val!1)
                (= (first Model_29_ice) Node!val!0)))
      (a!2 (and (inv Model_29_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!0 Node!val!2 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!0 Node!val!2 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!0 Node!val!2 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!0 Node!val!2 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!1 Node!val!1 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!1 Node!val!2 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!1 Node!val!2 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!1 Node!val!2 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!1 Node!val!2 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!2 Node!val!0 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!2 Node!val!0 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!2 Node!val!0 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!2 Node!val!0 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!2 Node!val!1 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!2 Node!val!1 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!2 Node!val!1 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!2 Node!val!1 Epoch!val!1)
                (inv Model_29_ice S1 Node!val!2 Node!val!2 Epoch!val!3)
                (inv Model_29_ice S1 Node!val!2 Node!val!2 Epoch!val!0)
                (inv Model_29_ice S1 Node!val!2 Node!val!2 Epoch!val!2)
                (inv Model_29_ice S1 Node!val!2 Node!val!2 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_29_ice S2 Node!val!0) Epoch!val!0)
           (= (ep Model_29_ice S2 Node!val!1) Epoch!val!0)
           (= (ep Model_29_ice S2 Node!val!2) Epoch!val!3)
           (= (held Model_29_ice S2 Node!val!0) false)
           (= (held Model_29_ice S2 Node!val!1) false)
           (= (held Model_29_ice S2 Node!val!2) false)
           (= (transfer Model_29_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_29_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_29_ice S2 Epoch!val!3 Node!val!2) true)
           (= (transfer Model_29_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_29_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_29_ice S2 Epoch!val!0 Node!val!2) false)
           (= (transfer Model_29_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_29_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_29_ice S2 Epoch!val!2 Node!val!2) false)
           (= (transfer Model_29_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_29_ice S2 Epoch!val!1 Node!val!1) false)
           (= (transfer Model_29_ice S2 Epoch!val!1 Node!val!2) false)
           (= (locked Model_29_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_29_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_29_ice S2 Epoch!val!3 Node!val!2) false)
           (= (locked Model_29_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_29_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_29_ice S2 Epoch!val!0 Node!val!2) false)
           (= (locked Model_29_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_29_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_29_ice S2 Epoch!val!2 Node!val!2) false)
           (= (locked Model_29_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_29_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_29_ice S2 Epoch!val!1 Node!val!2) false)
           (inv Model_29_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!0 Node!val!2 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!0 Node!val!2 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!0 Node!val!2 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!0 Node!val!2 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!1 Node!val!1 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!1 Node!val!2 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!1 Node!val!2 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!1 Node!val!2 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!1 Node!val!2 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!2 Node!val!0 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!2 Node!val!0 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!2 Node!val!0 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!2 Node!val!0 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!2 Node!val!1 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!2 Node!val!1 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!2 Node!val!1 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!2 Node!val!1 Epoch!val!1)
           (inv Model_29_ice S2 Node!val!2 Node!val!2 Epoch!val!3)
           (inv Model_29_ice S2 Node!val!2 Node!val!2 Epoch!val!0)
           (inv Model_29_ice S2 Node!val!2 Node!val!2 Epoch!val!2)
           (inv Model_29_ice S2 Node!val!2 Node!val!2 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (n3 Node))
;   (or (= n2 n1)
;       (not (locked Model_30_ice S1 (ep Model_30_ice S1 n3) n2))
;       (held Model_30_ice S1 n2)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_30_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_30_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_30_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_30_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_30_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_30_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_30_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_30_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_30_ice,
;                              zero(Model_30_ice),
;                              Epoch_1),
;                           one(Model_30_ice) !=
;                           zero(Model_30_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_30_ice,
;                           S1,
;                           ep(Model_30_ice, S1, n1),
;                           n1)),
;                transfer(Model_30_ice,
;                         S1,
;                         ep(Model_30_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S1, e1, n1)),
;                le(Model_30_ice,
;                   e1,
;                   ep(Model_30_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S1, e1, n1)),
;                locked(Model_30_ice,
;                       S1,
;                       ep(Model_30_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_30_ice, S1, e1, n1)),
;                transfer(Model_30_ice, S1, e1, n1)))),
;  ForAll([n1, n2, n3],
;         Or(n2 == n1,
;            Not(locked(Model_30_ice,
;                       S1,
;                       ep(Model_30_ice, S1, n3),
;                       n2)),
;            held(Model_30_ice, S1, n2))),
;  Not(ForAll([n1, n2, n3],
;             Or(held(Model_30_ice, S2, n2),
;                n2 == n1,
;                Not(locked(Model_30_ice,
;                           S2,
;                           ep(Model_30_ice, S2, n3),
;                           n2))))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_30_ice, S1, Node_1),
;                               Not(le(Model_30_ice,
;                                      Epoch_1,
;                                      ep(Model_30_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_30_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_30_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_30_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_30_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_30_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_30_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_30_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_30_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for Node:
; ;;   Node!val!3 Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!3 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node))
;         (or (= x Node!val!3) (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_30_ice () ModelId
;   ModelId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!2))
;            (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!2)))
;        Epoch!val!1
;        Epoch!val!4))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!2)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!3)
;            (not (= x!3 Node!val!2)))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!2))))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_30_ice S1 Node!val!3) Epoch!val!4)
                (= (ep Model_30_ice S1 Node!val!0) Epoch!val!4)
                (= (ep Model_30_ice S1 Node!val!1) Epoch!val!4)
                (= (ep Model_30_ice S1 Node!val!2) Epoch!val!1)
                (= (held Model_30_ice S1 Node!val!3) false)
                (= (held Model_30_ice S1 Node!val!0) false)
                (= (held Model_30_ice S1 Node!val!1) false)
                (= (held Model_30_ice S1 Node!val!2) true)
                (= (transfer Model_30_ice S1 Epoch!val!3 Node!val!3) false)
                (= (transfer Model_30_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_30_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_30_ice S1 Epoch!val!3 Node!val!2) false)
                (= (transfer Model_30_ice S1 Epoch!val!0 Node!val!3) false)
                (= (transfer Model_30_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_30_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_30_ice S1 Epoch!val!0 Node!val!2) false)
                (= (transfer Model_30_ice S1 Epoch!val!4 Node!val!3) false)
                (= (transfer Model_30_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_30_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_30_ice S1 Epoch!val!4 Node!val!2) true)
                (= (transfer Model_30_ice S1 Epoch!val!2 Node!val!3) false)
                (= (transfer Model_30_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_30_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_30_ice S1 Epoch!val!2 Node!val!2) false)
                (= (transfer Model_30_ice S1 Epoch!val!1 Node!val!3) false)
                (= (transfer Model_30_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_30_ice S1 Epoch!val!1 Node!val!1) false)
                (= (transfer Model_30_ice S1 Epoch!val!1 Node!val!2) true)
                (= (locked Model_30_ice S1 Epoch!val!3 Node!val!3) false)
                (= (locked Model_30_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_30_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_30_ice S1 Epoch!val!3 Node!val!2) false)
                (= (locked Model_30_ice S1 Epoch!val!0 Node!val!3) false)
                (= (locked Model_30_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_30_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_30_ice S1 Epoch!val!0 Node!val!2) false)
                (= (locked Model_30_ice S1 Epoch!val!4 Node!val!3) false)
                (= (locked Model_30_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_30_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_30_ice S1 Epoch!val!4 Node!val!2) true)
                (= (locked Model_30_ice S1 Epoch!val!2 Node!val!3) false)
                (= (locked Model_30_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_30_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_30_ice S1 Epoch!val!2 Node!val!2) false)
                (= (locked Model_30_ice S1 Epoch!val!1 Node!val!3) false)
                (= (locked Model_30_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_30_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_30_ice S1 Epoch!val!1 Node!val!2) true)
                (= (le Model_30_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_30_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_30_ice Epoch!val!3 Epoch!val!4) true)
                (= (le Model_30_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_30_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_30_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_30_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_30_ice Epoch!val!0 Epoch!val!4) false)
                (= (le Model_30_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_30_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_30_ice Epoch!val!4 Epoch!val!3) false)
                (= (le Model_30_ice Epoch!val!4 Epoch!val!0) true)
                (= (le Model_30_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_30_ice Epoch!val!4 Epoch!val!2) true)
                (= (le Model_30_ice Epoch!val!4 Epoch!val!1) true)
                (= (le Model_30_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_30_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_30_ice Epoch!val!2 Epoch!val!4) false)
                (= (le Model_30_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_30_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_30_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_30_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_30_ice Epoch!val!1 Epoch!val!4) false)
                (= (le Model_30_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_30_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_30_ice) Epoch!val!3)
                (= (one Model_30_ice) Epoch!val!2)
                (= (first Model_30_ice) Node!val!3)))
      (a!2 (and (inv Model_30_ice S1 Node!val!3 Node!val!3 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!3 Node!val!3 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!3 Node!val!3 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!3 Node!val!3 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!3 Node!val!3 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!3 Node!val!0 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!3 Node!val!0 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!3 Node!val!0 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!3 Node!val!0 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!3 Node!val!0 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!3 Node!val!1 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!3 Node!val!1 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!3 Node!val!1 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!3 Node!val!1 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!3 Node!val!1 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!3 Node!val!2 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!3 Node!val!2 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!3 Node!val!2 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!3 Node!val!2 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!3 Node!val!2 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!0 Node!val!3 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!0 Node!val!3 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!0 Node!val!3 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!0 Node!val!3 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!0 Node!val!3 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!0 Node!val!2 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!0 Node!val!2 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!0 Node!val!2 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!0 Node!val!2 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!0 Node!val!2 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!1 Node!val!3 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!1 Node!val!3 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!1 Node!val!3 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!1 Node!val!3 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!1 Node!val!3 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!1 Node!val!1 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!1 Node!val!2 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!1 Node!val!2 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!1 Node!val!2 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!1 Node!val!2 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!1 Node!val!2 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!2 Node!val!3 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!2 Node!val!3 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!2 Node!val!3 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!2 Node!val!3 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!2 Node!val!3 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!2 Node!val!0 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!2 Node!val!0 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!2 Node!val!0 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!2 Node!val!0 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!2 Node!val!0 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!2 Node!val!1 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!2 Node!val!1 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!2 Node!val!1 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!2 Node!val!1 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!2 Node!val!1 Epoch!val!1)
                (inv Model_30_ice S1 Node!val!2 Node!val!2 Epoch!val!3)
                (inv Model_30_ice S1 Node!val!2 Node!val!2 Epoch!val!0)
                (inv Model_30_ice S1 Node!val!2 Node!val!2 Epoch!val!4)
                (inv Model_30_ice S1 Node!val!2 Node!val!2 Epoch!val!2)
                (inv Model_30_ice S1 Node!val!2 Node!val!2 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_30_ice S2 Node!val!3) Epoch!val!4)
           (= (ep Model_30_ice S2 Node!val!0) Epoch!val!4)
           (= (ep Model_30_ice S2 Node!val!1) Epoch!val!4)
           (= (ep Model_30_ice S2 Node!val!2) Epoch!val!1)
           (= (held Model_30_ice S2 Node!val!3) false)
           (= (held Model_30_ice S2 Node!val!0) false)
           (= (held Model_30_ice S2 Node!val!1) false)
           (= (held Model_30_ice S2 Node!val!2) false)
           (= (transfer Model_30_ice S2 Epoch!val!3 Node!val!3) false)
           (= (transfer Model_30_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_30_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_30_ice S2 Epoch!val!3 Node!val!2) false)
           (= (transfer Model_30_ice S2 Epoch!val!0 Node!val!3) true)
           (= (transfer Model_30_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_30_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_30_ice S2 Epoch!val!0 Node!val!2) false)
           (= (transfer Model_30_ice S2 Epoch!val!4 Node!val!3) false)
           (= (transfer Model_30_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_30_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_30_ice S2 Epoch!val!4 Node!val!2) true)
           (= (transfer Model_30_ice S2 Epoch!val!2 Node!val!3) false)
           (= (transfer Model_30_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_30_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_30_ice S2 Epoch!val!2 Node!val!2) false)
           (= (transfer Model_30_ice S2 Epoch!val!1 Node!val!3) false)
           (= (transfer Model_30_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_30_ice S2 Epoch!val!1 Node!val!1) false)
           (= (transfer Model_30_ice S2 Epoch!val!1 Node!val!2) true)
           (= (locked Model_30_ice S2 Epoch!val!3 Node!val!3) false)
           (= (locked Model_30_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_30_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_30_ice S2 Epoch!val!3 Node!val!2) false)
           (= (locked Model_30_ice S2 Epoch!val!0 Node!val!3) false)
           (= (locked Model_30_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_30_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_30_ice S2 Epoch!val!0 Node!val!2) false)
           (= (locked Model_30_ice S2 Epoch!val!4 Node!val!3) false)
           (= (locked Model_30_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_30_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_30_ice S2 Epoch!val!4 Node!val!2) true)
           (= (locked Model_30_ice S2 Epoch!val!2 Node!val!3) false)
           (= (locked Model_30_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_30_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_30_ice S2 Epoch!val!2 Node!val!2) false)
           (= (locked Model_30_ice S2 Epoch!val!1 Node!val!3) false)
           (= (locked Model_30_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_30_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_30_ice S2 Epoch!val!1 Node!val!2) true)
           (inv Model_30_ice S2 Node!val!3 Node!val!3 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!3 Node!val!3 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!3 Node!val!3 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!3 Node!val!3 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!3 Node!val!3 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!3 Node!val!0 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!3 Node!val!0 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!3 Node!val!0 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!3 Node!val!0 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!3 Node!val!0 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!3 Node!val!1 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!3 Node!val!1 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!3 Node!val!1 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!3 Node!val!1 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!3 Node!val!1 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!3 Node!val!2 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!3 Node!val!2 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!3 Node!val!2 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!3 Node!val!2 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!3 Node!val!2 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!0 Node!val!3 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!0 Node!val!3 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!0 Node!val!3 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!0 Node!val!3 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!0 Node!val!3 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!0 Node!val!2 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!0 Node!val!2 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!0 Node!val!2 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!0 Node!val!2 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!0 Node!val!2 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!1 Node!val!3 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!1 Node!val!3 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!1 Node!val!3 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!1 Node!val!3 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!1 Node!val!3 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!1 Node!val!1 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!1 Node!val!2 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!1 Node!val!2 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!1 Node!val!2 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!1 Node!val!2 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!1 Node!val!2 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!2 Node!val!3 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!2 Node!val!3 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!2 Node!val!3 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!2 Node!val!3 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!2 Node!val!3 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!2 Node!val!0 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!2 Node!val!0 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!2 Node!val!0 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!2 Node!val!0 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!2 Node!val!0 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!2 Node!val!1 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!2 Node!val!1 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!2 Node!val!1 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!2 Node!val!1 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!2 Node!val!1 Epoch!val!1)
           (inv Model_30_ice S2 Node!val!2 Node!val!2 Epoch!val!3)
           (inv Model_30_ice S2 Node!val!2 Node!val!2 Epoch!val!0)
           (inv Model_30_ice S2 Node!val!2 Node!val!2 Epoch!val!4)
           (inv Model_30_ice S2 Node!val!2 Node!val!2 Epoch!val!2)
           (inv Model_30_ice S2 Node!val!2 Node!val!2 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n2 Node) (n3 Node))
;   (or (not (locked Model_31_ice S1 (ep Model_31_ice S1 n2) n2))
;       (le Model_31_ice (ep Model_31_ice S1 n3) (ep Model_31_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_31_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_31_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_31_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_31_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_31_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_31_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_31_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_31_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_31_ice,
;                              zero(Model_31_ice),
;                              Epoch_1),
;                           one(Model_31_ice) !=
;                           zero(Model_31_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_31_ice,
;                           S1,
;                           ep(Model_31_ice, S1, n1),
;                           n1)),
;                transfer(Model_31_ice,
;                         S1,
;                         ep(Model_31_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S1, e1, n1)),
;                le(Model_31_ice,
;                   e1,
;                   ep(Model_31_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S1, e1, n1)),
;                locked(Model_31_ice,
;                       S1,
;                       ep(Model_31_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_31_ice, S1, e1, n1)),
;                transfer(Model_31_ice, S1, e1, n1)))),
;  ForAll([n2, n3],
;         Or(Not(locked(Model_31_ice,
;                       S1,
;                       ep(Model_31_ice, S1, n2),
;                       n2)),
;            le(Model_31_ice,
;               ep(Model_31_ice, S1, n3),
;               ep(Model_31_ice, S1, n2)))),
;  Not(ForAll([n2, n3],
;             Or(Not(locked(Model_31_ice,
;                           S2,
;                           ep(Model_31_ice, S2, n2),
;                           n2)),
;                le(Model_31_ice,
;                   ep(Model_31_ice, S2, n3),
;                   ep(Model_31_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_31_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_31_ice,
;                               Epoch_1,
;                               ep(Model_31_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_31_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_31_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_31_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_31_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_31_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_31_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_31_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_31_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_31_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!2
;                   Epoch!val!3)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (= x!2 Node!val!1))
;                   Epoch!val!0
;                   (ite (and (= x!0 ModelId!val!0)
;                             (= x!1 StateId!val!1)
;                             (= x!2 Node!val!1))
;                        Epoch!val!1
;                        a!1))))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!2
;          a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!4))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!4)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!0)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!4))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_31_ice S1 Node!val!0) Epoch!val!2)
                (= (ep Model_31_ice S1 Node!val!1) Epoch!val!1)
                (= (held Model_31_ice S1 Node!val!0) false)
                (= (held Model_31_ice S1 Node!val!1) false)
                (= (transfer Model_31_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_31_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_31_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_31_ice S1 Epoch!val!0 Node!val!1) true)
                (= (transfer Model_31_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_31_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_31_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_31_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_31_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_31_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_31_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_31_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_31_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_31_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_31_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_31_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_31_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_31_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_31_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_31_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_31_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_31_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_31_ice Epoch!val!3 Epoch!val!4) false)
                (= (le Model_31_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_31_ice Epoch!val!3 Epoch!val!1) false)
                (= (le Model_31_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_31_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_31_ice Epoch!val!0 Epoch!val!4) false)
                (= (le Model_31_ice Epoch!val!0 Epoch!val!2) true)
                (= (le Model_31_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_31_ice Epoch!val!4 Epoch!val!3) true)
                (= (le Model_31_ice Epoch!val!4 Epoch!val!0) true)
                (= (le Model_31_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_31_ice Epoch!val!4 Epoch!val!2) true)
                (= (le Model_31_ice Epoch!val!4 Epoch!val!1) true)
                (= (le Model_31_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_31_ice Epoch!val!2 Epoch!val!0) false)
                (= (le Model_31_ice Epoch!val!2 Epoch!val!4) false)
                (= (le Model_31_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_31_ice Epoch!val!2 Epoch!val!1) false)
                (= (le Model_31_ice Epoch!val!1 Epoch!val!3) true)
                (= (le Model_31_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_31_ice Epoch!val!1 Epoch!val!4) false)
                (= (le Model_31_ice Epoch!val!1 Epoch!val!2) true)
                (= (le Model_31_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_31_ice) Epoch!val!4)
                (= (one Model_31_ice) Epoch!val!3)
                (= (first Model_31_ice) Node!val!0)))
      (a!2 (and (inv Model_31_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_31_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_31_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_31_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_31_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_31_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_31_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_31_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_31_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_31_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_31_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_31_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_31_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_31_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_31_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_31_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_31_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_31_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_31_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_31_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_31_ice S2 Node!val!0) Epoch!val!2)
           (= (ep Model_31_ice S2 Node!val!1) Epoch!val!0)
           (= (held Model_31_ice S2 Node!val!0) false)
           (= (held Model_31_ice S2 Node!val!1) true)
           (= (transfer Model_31_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_31_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_31_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_31_ice S2 Epoch!val!0 Node!val!1) true)
           (= (transfer Model_31_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_31_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_31_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_31_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_31_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_31_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_31_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_31_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_31_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_31_ice S2 Epoch!val!0 Node!val!1) true)
           (= (locked Model_31_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_31_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_31_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_31_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_31_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_31_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_31_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_31_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_31_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_31_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_31_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_31_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_31_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_31_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_31_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_31_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_31_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_31_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_31_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_31_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_31_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_31_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_31_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_31_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_31_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_31_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (n3 Node))
;   (or (= n3 n1)
;       (not (locked Model_32_ice S1 (ep Model_32_ice S1 n1) n2))
;       (held Model_32_ice S1 n1)))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_32_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_32_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_32_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_32_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_32_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_32_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_32_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_32_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_32_ice,
;                              zero(Model_32_ice),
;                              Epoch_1),
;                           one(Model_32_ice) !=
;                           zero(Model_32_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_32_ice,
;                           S1,
;                           ep(Model_32_ice, S1, n1),
;                           n1)),
;                transfer(Model_32_ice,
;                         S1,
;                         ep(Model_32_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S1, e1, n1)),
;                le(Model_32_ice,
;                   e1,
;                   ep(Model_32_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S1, e1, n1)),
;                locked(Model_32_ice,
;                       S1,
;                       ep(Model_32_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_32_ice, S1, e1, n1)),
;                transfer(Model_32_ice, S1, e1, n1)))),
;  ForAll([n1, n2, n3],
;         Or(n3 == n1,
;            Not(locked(Model_32_ice,
;                       S1,
;                       ep(Model_32_ice, S1, n1),
;                       n2)),
;            held(Model_32_ice, S1, n1))),
;  Not(ForAll([n1, n2, n3],
;             Or(n3 == n1,
;                Not(locked(Model_32_ice,
;                           S2,
;                           ep(Model_32_ice, S2, n1),
;                           n2)),
;                held(Model_32_ice, S2, n1)))),
;  Exists(Node_1,
;         Exists(Node_2,
;                Exists(Epoch_1,
;                       And(And(held(Model_32_ice, S1, Node_1),
;                               Not(le(Model_32_ice,
;                                      Epoch_1,
;                                      ep(Model_32_ice,
;                                         S1,
;                                         Node_1)))),
;                           And(ForAll(Node_3,
;                                      ep(Model_32_ice,
;                                         S2,
;                                         Node_3) ==
;                                      ep(Model_32_ice,
;                                         S1,
;                                         Node_3)),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         locked(Model_32_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         locked(Model_32_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3))),
;                               ForAll(Epoch_2,
;                                      ForAll(Node_3,
;                                         transfer(Model_32_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_3) ==
;                                         If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_3 == Node_2),
;                                         True,
;                                         transfer(Model_32_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_3)))),
;                               ForAll(Node_3,
;                                      held(Model_32_ice,
;                                         S2,
;                                         Node_3) ==
;                                      If(And(Node_3 == Node_1),
;                                         False,
;                                         held(Model_32_ice,
;                                         S1,
;                                         Node_3))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!3 Node!val!0 Node!val!1 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!3 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node))
;         (or (= x Node!val!3) (= x Node!val!0) (= x Node!val!1) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_32_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!3))
;                       (not (= x!2 Node!val!0)))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!2)
;                       (not (= x!2 Node!val!3))
;                       (not (= x!2 Node!val!0))))))
;     (ite (or (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!0)
;                   (= x!2 Node!val!0))
;              (and (= x!0 ModelId!val!0)
;                   (= x!1 StateId!val!1)
;                   (= x!2 Node!val!0)))
;          Epoch!val!4
;          (ite a!1 Epoch!val!1 Epoch!val!0))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!2) (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!2))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0) (= x!1 StateId!val!1) (= x!2 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Node!val!2)
;            (not (= x!2 Node!val!3))
;            (not (= x!2 Node!val!0)))))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!3)
;            (not (= x!3 Node!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (= x!3 Node!val!0))))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_32_ice S1 Node!val!3) Epoch!val!0)
                (= (ep Model_32_ice S1 Node!val!0) Epoch!val!4)
                (= (ep Model_32_ice S1 Node!val!1) Epoch!val!0)
                (= (ep Model_32_ice S1 Node!val!2) Epoch!val!1)
                (= (held Model_32_ice S1 Node!val!3) false)
                (= (held Model_32_ice S1 Node!val!0) true)
                (= (held Model_32_ice S1 Node!val!1) false)
                (= (held Model_32_ice S1 Node!val!2) true)
                (= (transfer Model_32_ice S1 Epoch!val!3 Node!val!3) false)
                (= (transfer Model_32_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_32_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_32_ice S1 Epoch!val!3 Node!val!2) false)
                (= (transfer Model_32_ice S1 Epoch!val!0 Node!val!3) false)
                (= (transfer Model_32_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_32_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_32_ice S1 Epoch!val!0 Node!val!2) false)
                (= (transfer Model_32_ice S1 Epoch!val!4 Node!val!3) false)
                (= (transfer Model_32_ice S1 Epoch!val!4 Node!val!0) true)
                (= (transfer Model_32_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_32_ice S1 Epoch!val!4 Node!val!2) false)
                (= (transfer Model_32_ice S1 Epoch!val!2 Node!val!3) false)
                (= (transfer Model_32_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_32_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_32_ice S1 Epoch!val!2 Node!val!2) false)
                (= (transfer Model_32_ice S1 Epoch!val!1 Node!val!3) false)
                (= (transfer Model_32_ice S1 Epoch!val!1 Node!val!0) true)
                (= (transfer Model_32_ice S1 Epoch!val!1 Node!val!1) false)
                (= (transfer Model_32_ice S1 Epoch!val!1 Node!val!2) false)
                (= (locked Model_32_ice S1 Epoch!val!3 Node!val!3) false)
                (= (locked Model_32_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_32_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_32_ice S1 Epoch!val!3 Node!val!2) false)
                (= (locked Model_32_ice S1 Epoch!val!0 Node!val!3) false)
                (= (locked Model_32_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_32_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_32_ice S1 Epoch!val!0 Node!val!2) false)
                (= (locked Model_32_ice S1 Epoch!val!4 Node!val!3) false)
                (= (locked Model_32_ice S1 Epoch!val!4 Node!val!0) true)
                (= (locked Model_32_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_32_ice S1 Epoch!val!4 Node!val!2) false)
                (= (locked Model_32_ice S1 Epoch!val!2 Node!val!3) false)
                (= (locked Model_32_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_32_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_32_ice S1 Epoch!val!2 Node!val!2) false)
                (= (locked Model_32_ice S1 Epoch!val!1 Node!val!3) false)
                (= (locked Model_32_ice S1 Epoch!val!1 Node!val!0) true)
                (= (locked Model_32_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_32_ice S1 Epoch!val!1 Node!val!2) false)
                (= (le Model_32_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_32_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_32_ice Epoch!val!3 Epoch!val!4) true)
                (= (le Model_32_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_32_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_32_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_32_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_32_ice Epoch!val!0 Epoch!val!4) false)
                (= (le Model_32_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_32_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_32_ice Epoch!val!4 Epoch!val!3) false)
                (= (le Model_32_ice Epoch!val!4 Epoch!val!0) true)
                (= (le Model_32_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_32_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_32_ice Epoch!val!4 Epoch!val!1) false)
                (= (le Model_32_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_32_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_32_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_32_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_32_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_32_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_32_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_32_ice Epoch!val!1 Epoch!val!4) true)
                (= (le Model_32_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_32_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_32_ice) Epoch!val!3)
                (= (one Model_32_ice) Epoch!val!2)
                (= (first Model_32_ice) Node!val!3)))
      (a!2 (and (inv Model_32_ice S1 Node!val!3 Node!val!3 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!3 Node!val!3 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!3 Node!val!3 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!3 Node!val!3 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!3 Node!val!3 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!3 Node!val!0 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!3 Node!val!0 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!3 Node!val!0 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!3 Node!val!0 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!3 Node!val!0 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!3 Node!val!1 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!3 Node!val!1 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!3 Node!val!1 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!3 Node!val!1 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!3 Node!val!1 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!3 Node!val!2 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!3 Node!val!2 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!3 Node!val!2 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!3 Node!val!2 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!3 Node!val!2 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!0 Node!val!3 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!0 Node!val!3 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!0 Node!val!3 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!0 Node!val!3 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!0 Node!val!3 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!0 Node!val!2 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!0 Node!val!2 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!0 Node!val!2 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!0 Node!val!2 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!0 Node!val!2 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!1 Node!val!3 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!1 Node!val!3 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!1 Node!val!3 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!1 Node!val!3 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!1 Node!val!3 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!1 Node!val!1 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!1 Node!val!2 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!1 Node!val!2 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!1 Node!val!2 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!1 Node!val!2 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!1 Node!val!2 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!2 Node!val!3 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!2 Node!val!3 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!2 Node!val!3 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!2 Node!val!3 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!2 Node!val!3 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!2 Node!val!0 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!2 Node!val!0 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!2 Node!val!0 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!2 Node!val!0 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!2 Node!val!0 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!2 Node!val!1 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!2 Node!val!1 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!2 Node!val!1 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!2 Node!val!1 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!2 Node!val!1 Epoch!val!1)
                (inv Model_32_ice S1 Node!val!2 Node!val!2 Epoch!val!3)
                (inv Model_32_ice S1 Node!val!2 Node!val!2 Epoch!val!0)
                (inv Model_32_ice S1 Node!val!2 Node!val!2 Epoch!val!4)
                (inv Model_32_ice S1 Node!val!2 Node!val!2 Epoch!val!2)
                (inv Model_32_ice S1 Node!val!2 Node!val!2 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_32_ice S2 Node!val!3) Epoch!val!0)
           (= (ep Model_32_ice S2 Node!val!0) Epoch!val!4)
           (= (ep Model_32_ice S2 Node!val!1) Epoch!val!0)
           (= (ep Model_32_ice S2 Node!val!2) Epoch!val!1)
           (= (held Model_32_ice S2 Node!val!3) false)
           (= (held Model_32_ice S2 Node!val!0) true)
           (= (held Model_32_ice S2 Node!val!1) false)
           (= (held Model_32_ice S2 Node!val!2) false)
           (= (transfer Model_32_ice S2 Epoch!val!3 Node!val!3) false)
           (= (transfer Model_32_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_32_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_32_ice S2 Epoch!val!3 Node!val!2) false)
           (= (transfer Model_32_ice S2 Epoch!val!0 Node!val!3) true)
           (= (transfer Model_32_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_32_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_32_ice S2 Epoch!val!0 Node!val!2) false)
           (= (transfer Model_32_ice S2 Epoch!val!4 Node!val!3) false)
           (= (transfer Model_32_ice S2 Epoch!val!4 Node!val!0) true)
           (= (transfer Model_32_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_32_ice S2 Epoch!val!4 Node!val!2) false)
           (= (transfer Model_32_ice S2 Epoch!val!2 Node!val!3) false)
           (= (transfer Model_32_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_32_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_32_ice S2 Epoch!val!2 Node!val!2) false)
           (= (transfer Model_32_ice S2 Epoch!val!1 Node!val!3) false)
           (= (transfer Model_32_ice S2 Epoch!val!1 Node!val!0) true)
           (= (transfer Model_32_ice S2 Epoch!val!1 Node!val!1) false)
           (= (transfer Model_32_ice S2 Epoch!val!1 Node!val!2) false)
           (= (locked Model_32_ice S2 Epoch!val!3 Node!val!3) false)
           (= (locked Model_32_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_32_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_32_ice S2 Epoch!val!3 Node!val!2) false)
           (= (locked Model_32_ice S2 Epoch!val!0 Node!val!3) false)
           (= (locked Model_32_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_32_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_32_ice S2 Epoch!val!0 Node!val!2) false)
           (= (locked Model_32_ice S2 Epoch!val!4 Node!val!3) false)
           (= (locked Model_32_ice S2 Epoch!val!4 Node!val!0) true)
           (= (locked Model_32_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_32_ice S2 Epoch!val!4 Node!val!2) false)
           (= (locked Model_32_ice S2 Epoch!val!2 Node!val!3) false)
           (= (locked Model_32_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_32_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_32_ice S2 Epoch!val!2 Node!val!2) false)
           (= (locked Model_32_ice S2 Epoch!val!1 Node!val!3) false)
           (= (locked Model_32_ice S2 Epoch!val!1 Node!val!0) true)
           (= (locked Model_32_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_32_ice S2 Epoch!val!1 Node!val!2) false)
           (inv Model_32_ice S2 Node!val!3 Node!val!3 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!3 Node!val!3 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!3 Node!val!3 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!3 Node!val!3 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!3 Node!val!3 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!3 Node!val!0 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!3 Node!val!0 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!3 Node!val!0 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!3 Node!val!0 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!3 Node!val!0 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!3 Node!val!1 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!3 Node!val!1 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!3 Node!val!1 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!3 Node!val!1 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!3 Node!val!1 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!3 Node!val!2 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!3 Node!val!2 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!3 Node!val!2 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!3 Node!val!2 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!3 Node!val!2 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!0 Node!val!3 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!0 Node!val!3 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!0 Node!val!3 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!0 Node!val!3 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!0 Node!val!3 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!0 Node!val!2 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!0 Node!val!2 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!0 Node!val!2 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!0 Node!val!2 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!0 Node!val!2 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!1 Node!val!3 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!1 Node!val!3 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!1 Node!val!3 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!1 Node!val!3 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!1 Node!val!3 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!1 Node!val!1 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!1 Node!val!2 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!1 Node!val!2 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!1 Node!val!2 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!1 Node!val!2 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!1 Node!val!2 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!2 Node!val!3 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!2 Node!val!3 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!2 Node!val!3 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!2 Node!val!3 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!2 Node!val!3 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!2 Node!val!0 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!2 Node!val!0 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!2 Node!val!0 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!2 Node!val!0 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!2 Node!val!0 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!2 Node!val!1 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!2 Node!val!1 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!2 Node!val!1 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!2 Node!val!1 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!2 Node!val!1 Epoch!val!1)
           (inv Model_32_ice S2 Node!val!2 Node!val!2 Epoch!val!3)
           (inv Model_32_ice S2 Node!val!2 Node!val!2 Epoch!val!0)
           (inv Model_32_ice S2 Node!val!2 Node!val!2 Epoch!val!4)
           (inv Model_32_ice S2 Node!val!2 Node!val!2 Epoch!val!2)
           (inv Model_32_ice S2 Node!val!2 Node!val!2 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.PositiveCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_33_pos (ep Model_33_pos init n1) (ep Model_33_pos init n2))
;       (le Model_33_pos e1 (ep Model_33_pos init n1))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Node_1,
;         ForAll(Epoch_1,
;                And(held(Model_33_pos, init, Node_1) ==
;                    (Node_1 == first(Model_33_pos)),
;                    Implies(Node_1 != first(Model_33_pos),
;                            ep(Model_33_pos, init, Node_1) ==
;                            zero(Model_33_pos)),
;                    ep(Model_33_pos,
;                       init,
;                       first(Model_33_pos)) ==
;                    one(Model_33_pos),
;                    transfer(Model_33_pos,
;                             init,
;                             Epoch_1,
;                             Node_1) ==
;                    False,
;                    locked(Model_33_pos,
;                           init,
;                           Epoch_1,
;                           Node_1) ==
;                    False))),
;  ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_33_pos, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_33_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_33_pos,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_33_pos,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_33_pos,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_33_pos,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_33_pos,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_33_pos,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_33_pos,
;                              zero(Model_33_pos),
;                              Epoch_1),
;                           one(Model_33_pos) !=
;                           zero(Model_33_pos))))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_33_pos,
;                   ep(Model_33_pos, init, n1),
;                   ep(Model_33_pos, init, n2)),
;                le(Model_33_pos,
;                   e1,
;                   ep(Model_33_pos, init, n1)))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!0 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!0) (= x Epoch!val!2) (= x Epoch!val!1)))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (= x StateId!val!0))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun Model_33_pos () ModelId
;   ModelId!val!0)
; (define-fun init () StateId
;   StateId!val!0)
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0)
;             (= x!1 StateId!val!0)
;             (not (= x!2 Node!val!1)))
;        Epoch!val!1
;        Epoch!val!2))
; (define-fun first ((x!0 ModelId)) Node
;   Node!val!1)
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   false)
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!2)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (and (= (ep Model_33_pos init Node!val!0) Epoch!val!1)
     (= (ep Model_33_pos init Node!val!1) Epoch!val!2)
     (= (held Model_33_pos init Node!val!0) false)
     (= (held Model_33_pos init Node!val!1) true)
     (= (transfer Model_33_pos init Epoch!val!0 Node!val!0) false)
     (= (transfer Model_33_pos init Epoch!val!0 Node!val!1) false)
     (= (transfer Model_33_pos init Epoch!val!2 Node!val!0) false)
     (= (transfer Model_33_pos init Epoch!val!2 Node!val!1) false)
     (= (transfer Model_33_pos init Epoch!val!1 Node!val!0) false)
     (= (transfer Model_33_pos init Epoch!val!1 Node!val!1) false)
     (= (locked Model_33_pos init Epoch!val!0 Node!val!0) false)
     (= (locked Model_33_pos init Epoch!val!0 Node!val!1) false)
     (= (locked Model_33_pos init Epoch!val!2 Node!val!0) false)
     (= (locked Model_33_pos init Epoch!val!2 Node!val!1) false)
     (= (locked Model_33_pos init Epoch!val!1 Node!val!0) false)
     (= (locked Model_33_pos init Epoch!val!1 Node!val!1) false)
     (= (le Model_33_pos Epoch!val!0 Epoch!val!0) true)
     (= (le Model_33_pos Epoch!val!0 Epoch!val!2) false)
     (= (le Model_33_pos Epoch!val!0 Epoch!val!1) false)
     (= (le Model_33_pos Epoch!val!2 Epoch!val!0) true)
     (= (le Model_33_pos Epoch!val!2 Epoch!val!2) true)
     (= (le Model_33_pos Epoch!val!2 Epoch!val!1) false)
     (= (le Model_33_pos Epoch!val!1 Epoch!val!0) true)
     (= (le Model_33_pos Epoch!val!1 Epoch!val!2) true)
     (= (le Model_33_pos Epoch!val!1 Epoch!val!1) true)
     (= (zero Model_33_pos) Epoch!val!1)
     (= (one Model_33_pos) Epoch!val!2)
     (= (first Model_33_pos) Node!val!1)
     (inv Model_33_pos init Node!val!0 Node!val!0 Epoch!val!0)
     (inv Model_33_pos init Node!val!0 Node!val!0 Epoch!val!2)
     (inv Model_33_pos init Node!val!0 Node!val!0 Epoch!val!1)
     (inv Model_33_pos init Node!val!0 Node!val!1 Epoch!val!0)
     (inv Model_33_pos init Node!val!0 Node!val!1 Epoch!val!2)
     (inv Model_33_pos init Node!val!0 Node!val!1 Epoch!val!1)
     (inv Model_33_pos init Node!val!1 Node!val!0 Epoch!val!0)
     (inv Model_33_pos init Node!val!1 Node!val!0 Epoch!val!2)
     (inv Model_33_pos init Node!val!1 Node!val!0 Epoch!val!1)
     (inv Model_33_pos init Node!val!1 Node!val!1 Epoch!val!0)
     (inv Model_33_pos init Node!val!1 Node!val!1 Epoch!val!2)
     (inv Model_33_pos init Node!val!1 Node!val!1 Epoch!val!1)))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_34_ice (ep Model_34_ice S1 n2) e1)
;       (le Model_34_ice (ep Model_34_ice S1 n1) (ep Model_34_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_34_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_34_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_34_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_34_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_34_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_34_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_34_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_34_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_34_ice,
;                              zero(Model_34_ice),
;                              Epoch_1),
;                           one(Model_34_ice) !=
;                           zero(Model_34_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_34_ice,
;                           S1,
;                           ep(Model_34_ice, S1, n1),
;                           n1)),
;                transfer(Model_34_ice,
;                         S1,
;                         ep(Model_34_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S1, e1, n1)),
;                le(Model_34_ice,
;                   e1,
;                   ep(Model_34_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S1, e1, n1)),
;                locked(Model_34_ice,
;                       S1,
;                       ep(Model_34_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_34_ice, S1, e1, n1)),
;                transfer(Model_34_ice, S1, e1, n1)))),
;  ForAll([n1, n2, e1],
;         Or(le(Model_34_ice, ep(Model_34_ice, S1, n2), e1),
;            le(Model_34_ice,
;               ep(Model_34_ice, S1, n1),
;               ep(Model_34_ice, S1, n2)))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_34_ice,
;                   ep(Model_34_ice, S2, n2),
;                   e1),
;                le(Model_34_ice,
;                   ep(Model_34_ice, S2, n1),
;                   ep(Model_34_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_34_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_34_ice,
;                               Epoch_1,
;                               ep(Model_34_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_34_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_34_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_34_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_34_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_34_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_34_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_34_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_34_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_34_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!3
;                   Epoch!val!4)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!3
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!1)
;                    (= x!2 Node!val!1))
;               Epoch!val!2
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!4) (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!4))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!4)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!4)
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_34_ice S1 Node!val!0) Epoch!val!3)
                (= (ep Model_34_ice S1 Node!val!1) Epoch!val!2)
                (= (held Model_34_ice S1 Node!val!0) false)
                (= (held Model_34_ice S1 Node!val!1) false)
                (= (transfer Model_34_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_34_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_34_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_34_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_34_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_34_ice S1 Epoch!val!4 Node!val!1) true)
                (= (transfer Model_34_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_34_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_34_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_34_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_34_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_34_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_34_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_34_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_34_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_34_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_34_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_34_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_34_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_34_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_34_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_34_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_34_ice Epoch!val!3 Epoch!val!4) false)
                (= (le Model_34_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_34_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_34_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_34_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_34_ice Epoch!val!0 Epoch!val!4) true)
                (= (le Model_34_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_34_ice Epoch!val!0 Epoch!val!1) true)
                (= (le Model_34_ice Epoch!val!4 Epoch!val!3) true)
                (= (le Model_34_ice Epoch!val!4 Epoch!val!0) false)
                (= (le Model_34_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_34_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_34_ice Epoch!val!4 Epoch!val!1) true)
                (= (le Model_34_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_34_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_34_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_34_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_34_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_34_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_34_ice Epoch!val!1 Epoch!val!0) false)
                (= (le Model_34_ice Epoch!val!1 Epoch!val!4) false)
                (= (le Model_34_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_34_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_34_ice) Epoch!val!2)
                (= (one Model_34_ice) Epoch!val!1)
                (= (first Model_34_ice) Node!val!0)))
      (a!2 (and (inv Model_34_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_34_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_34_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_34_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_34_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_34_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_34_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_34_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_34_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_34_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_34_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_34_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_34_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_34_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_34_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_34_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_34_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_34_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_34_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_34_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_34_ice S2 Node!val!0) Epoch!val!3)
           (= (ep Model_34_ice S2 Node!val!1) Epoch!val!4)
           (= (held Model_34_ice S2 Node!val!0) false)
           (= (held Model_34_ice S2 Node!val!1) true)
           (= (transfer Model_34_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_34_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_34_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_34_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_34_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_34_ice S2 Epoch!val!4 Node!val!1) true)
           (= (transfer Model_34_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_34_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_34_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_34_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_34_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_34_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_34_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_34_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_34_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_34_ice S2 Epoch!val!4 Node!val!1) true)
           (= (locked Model_34_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_34_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_34_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_34_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_34_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_34_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_34_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_34_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_34_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_34_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_34_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_34_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_34_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_34_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_34_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_34_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_34_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_34_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_34_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_34_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_34_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_34_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_34_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_34_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_35_ice (ep Model_35_ice S1 n2) e1)
;       (le Model_35_ice (ep Model_35_ice S1 n1) (ep Model_35_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_35_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_35_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_35_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_35_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_35_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_35_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_35_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_35_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_35_ice,
;                              zero(Model_35_ice),
;                              Epoch_1),
;                           one(Model_35_ice) !=
;                           zero(Model_35_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_35_ice,
;                           S1,
;                           ep(Model_35_ice, S1, n1),
;                           n1)),
;                transfer(Model_35_ice,
;                         S1,
;                         ep(Model_35_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S1, e1, n1)),
;                le(Model_35_ice,
;                   e1,
;                   ep(Model_35_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S1, e1, n1)),
;                locked(Model_35_ice,
;                       S1,
;                       ep(Model_35_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_35_ice, S1, e1, n1)),
;                transfer(Model_35_ice, S1, e1, n1)))),
;  ForAll([n1, n2, e1],
;         Or(le(Model_35_ice, ep(Model_35_ice, S1, n2), e1),
;            le(Model_35_ice,
;               ep(Model_35_ice, S1, n1),
;               ep(Model_35_ice, S1, n2)))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_35_ice,
;                   ep(Model_35_ice, S2, n2),
;                   e1),
;                le(Model_35_ice,
;                   ep(Model_35_ice, S2, n1),
;                   ep(Model_35_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_35_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_35_ice,
;                               Epoch_1,
;                               ep(Model_35_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_35_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_35_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_35_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_35_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_35_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_35_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_35_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_35_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_35_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!1)))
;   (let ((a!2 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (= x!2 Node!val!1))
;                   Epoch!val!2
;                   (ite (and (= x!0 ModelId!val!0)
;                             (= x!1 StateId!val!1)
;                             (= x!2 Node!val!1))
;                        Epoch!val!3
;                        a!1))))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          a!2))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!4))
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!1))
;        (= x!3 Node!val!1)))
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_35_ice S1 Node!val!0) Epoch!val!4)
                (= (ep Model_35_ice S1 Node!val!1) Epoch!val!3)
                (= (held Model_35_ice S1 Node!val!0) false)
                (= (held Model_35_ice S1 Node!val!1) false)
                (= (transfer Model_35_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_35_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_35_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_35_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_35_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_35_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_35_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_35_ice S1 Epoch!val!2 Node!val!1) true)
                (= (transfer Model_35_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_35_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_35_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_35_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_35_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_35_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_35_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_35_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_35_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_35_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_35_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_35_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_35_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_35_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_35_ice Epoch!val!3 Epoch!val!4) true)
                (= (le Model_35_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_35_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_35_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_35_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_35_ice Epoch!val!0 Epoch!val!4) true)
                (= (le Model_35_ice Epoch!val!0 Epoch!val!2) true)
                (= (le Model_35_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_35_ice Epoch!val!4 Epoch!val!3) false)
                (= (le Model_35_ice Epoch!val!4 Epoch!val!0) false)
                (= (le Model_35_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_35_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_35_ice Epoch!val!4 Epoch!val!1) false)
                (= (le Model_35_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_35_ice Epoch!val!2 Epoch!val!0) false)
                (= (le Model_35_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_35_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_35_ice Epoch!val!2 Epoch!val!1) false)
                (= (le Model_35_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_35_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_35_ice Epoch!val!1 Epoch!val!4) true)
                (= (le Model_35_ice Epoch!val!1 Epoch!val!2) true)
                (= (le Model_35_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_35_ice) Epoch!val!3)
                (= (one Model_35_ice) Epoch!val!1)
                (= (first Model_35_ice) Node!val!0)))
      (a!2 (and (inv Model_35_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_35_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_35_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_35_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_35_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_35_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_35_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_35_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_35_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_35_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_35_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_35_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_35_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_35_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_35_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_35_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_35_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_35_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_35_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_35_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_35_ice S2 Node!val!0) Epoch!val!4)
           (= (ep Model_35_ice S2 Node!val!1) Epoch!val!2)
           (= (held Model_35_ice S2 Node!val!0) false)
           (= (held Model_35_ice S2 Node!val!1) true)
           (= (transfer Model_35_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_35_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_35_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_35_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_35_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_35_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_35_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_35_ice S2 Epoch!val!2 Node!val!1) true)
           (= (transfer Model_35_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_35_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_35_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_35_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_35_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_35_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_35_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_35_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_35_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_35_ice S2 Epoch!val!2 Node!val!1) true)
           (= (locked Model_35_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_35_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_35_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_35_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_35_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_35_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_35_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_35_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_35_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_35_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_35_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_35_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_35_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_35_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_35_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_35_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_35_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_35_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_35_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_35_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_35_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_35_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_36_ice (ep Model_36_ice S1 n2) e1)
;       (le Model_36_ice (ep Model_36_ice S1 n1) (ep Model_36_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_36_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_36_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_36_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_36_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_36_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_36_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_36_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_36_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_36_ice,
;                              zero(Model_36_ice),
;                              Epoch_1),
;                           one(Model_36_ice) !=
;                           zero(Model_36_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_36_ice,
;                           S1,
;                           ep(Model_36_ice, S1, n1),
;                           n1)),
;                transfer(Model_36_ice,
;                         S1,
;                         ep(Model_36_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S1, e1, n1)),
;                le(Model_36_ice,
;                   e1,
;                   ep(Model_36_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S1, e1, n1)),
;                locked(Model_36_ice,
;                       S1,
;                       ep(Model_36_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_36_ice, S1, e1, n1)),
;                transfer(Model_36_ice, S1, e1, n1)))),
;  ForAll([n1, n2, e1],
;         Or(le(Model_36_ice, ep(Model_36_ice, S1, n2), e1),
;            le(Model_36_ice,
;               ep(Model_36_ice, S1, n1),
;               ep(Model_36_ice, S1, n2)))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_36_ice,
;                   ep(Model_36_ice, S2, n2),
;                   e1),
;                le(Model_36_ice,
;                   ep(Model_36_ice, S2, n1),
;                   ep(Model_36_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_36_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_36_ice,
;                               Epoch_1,
;                               ep(Model_36_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_36_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_36_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_36_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_36_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_36_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_36_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_36_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_36_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_36_ice () ModelId
;   ModelId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!4)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (or (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!1)
;                       (= x!2 Node!val!1))
;                  (and (= x!0 ModelId!val!0)
;                       (= x!1 StateId!val!0)
;                       (not (= x!2 Node!val!1))))))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!3
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!0)
;                    (= x!2 Node!val!1))
;               Epoch!val!4
;               (ite a!1 Epoch!val!3 Epoch!val!0)))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_36_ice S1 Node!val!0) Epoch!val!3)
                (= (ep Model_36_ice S1 Node!val!1) Epoch!val!3)
                (= (held Model_36_ice S1 Node!val!0) false)
                (= (held Model_36_ice S1 Node!val!1) false)
                (= (transfer Model_36_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_36_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_36_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_36_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_36_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_36_ice S1 Epoch!val!4 Node!val!1) true)
                (= (transfer Model_36_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_36_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_36_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_36_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_36_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_36_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_36_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_36_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_36_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_36_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_36_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_36_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_36_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_36_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_36_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_36_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_36_ice Epoch!val!3 Epoch!val!4) true)
                (= (le Model_36_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_36_ice Epoch!val!3 Epoch!val!1) false)
                (= (le Model_36_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_36_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_36_ice Epoch!val!0 Epoch!val!4) true)
                (= (le Model_36_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_36_ice Epoch!val!0 Epoch!val!1) true)
                (= (le Model_36_ice Epoch!val!4 Epoch!val!3) false)
                (= (le Model_36_ice Epoch!val!4 Epoch!val!0) false)
                (= (le Model_36_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_36_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_36_ice Epoch!val!4 Epoch!val!1) false)
                (= (le Model_36_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_36_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_36_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_36_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_36_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_36_ice Epoch!val!1 Epoch!val!3) true)
                (= (le Model_36_ice Epoch!val!1 Epoch!val!0) false)
                (= (le Model_36_ice Epoch!val!1 Epoch!val!4) true)
                (= (le Model_36_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_36_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_36_ice) Epoch!val!2)
                (= (one Model_36_ice) Epoch!val!1)
                (= (first Model_36_ice) Node!val!0)))
      (a!2 (and (inv Model_36_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_36_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_36_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_36_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_36_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_36_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_36_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_36_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_36_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_36_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_36_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_36_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_36_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_36_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_36_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_36_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_36_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_36_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_36_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_36_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_36_ice S2 Node!val!0) Epoch!val!3)
           (= (ep Model_36_ice S2 Node!val!1) Epoch!val!4)
           (= (held Model_36_ice S2 Node!val!0) false)
           (= (held Model_36_ice S2 Node!val!1) true)
           (= (transfer Model_36_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_36_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_36_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_36_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_36_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_36_ice S2 Epoch!val!4 Node!val!1) true)
           (= (transfer Model_36_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_36_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_36_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_36_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_36_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_36_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_36_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_36_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_36_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_36_ice S2 Epoch!val!4 Node!val!1) true)
           (= (locked Model_36_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_36_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_36_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_36_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_36_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_36_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_36_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_36_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_36_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_36_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_36_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_36_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_36_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_36_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_36_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_36_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_36_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_36_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_36_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_36_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_36_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_36_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_36_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_36_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_37_ice (ep Model_37_ice S1 n2) e1)
;       (le Model_37_ice (ep Model_37_ice S1 n1) (ep Model_37_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_37_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_37_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_37_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_37_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_37_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_37_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_37_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_37_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_37_ice,
;                              zero(Model_37_ice),
;                              Epoch_1),
;                           one(Model_37_ice) !=
;                           zero(Model_37_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_37_ice,
;                           S1,
;                           ep(Model_37_ice, S1, n1),
;                           n1)),
;                transfer(Model_37_ice,
;                         S1,
;                         ep(Model_37_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S1, e1, n1)),
;                le(Model_37_ice,
;                   e1,
;                   ep(Model_37_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S1, e1, n1)),
;                locked(Model_37_ice,
;                       S1,
;                       ep(Model_37_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_37_ice, S1, e1, n1)),
;                transfer(Model_37_ice, S1, e1, n1)))),
;  ForAll([n1, n2, e1],
;         Or(le(Model_37_ice, ep(Model_37_ice, S1, n2), e1),
;            le(Model_37_ice,
;               ep(Model_37_ice, S1, n1),
;               ep(Model_37_ice, S1, n2)))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_37_ice,
;                   ep(Model_37_ice, S2, n2),
;                   e1),
;                le(Model_37_ice,
;                   ep(Model_37_ice, S2, n1),
;                   ep(Model_37_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_37_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_37_ice,
;                               Epoch_1,
;                               ep(Model_37_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_37_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_37_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_37_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_37_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_37_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_37_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_37_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_37_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun Model_37_ice () ModelId
;   ModelId!val!0)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!2)
;        (not (= x!2 Epoch!val!3))
;        (not (= x!2 Epoch!val!1))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 ModelId!val!0)
;                        (= x!1 StateId!val!0)
;                        (not (= x!2 Node!val!1)))
;                   Epoch!val!4
;                   Epoch!val!2)))
;     (ite (and (= x!0 ModelId!val!0)
;               (= x!1 StateId!val!1)
;               (not (= x!2 Node!val!1)))
;          Epoch!val!4
;          (ite (and (= x!0 ModelId!val!0)
;                    (= x!1 StateId!val!1)
;                    (= x!2 Node!val!1))
;               Epoch!val!3
;               a!1))))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!1) (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!1))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!4)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!2 Epoch!val!4))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!1))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!3)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_37_ice S1 Node!val!0) Epoch!val!4)
                (= (ep Model_37_ice S1 Node!val!1) Epoch!val!3)
                (= (held Model_37_ice S1 Node!val!0) false)
                (= (held Model_37_ice S1 Node!val!1) false)
                (= (transfer Model_37_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_37_ice S1 Epoch!val!3 Node!val!1) false)
                (= (transfer Model_37_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_37_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_37_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_37_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_37_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_37_ice S1 Epoch!val!2 Node!val!1) true)
                (= (transfer Model_37_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_37_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_37_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_37_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_37_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_37_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_37_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_37_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_37_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_37_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_37_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_37_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_37_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_37_ice Epoch!val!3 Epoch!val!0) true)
                (= (le Model_37_ice Epoch!val!3 Epoch!val!4) true)
                (= (le Model_37_ice Epoch!val!3 Epoch!val!2) true)
                (= (le Model_37_ice Epoch!val!3 Epoch!val!1) true)
                (= (le Model_37_ice Epoch!val!0 Epoch!val!3) false)
                (= (le Model_37_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_37_ice Epoch!val!0 Epoch!val!4) true)
                (= (le Model_37_ice Epoch!val!0 Epoch!val!2) true)
                (= (le Model_37_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_37_ice Epoch!val!4 Epoch!val!3) false)
                (= (le Model_37_ice Epoch!val!4 Epoch!val!0) false)
                (= (le Model_37_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_37_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_37_ice Epoch!val!4 Epoch!val!1) false)
                (= (le Model_37_ice Epoch!val!2 Epoch!val!3) false)
                (= (le Model_37_ice Epoch!val!2 Epoch!val!0) false)
                (= (le Model_37_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_37_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_37_ice Epoch!val!2 Epoch!val!1) false)
                (= (le Model_37_ice Epoch!val!1 Epoch!val!3) false)
                (= (le Model_37_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_37_ice Epoch!val!1 Epoch!val!4) true)
                (= (le Model_37_ice Epoch!val!1 Epoch!val!2) true)
                (= (le Model_37_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_37_ice) Epoch!val!3)
                (= (one Model_37_ice) Epoch!val!1)
                (= (first Model_37_ice) Node!val!0)))
      (a!2 (and (inv Model_37_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_37_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_37_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_37_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_37_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_37_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_37_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_37_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_37_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_37_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_37_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_37_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_37_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_37_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_37_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_37_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_37_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_37_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_37_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_37_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_37_ice S2 Node!val!0) Epoch!val!4)
           (= (ep Model_37_ice S2 Node!val!1) Epoch!val!2)
           (= (held Model_37_ice S2 Node!val!0) false)
           (= (held Model_37_ice S2 Node!val!1) true)
           (= (transfer Model_37_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_37_ice S2 Epoch!val!3 Node!val!1) false)
           (= (transfer Model_37_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_37_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_37_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_37_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_37_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_37_ice S2 Epoch!val!2 Node!val!1) true)
           (= (transfer Model_37_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_37_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_37_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_37_ice S2 Epoch!val!3 Node!val!1) false)
           (= (locked Model_37_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_37_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_37_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_37_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_37_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_37_ice S2 Epoch!val!2 Node!val!1) true)
           (= (locked Model_37_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_37_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_37_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_37_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_37_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_37_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_37_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_37_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_37_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_37_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_37_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_37_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_37_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_37_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_37_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_37_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_37_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_37_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_37_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_37_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_37_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_37_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))


; candidate invariant was : (cex type: <class 'invar_synth.cegis.cex.ImplicationCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (le Model_38_ice (ep Model_38_ice S1 n2) e1)
;       (le Model_38_ice (ep Model_38_ice S1 n1) (ep Model_38_ice S1 n2))))
;;;;;;;; Counter example generation constraints: ;;;;;;;;
; [ForAll(Epoch_1,
;         ForAll(Epoch_2,
;                ForAll(Epoch_3,
;                       And(le(Model_38_ice, Epoch_1, Epoch_1),
;                           Implies(And(le(Model_38_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_38_ice,
;                                         Epoch_2,
;                                         Epoch_3)),
;                                   le(Model_38_ice,
;                                      Epoch_1,
;                                      Epoch_3)),
;                           Implies(And(le(Model_38_ice,
;                                         Epoch_1,
;                                         Epoch_2),
;                                       le(Model_38_ice,
;                                         Epoch_2,
;                                         Epoch_1)),
;                                   Epoch_1 == Epoch_2),
;                           Or(le(Model_38_ice,
;                                 Epoch_1,
;                                 Epoch_2),
;                              le(Model_38_ice,
;                                 Epoch_2,
;                                 Epoch_1)),
;                           le(Model_38_ice,
;                              zero(Model_38_ice),
;                              Epoch_1),
;                           one(Model_38_ice) !=
;                           zero(Model_38_ice))))),
;  And(True,
;      ForAll(n1,
;             Or(Not(locked(Model_38_ice,
;                           S1,
;                           ep(Model_38_ice, S1, n1),
;                           n1)),
;                transfer(Model_38_ice,
;                         S1,
;                         ep(Model_38_ice, S1, n1),
;                         n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S1, e1, n1)),
;                le(Model_38_ice,
;                   e1,
;                   ep(Model_38_ice, S1, n1)))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S1, e1, n1)),
;                locked(Model_38_ice,
;                       S1,
;                       ep(Model_38_ice, S1, n1),
;                       n1))),
;      ForAll([n1, e1],
;             Or(Not(locked(Model_38_ice, S1, e1, n1)),
;                transfer(Model_38_ice, S1, e1, n1)))),
;  ForAll([n1, n2, e1],
;         Or(le(Model_38_ice, ep(Model_38_ice, S1, n2), e1),
;            le(Model_38_ice,
;               ep(Model_38_ice, S1, n1),
;               ep(Model_38_ice, S1, n2)))),
;  Not(ForAll([n1, n2, e1],
;             Or(le(Model_38_ice,
;                   ep(Model_38_ice, S2, n2),
;                   e1),
;                le(Model_38_ice,
;                   ep(Model_38_ice, S2, n1),
;                   ep(Model_38_ice, S2, n2))))),
;  Exists(Node_1,
;         Exists(Epoch_1,
;                And(And(transfer(Model_38_ice,
;                                 S1,
;                                 Epoch_1,
;                                 Node_1),
;                        Not(le(Model_38_ice,
;                               Epoch_1,
;                               ep(Model_38_ice, S1, Node_1)))),
;                    And(ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      transfer(Model_38_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      transfer(Model_38_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))),
;                        ForAll(Node_2,
;                               held(Model_38_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  True,
;                                  held(Model_38_ice,
;                                       S1,
;                                       Node_2))),
;                        ForAll(Node_2,
;                               ep(Model_38_ice, S2, Node_2) ==
;                               If(And(Node_2 == Node_1),
;                                  Epoch_1,
;                                  ep(Model_38_ice,
;                                     S1,
;                                     Node_2))),
;                        ForAll(Epoch_2,
;                               ForAll(Node_2,
;                                      locked(Model_38_ice,
;                                         S2,
;                                         Epoch_2,
;                                         Node_2) ==
;                                      If(And(Epoch_2 ==
;                                         Epoch_1,
;                                         Node_2 == Node_1),
;                                         True,
;                                         locked(Model_38_ice,
;                                         S1,
;                                         Epoch_2,
;                                         Node_2))))))))]
;;;;;;;; Counter example generation constraints end ;;;;;;;;
;;;;;;;; Counter example model description: ;;;;;;;;
; ;; universe for ModelId:
; ;;   ModelId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun ModelId!val!0 () ModelId)
; ;; cardinality constraint:
; (forall ((x ModelId)) (= x ModelId!val!0))
; ;; -----------
; ;; universe for StateId:
; ;;   StateId!val!1 StateId!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun StateId!val!1 () StateId)
; (declare-fun StateId!val!0 () StateId)
; ;; cardinality constraint:
; (forall ((x StateId)) (or (= x StateId!val!1) (= x StateId!val!0)))
; ;; -----------
; ;; universe for Node:
; ;;   Node!val!0 Node!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!1 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!3 Epoch!val!0 Epoch!val!4 Epoch!val!2 Epoch!val!1 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!1 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!3)
;             (= x Epoch!val!0)
;             (= x Epoch!val!4)
;             (= x Epoch!val!2)
;             (= x Epoch!val!1)))
; ;; -----------
; (define-fun Model_38_ice () ModelId
;   ModelId!val!0)
; (define-fun S1 () StateId
;   StateId!val!1)
; (define-fun S2 () StateId
;   StateId!val!0)
; (define-fun locked ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (and (= x!0 ModelId!val!0)
;        (= x!1 StateId!val!0)
;        (= x!2 Epoch!val!3)
;        (not (= x!2 Epoch!val!2))
;        (not (= x!2 Epoch!val!1))
;        (not (= x!2 Epoch!val!0))
;        (= x!3 Node!val!1)))
; (define-fun ep ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Epoch
;   (ite (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1))
;     Epoch!val!3
;     Epoch!val!4))
; (define-fun le ((x!0 ModelId) (x!1 Epoch) (x!2 Epoch)) Bool
;   (or (and (= x!0 ModelId!val!0) (= x!1 Epoch!val!0) (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!0))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!1)
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (= x!2 Epoch!val!2)
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 Epoch!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))
;       (and (= x!0 ModelId!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!2 Epoch!val!3))
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0)))))
; (define-fun held ((x!0 ModelId) (x!1 StateId) (x!2 Node)) Bool
;   (and (= x!0 ModelId!val!0) (= x!1 StateId!val!0) (= x!2 Node!val!1)))
; (define-fun transfer ((x!0 ModelId) (x!1 StateId) (x!2 Epoch) (x!3 Node)) Bool
;   (or (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!0)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))
;       (and (= x!0 ModelId!val!0)
;            (= x!1 StateId!val!1)
;            (= x!2 Epoch!val!3)
;            (not (= x!2 Epoch!val!2))
;            (not (= x!2 Epoch!val!1))
;            (not (= x!2 Epoch!val!0))
;            (= x!3 Node!val!1))))
; (define-fun zero ((x!0 ModelId)) Epoch
;   Epoch!val!2)
; (define-fun one ((x!0 ModelId)) Epoch
;   Epoch!val!1)
;;;;;;;; Counter example model description end ;;;;;;;;
(assert (let ((a!1 (and (= (ep Model_38_ice S1 Node!val!0) Epoch!val!4)
                (= (ep Model_38_ice S1 Node!val!1) Epoch!val!4)
                (= (held Model_38_ice S1 Node!val!0) false)
                (= (held Model_38_ice S1 Node!val!1) false)
                (= (transfer Model_38_ice S1 Epoch!val!3 Node!val!0) false)
                (= (transfer Model_38_ice S1 Epoch!val!3 Node!val!1) true)
                (= (transfer Model_38_ice S1 Epoch!val!0 Node!val!0) false)
                (= (transfer Model_38_ice S1 Epoch!val!0 Node!val!1) false)
                (= (transfer Model_38_ice S1 Epoch!val!4 Node!val!0) false)
                (= (transfer Model_38_ice S1 Epoch!val!4 Node!val!1) false)
                (= (transfer Model_38_ice S1 Epoch!val!2 Node!val!0) false)
                (= (transfer Model_38_ice S1 Epoch!val!2 Node!val!1) false)
                (= (transfer Model_38_ice S1 Epoch!val!1 Node!val!0) false)
                (= (transfer Model_38_ice S1 Epoch!val!1 Node!val!1) false)
                (= (locked Model_38_ice S1 Epoch!val!3 Node!val!0) false)
                (= (locked Model_38_ice S1 Epoch!val!3 Node!val!1) false)
                (= (locked Model_38_ice S1 Epoch!val!0 Node!val!0) false)
                (= (locked Model_38_ice S1 Epoch!val!0 Node!val!1) false)
                (= (locked Model_38_ice S1 Epoch!val!4 Node!val!0) false)
                (= (locked Model_38_ice S1 Epoch!val!4 Node!val!1) false)
                (= (locked Model_38_ice S1 Epoch!val!2 Node!val!0) false)
                (= (locked Model_38_ice S1 Epoch!val!2 Node!val!1) false)
                (= (locked Model_38_ice S1 Epoch!val!1 Node!val!0) false)
                (= (locked Model_38_ice S1 Epoch!val!1 Node!val!1) false)
                (= (le Model_38_ice Epoch!val!3 Epoch!val!3) true)
                (= (le Model_38_ice Epoch!val!3 Epoch!val!0) false)
                (= (le Model_38_ice Epoch!val!3 Epoch!val!4) false)
                (= (le Model_38_ice Epoch!val!3 Epoch!val!2) false)
                (= (le Model_38_ice Epoch!val!3 Epoch!val!1) false)
                (= (le Model_38_ice Epoch!val!0 Epoch!val!3) true)
                (= (le Model_38_ice Epoch!val!0 Epoch!val!0) true)
                (= (le Model_38_ice Epoch!val!0 Epoch!val!4) true)
                (= (le Model_38_ice Epoch!val!0 Epoch!val!2) false)
                (= (le Model_38_ice Epoch!val!0 Epoch!val!1) false)
                (= (le Model_38_ice Epoch!val!4 Epoch!val!3) true)
                (= (le Model_38_ice Epoch!val!4 Epoch!val!0) false)
                (= (le Model_38_ice Epoch!val!4 Epoch!val!4) true)
                (= (le Model_38_ice Epoch!val!4 Epoch!val!2) false)
                (= (le Model_38_ice Epoch!val!4 Epoch!val!1) false)
                (= (le Model_38_ice Epoch!val!2 Epoch!val!3) true)
                (= (le Model_38_ice Epoch!val!2 Epoch!val!0) true)
                (= (le Model_38_ice Epoch!val!2 Epoch!val!4) true)
                (= (le Model_38_ice Epoch!val!2 Epoch!val!2) true)
                (= (le Model_38_ice Epoch!val!2 Epoch!val!1) true)
                (= (le Model_38_ice Epoch!val!1 Epoch!val!3) true)
                (= (le Model_38_ice Epoch!val!1 Epoch!val!0) true)
                (= (le Model_38_ice Epoch!val!1 Epoch!val!4) true)
                (= (le Model_38_ice Epoch!val!1 Epoch!val!2) false)
                (= (le Model_38_ice Epoch!val!1 Epoch!val!1) true)
                (= (zero Model_38_ice) Epoch!val!2)
                (= (one Model_38_ice) Epoch!val!1)
                (= (first Model_38_ice) Node!val!0)))
      (a!2 (and (inv Model_38_ice S1 Node!val!0 Node!val!0 Epoch!val!3)
                (inv Model_38_ice S1 Node!val!0 Node!val!0 Epoch!val!0)
                (inv Model_38_ice S1 Node!val!0 Node!val!0 Epoch!val!4)
                (inv Model_38_ice S1 Node!val!0 Node!val!0 Epoch!val!2)
                (inv Model_38_ice S1 Node!val!0 Node!val!0 Epoch!val!1)
                (inv Model_38_ice S1 Node!val!0 Node!val!1 Epoch!val!3)
                (inv Model_38_ice S1 Node!val!0 Node!val!1 Epoch!val!0)
                (inv Model_38_ice S1 Node!val!0 Node!val!1 Epoch!val!4)
                (inv Model_38_ice S1 Node!val!0 Node!val!1 Epoch!val!2)
                (inv Model_38_ice S1 Node!val!0 Node!val!1 Epoch!val!1)
                (inv Model_38_ice S1 Node!val!1 Node!val!0 Epoch!val!3)
                (inv Model_38_ice S1 Node!val!1 Node!val!0 Epoch!val!0)
                (inv Model_38_ice S1 Node!val!1 Node!val!0 Epoch!val!4)
                (inv Model_38_ice S1 Node!val!1 Node!val!0 Epoch!val!2)
                (inv Model_38_ice S1 Node!val!1 Node!val!0 Epoch!val!1)
                (inv Model_38_ice S1 Node!val!1 Node!val!1 Epoch!val!3)
                (inv Model_38_ice S1 Node!val!1 Node!val!1 Epoch!val!0)
                (inv Model_38_ice S1 Node!val!1 Node!val!1 Epoch!val!4)
                (inv Model_38_ice S1 Node!val!1 Node!val!1 Epoch!val!2)
                (inv Model_38_ice S1 Node!val!1 Node!val!1 Epoch!val!1))))
  (or (and a!1 (not a!2))
      (and a!1
           a!2
           (= (ep Model_38_ice S2 Node!val!0) Epoch!val!4)
           (= (ep Model_38_ice S2 Node!val!1) Epoch!val!3)
           (= (held Model_38_ice S2 Node!val!0) false)
           (= (held Model_38_ice S2 Node!val!1) true)
           (= (transfer Model_38_ice S2 Epoch!val!3 Node!val!0) false)
           (= (transfer Model_38_ice S2 Epoch!val!3 Node!val!1) true)
           (= (transfer Model_38_ice S2 Epoch!val!0 Node!val!0) false)
           (= (transfer Model_38_ice S2 Epoch!val!0 Node!val!1) false)
           (= (transfer Model_38_ice S2 Epoch!val!4 Node!val!0) false)
           (= (transfer Model_38_ice S2 Epoch!val!4 Node!val!1) false)
           (= (transfer Model_38_ice S2 Epoch!val!2 Node!val!0) false)
           (= (transfer Model_38_ice S2 Epoch!val!2 Node!val!1) false)
           (= (transfer Model_38_ice S2 Epoch!val!1 Node!val!0) false)
           (= (transfer Model_38_ice S2 Epoch!val!1 Node!val!1) false)
           (= (locked Model_38_ice S2 Epoch!val!3 Node!val!0) false)
           (= (locked Model_38_ice S2 Epoch!val!3 Node!val!1) true)
           (= (locked Model_38_ice S2 Epoch!val!0 Node!val!0) false)
           (= (locked Model_38_ice S2 Epoch!val!0 Node!val!1) false)
           (= (locked Model_38_ice S2 Epoch!val!4 Node!val!0) false)
           (= (locked Model_38_ice S2 Epoch!val!4 Node!val!1) false)
           (= (locked Model_38_ice S2 Epoch!val!2 Node!val!0) false)
           (= (locked Model_38_ice S2 Epoch!val!2 Node!val!1) false)
           (= (locked Model_38_ice S2 Epoch!val!1 Node!val!0) false)
           (= (locked Model_38_ice S2 Epoch!val!1 Node!val!1) false)
           (inv Model_38_ice S2 Node!val!0 Node!val!0 Epoch!val!3)
           (inv Model_38_ice S2 Node!val!0 Node!val!0 Epoch!val!0)
           (inv Model_38_ice S2 Node!val!0 Node!val!0 Epoch!val!4)
           (inv Model_38_ice S2 Node!val!0 Node!val!0 Epoch!val!2)
           (inv Model_38_ice S2 Node!val!0 Node!val!0 Epoch!val!1)
           (inv Model_38_ice S2 Node!val!0 Node!val!1 Epoch!val!3)
           (inv Model_38_ice S2 Node!val!0 Node!val!1 Epoch!val!0)
           (inv Model_38_ice S2 Node!val!0 Node!val!1 Epoch!val!4)
           (inv Model_38_ice S2 Node!val!0 Node!val!1 Epoch!val!2)
           (inv Model_38_ice S2 Node!val!0 Node!val!1 Epoch!val!1)
           (inv Model_38_ice S2 Node!val!1 Node!val!0 Epoch!val!3)
           (inv Model_38_ice S2 Node!val!1 Node!val!0 Epoch!val!0)
           (inv Model_38_ice S2 Node!val!1 Node!val!0 Epoch!val!4)
           (inv Model_38_ice S2 Node!val!1 Node!val!0 Epoch!val!2)
           (inv Model_38_ice S2 Node!val!1 Node!val!0 Epoch!val!1)
           (inv Model_38_ice S2 Node!val!1 Node!val!1 Epoch!val!3)
           (inv Model_38_ice S2 Node!val!1 Node!val!1 Epoch!val!0)
           (inv Model_38_ice S2 Node!val!1 Node!val!1 Epoch!val!4)
           (inv Model_38_ice S2 Node!val!1 Node!val!1 Epoch!val!2)
           (inv Model_38_ice S2 Node!val!1 Node!val!1 Epoch!val!1)))))



;(declare-fun DUMMYMODEL () ModelId)
;(declare-fun DUMMYSTATE () StateId)
(declare-fun N1 () Node)
(declare-fun N2 () Node)
(declare-fun E1 () Epoch)


;(assert (not (= (inv DUMMYMODEL DUMMYSTATE N1 N2 E1) true)))

(check-sat)
        