(set-logic ALL)

(declare-sort Node)
(declare-sort Epoch)
;(declare-fun zero () Epoch)
;(declare-fun one () Epoch)
;(declare-fun le (Epoch Epoch) Bool)
(declare-fun pre.transfer (Epoch Node) Bool)
;(declare-fun pre.locked (Epoch Node) Bool)
(declare-fun post.transfer (Epoch Node) Bool)
;(declare-fun post.locked (Epoch Node) Bool)
;(declare-fun pre.ep (Node) Epoch)
;(declare-fun pre.held (Node) Bool)
(declare-fun post.ep (Node) Epoch)
(declare-fun post.held (Node) Bool)


  (declare-fun Epoch!val!3 () Epoch)
  (declare-fun Epoch!val!4 () Epoch)
  (declare-fun Epoch!val!2 () Epoch)
  (declare-fun Epoch!val!5 () Epoch)
  (declare-fun Epoch!val!1 () Epoch)
  (declare-fun Epoch!val!0 () Epoch)
  ;; cardinality constraint:
  (assert (forall ((x Epoch))
          (or (= x Epoch!val!3)
              (= x Epoch!val!4)
              (= x Epoch!val!2)
              (= x Epoch!val!5)
              (= x Epoch!val!1)
              (= x Epoch!val!0))))
  ;; -----------
  ;; universe for Node:
  ;;   Node!val!0 Node!val!1 
  ;; -----------
  ;; definitions for universe elements:
  (declare-fun Node!val!0 () Node)
  (declare-fun Node!val!1 () Node)
  ;; cardinality constraint:
  (assert (forall ((x Node)) (or (= x Node!val!0) (= x Node!val!1))))
  ;; -----------
  (define-fun one () Epoch
    Epoch!val!4)
  (define-fun zero () Epoch
    Epoch!val!5)
;  (define-fun post.transfer ((x!0 Epoch) (x!1 Node)) Bool
;    true)
  (define-fun pre.ep ((x!0 Node)) Epoch
    Epoch!val!3)
  (define-fun pre.held ((x!0 Node)) Bool
    true)
  (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
    (or (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5)
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (not (= x!0 Epoch!val!4))
             (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5)
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!2)
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5)
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5)
             (= x!1 Epoch!val!3)
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!3)
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!1)
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (not (= x!1 Epoch!val!4))
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!1) (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!1)
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!4)
             (not (= x!0 Epoch!val!3))
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!2)
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!3)
             (not (= x!0 Epoch!val!2))
             (not (= x!0 Epoch!val!1))
             (not (= x!0 Epoch!val!5))
             (= x!1 Epoch!val!4)
             (not (= x!1 Epoch!val!3))
             (not (= x!1 Epoch!val!2))
             (not (= x!1 Epoch!val!1))
             (not (= x!1 Epoch!val!5)))
        (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!5))))
  (define-fun post.locked ((x!0 Epoch) (x!1 Node)) Bool
    false)
  (define-fun pre.locked ((x!0 Epoch) (x!1 Node)) Bool
    false)
  ;(define-fun pre.transfer ((x!0 Epoch) (x!1 Node)) Bool
  ;  false)


(assert (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
  (and (le e1 e1)
       (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
       (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
       (or (le e1 e2) (le e2 e1))
       (le zero e1)
       (distinct one zero))))
(assert (forall ((E2 Epoch) (N1 Node) (E1 Epoch))
  (=> (and (le E1 E2) (distinct E1 E2))
      (or (pre.locked E1 N1)
          (not (pre.transfer E1 N1))
          (not (pre.transfer E2 N1))))))
(assert (let ((a!1 (forall ((E2 Epoch) (N1 Node) (E1 Epoch))
             (=> (and (le E1 E2) (distinct E1 E2))
                 (or (post.locked E1 N1)
                     (not (post.transfer E1 N1))
                     (not (post.transfer E2 N1)))))))
  (not a!1)))
(assert (exists ((n1 Node) (n2 Node) (e Epoch))
  (and (pre.held n1) (not (le e (pre.ep n1))))))

(assert (forall ((n1 Node) (n2 Node) (e Epoch))
  (let ((a!1 (and (pre.held n1) (not (le e (pre.ep n1)))))
        (a!2 (forall ((EE Epoch) (NN Node))
               (= (post.transfer EE NN)
                  (ite (and (= EE e) (= NN n2)) true (pre.transfer EE NN)))))
        (a!3 (forall ((NN Node))
               (= (post.held NN) (ite (= NN n1) false (pre.held NN))))))
  (let ((a!4 (and true
                  a!2
                  a!3
                  (forall ((EE Epoch) (NN Node))
                    (= (post.locked EE NN) (pre.locked EE NN)))
                  (forall ((NN Node)) (= (post.ep NN) (pre.ep NN)))
            )))
    
         (=> a!1 a!4)
         
    ))))

;(assert (le Epoch!val!4 Epoch!val!3))
;(assert (distinct Node!val!0 Node!val!1))

(check-sat)
(get-model)
(eval (le Epoch!val!3 Epoch!val!4))