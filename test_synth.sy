
(set-logic ALL)

(set-option :random-seed 123)

(declare-sort ModelId)
(declare-sort StateId)
(declare-sort Node)
(declare-sort Epoch)

(declare-fun Node!val!0 () Node)
(declare-fun Node!val!2 () Node)
(declare-fun Node!val!1 () Node)

(declare-fun Epoch!val!2 () Epoch)
(declare-fun Epoch!val!1 () Epoch)
(declare-fun Epoch!val!0 () Epoch)
(declare-fun Epoch!val!5 () Epoch)
(declare-fun Epoch!val!4 () Epoch)
(declare-fun Epoch!val!3 () Epoch)

(declare-fun Model_8_ice () ModelId)
(declare-fun Model_19_ice () ModelId)
(declare-fun Model_5_ice () ModelId)
(declare-fun Model_21_ice () ModelId)
(declare-fun Model_9_ice () ModelId)
(declare-fun Model_22_ice () ModelId)
(declare-fun Model_7_ice () ModelId)
(declare-fun Model_13_ice () ModelId)
(declare-fun Model_0_pos () ModelId)
(declare-fun Model_12_ice () ModelId)
(declare-fun Model_24_ice () ModelId)
(declare-fun Model_4_neg () ModelId)
(declare-fun Model_6_ice () ModelId)
(declare-fun Model_2_pos () ModelId)
(declare-fun Model_17_ice () ModelId)
(declare-fun Model_20_ice () ModelId)
(declare-fun Model_23_ice () ModelId)
(declare-fun Model_14_pos () ModelId)
(declare-fun Model_15_ice () ModelId)
(declare-fun Model_18_ice () ModelId)
(declare-fun Model_10_ice () ModelId)
(declare-fun Model_16_ice () ModelId)
(declare-fun Model_11_ice () ModelId)

(declare-fun S2 () StateId)
(declare-fun S1 () StateId)
(declare-fun init () StateId)


(declare-fun held (ModelId StateId Node) Bool)
(declare-fun locked (ModelId StateId Epoch Node) Bool)
(declare-fun transfer (ModelId StateId Epoch Node) Bool)
(declare-fun ep (ModelId StateId Node) Epoch)
(declare-fun le (ModelId Epoch Epoch) Bool)
(declare-fun zero (ModelId) Epoch)
(declare-fun one (ModelId) Epoch)
(declare-fun first (ModelId) Node)

(synth-fun inv ((m ModelId) (s StateId) (n1 Node) (e1 Epoch) (e2 Epoch)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool 
            (
                Atom
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool 
            (
                (held m s Node_)
                (locked m s Epoch_ Node_)
                (transfer m s Epoch_ Node_)
                (le m Epoch_ Epoch_)

                (= Node_ Node_)
                (= Epoch_ Epoch_)

                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)     
            )
        )

        (Node_ Node
            (
                n1
            )
        )

        (Epoch_ Epoch
            (
                e1
e2
                (ep m s Node_)
            )
        )
    
    )
)



;(declare-fun DUMMYMODEL () ModelId)
;(declare-fun DUMMYSTATE () StateId)
(declare-fun N1 () Node)
(declare-fun E1 () Epoch)
(declare-fun E2 () Epoch)


;(assert (not (= (inv DUMMYMODEL DUMMYSTATE N1 E1 E2) true)))

(check-synth)
        