
(set-logic ALL)

(declare-sort ModelId)
(declare-sort Node)
(declare-sort Epoch)

(declare-fun Node!val!1_m (ModelId) Node)
(declare-fun Node!val!2_m (ModelId) Node)
(declare-fun Node!val!0_m (ModelId) Node)

(declare-fun Epoch!val!4_m (ModelId) Epoch)
(declare-fun Epoch!val!6_m (ModelId) Epoch)
(declare-fun Epoch!val!0_m (ModelId) Epoch)
(declare-fun Epoch!val!5_m (ModelId) Epoch)
(declare-fun Epoch!val!3_m (ModelId) Epoch)
(declare-fun Epoch!val!1_m (ModelId) Epoch)
(declare-fun Epoch!val!2_m (ModelId) Epoch)

(declare-fun Model_0 () ModelId)
(declare-fun Model_19 () ModelId)
(declare-fun Model_12 () ModelId)
(declare-fun Model_20 () ModelId)
(declare-fun Model_15 () ModelId)
(declare-fun Model_5 () ModelId)
(declare-fun Model_1 () ModelId)
(declare-fun Model_22 () ModelId)
(declare-fun Model_17 () ModelId)
(declare-fun Model_23 () ModelId)
(declare-fun Model_2 () ModelId)
(declare-fun Model_8 () ModelId)
(declare-fun Model_10 () ModelId)
(declare-fun Model_21 () ModelId)
(declare-fun Model_25 () ModelId)
(declare-fun Model_3 () ModelId)
(declare-fun Model_16 () ModelId)
(declare-fun Model_11 () ModelId)
(declare-fun Model_13 () ModelId)
(declare-fun Model_7 () ModelId)
(declare-fun Model_24 () ModelId)
(declare-fun Model_14 () ModelId)
(declare-fun Model_18 () ModelId)
(declare-fun Model_4 () ModelId)
(declare-fun Model_9 () ModelId)
(declare-fun Model_26 () ModelId)
(declare-fun Model_6 () ModelId)


(declare-fun held_m (ModelId Node) Bool)
(declare-fun locked_m (ModelId Epoch Node) Bool)
(declare-fun transfer_m (ModelId Epoch Node) Bool)
(declare-fun ep_m (ModelId Node) Epoch)
(declare-fun le_m (ModelId Epoch Epoch) Bool)
(declare-fun zero_m (ModelId) Epoch)
(declare-fun one_m (ModelId) Epoch)
(declare-fun first_m (ModelId) Node)

(synth-fun inv ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool

    ;; Declare the non-terminals that would be used in the grammar
    ((Start Bool) (Atom Bool) (Node_ Node) (Epoch_ Epoch))

    ;; Define the grammar for allowed implementations of inv
    (
        (Start Bool 
            (
                (and Atom Atom)
                (or Atom Atom)
                (=> Atom Atom)
                (not Atom)
            )
        )

        (Atom Bool 
            (
                (held_m m Node_)
                (locked_m m Epoch_ Node_)
                (transfer_m m Epoch_ Node_)
                (le_m m Epoch_ Epoch_)
            )
        )

        (Node_ Node
            (
                n1
n2
            )
        )

        (Epoch_ Epoch
            (
                e1
                (ep_m m Node_)
            )
        )
    
    )
)

; candidate invariant was : (cex type: <class '__main__.PositiveCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero)))))
;   (and a!1 false))
; [ForAll([n, e],
;         And(held(n) == (n == first),
;             Implies(n != first, ep(n) == zero),
;             ep(first) == one,
;             transfer(e, n) == False,
;             locked(e, n) == False)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  Not(And(ForAll([e1, e2, e3],
;                 And(le(e1, e1),
;                     Implies(And(le(e1, e2), le(e2, e3)),
;                             le(e1, e3)),
;                     Implies(And(le(e1, e2), le(e2, e1)),
;                             e1 == e2),
;                     Or(le(e1, e2), le(e2, e1)),
;                     le(zero, e1),
;                     one != zero)),
;          False))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!1) (= x Epoch!val!2) (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun first () Node
;   Node!val!0)
; (define-fun one () Epoch
;   Epoch!val!1)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!1)) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))))
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_0) ))
(constraint (distinct (Epoch!val!1_m Model_0)  (Epoch!val!2_m Model_0)  (Epoch!val!0_m Model_0) ))
(constraint (and (= (zero_m Model_0) (Epoch!val!2_m Model_0))
     (= (first_m Model_0) (Node!val!0_m Model_0))
     (= (one_m Model_0) (Epoch!val!1_m Model_0))
     (= (ep_m Model_0 (Node!val!0_m Model_0)) (Epoch!val!1_m Model_0))
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!1_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!2_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!1_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!1_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!2_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!2_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!1_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!2_m Model_0)) false)
     (= (le_m Model_0 (Epoch!val!0_m Model_0) (Epoch!val!0_m Model_0)) true)
     (= (held_m Model_0 (Node!val!0_m Model_0)) true)
     (= (transfer_m Model_0 (Epoch!val!1_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (transfer_m Model_0 (Epoch!val!2_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (transfer_m Model_0 (Epoch!val!0_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (locked_m Model_0 (Epoch!val!1_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (locked_m Model_0 (Epoch!val!2_m Model_0) (Node!val!0_m Model_0))
        false)
     (= (locked_m Model_0 (Epoch!val!0_m Model_0) (Node!val!0_m Model_0))
        false)
     (inv Model_0
          (Node!val!0_m Model_0)
          (Node!val!0_m Model_0)
          (Epoch!val!1_m Model_0))
     (inv Model_0
          (Node!val!0_m Model_0)
          (Node!val!0_m Model_0)
          (Epoch!val!2_m Model_0))
     (inv Model_0
          (Node!val!0_m Model_0)
          (Node!val!0_m Model_0)
          (Epoch!val!0_m Model_0))))


; candidate invariant was : (cex type: <class '__main__.PositiveCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero)))))
;   (and a!1 (forall ((n1 Node)) (held n1))))
; [ForAll([n, e],
;         And(held(n) == (n == first),
;             Implies(n != first, ep(n) == zero),
;             ep(first) == one,
;             transfer(e, n) == False,
;             locked(e, n) == False)),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  Not(And(ForAll([e1, e2, e3],
;                 And(le(e1, e1),
;                     Implies(And(le(e1, e2), le(e2, e3)),
;                             le(e1, e3)),
;                     Implies(And(le(e1, e2), le(e2, e1)),
;                             e1 == e2),
;                     Or(le(e1, e2), le(e2, e1)),
;                     le(zero, e1),
;                     one != zero)),
;          ForAll(n1, held(n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!1) (= x Epoch!val!2) (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun first () Node
;   Node!val!1)
; (define-fun one () Epoch
;   Epoch!val!1)
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!1
;     Epoch!val!2))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!1))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!1)) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_1)  (Node!val!0_m Model_1) ))
(constraint (distinct (Epoch!val!1_m Model_1)  (Epoch!val!2_m Model_1)  (Epoch!val!0_m Model_1) ))
(constraint (and (= (zero_m Model_1) (Epoch!val!2_m Model_1))
     (= (first_m Model_1) (Node!val!1_m Model_1))
     (= (one_m Model_1) (Epoch!val!1_m Model_1))
     (= (ep_m Model_1 (Node!val!1_m Model_1)) (Epoch!val!1_m Model_1))
     (= (ep_m Model_1 (Node!val!0_m Model_1)) (Epoch!val!2_m Model_1))
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!1_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!2_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!1_m Model_1) (Epoch!val!0_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!1_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!2_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!2_m Model_1) (Epoch!val!0_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!1_m Model_1)) true)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!2_m Model_1)) false)
     (= (le_m Model_1 (Epoch!val!0_m Model_1) (Epoch!val!0_m Model_1)) true)
     (= (held_m Model_1 (Node!val!1_m Model_1)) true)
     (= (held_m Model_1 (Node!val!0_m Model_1)) false)
     (= (transfer_m Model_1 (Epoch!val!1_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!1_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!2_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!2_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!0_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (transfer_m Model_1 (Epoch!val!0_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!1_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!1_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!2_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!2_m Model_1) (Node!val!0_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!0_m Model_1) (Node!val!1_m Model_1))
        false)
     (= (locked_m Model_1 (Epoch!val!0_m Model_1) (Node!val!0_m Model_1))
        false)
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!1_m Model_1))
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!2_m Model_1))
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!0_m Model_1))
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!1_m Model_1))
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!2_m Model_1))
     (inv Model_1
          (Node!val!1_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!0_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!1_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!2_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!1_m Model_1)
          (Epoch!val!0_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!1_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!2_m Model_1))
     (inv Model_1
          (Node!val!0_m Model_1)
          (Node!val!0_m Model_1)
          (Epoch!val!0_m Model_1))))


; candidate invariant was : (cex type: <class '__main__.NegativeCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero))))
;       (a!2 (forall ((n1 Node) (e1 Epoch))
;              (or (transfer e1 n1) (le (ep n1) (ep n1))))))
;   (and a!1 a!2))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  And(ForAll([e1, e2, e3],
;             And(le(e1, e1),
;                 Implies(And(le(e1, e2), le(e2, e3)),
;                         le(e1, e3)),
;                 Implies(And(le(e1, e2), le(e2, e1)),
;                         e1 == e2),
;                 Or(le(e1, e2), le(e2, e1)),
;                 le(zero, e1),
;                 one != zero)),
;      ForAll([n1, e1],
;             Or(transfer(e1, n1),
;                le(ep(n1), ep(n1))))),
;  Not(ForAll([e1, n1, n2],
;             Implies(And(locked(e1, n1),
;                         locked(e1, n2)),
;                     n1 == n2)))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   true)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!1) (not (= x!0 Epoch!val!2)) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!2))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   true)
(constraint (distinct (Node!val!1_m Model_2)  (Node!val!0_m Model_2)  (Node!val!2_m Model_2) ))
(constraint (distinct (Epoch!val!1_m Model_2)  (Epoch!val!2_m Model_2)  (Epoch!val!3_m Model_2)  (Epoch!val!0_m Model_2) ))
(constraint (let ((a!1 (not (and (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!1_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!0_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!1_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!0_m Model_2)
                          (Epoch!val!0_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!1_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!2_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!3_m Model_2))
                     (inv Model_2
                          (Node!val!2_m Model_2)
                          (Node!val!2_m Model_2)
                          (Epoch!val!0_m Model_2))))))
  (and (= (one_m Model_2) (Epoch!val!2_m Model_2))
       (= (zero_m Model_2) (Epoch!val!3_m Model_2))
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!1_m Model_2) (Epoch!val!0_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!1_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!2_m Model_2) (Epoch!val!0_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!3_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!3_m Model_2) (Epoch!val!0_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!1_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!2_m Model_2)) true)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!3_m Model_2)) false)
       (= (le_m Model_2 (Epoch!val!0_m Model_2) (Epoch!val!0_m Model_2)) true)
       (= (ep_m Model_2 (Node!val!1_m Model_2)) (Epoch!val!1_m Model_2))
       (= (ep_m Model_2 (Node!val!0_m Model_2)) (Epoch!val!1_m Model_2))
       (= (ep_m Model_2 (Node!val!2_m Model_2)) (Epoch!val!1_m Model_2))
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!1_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!2_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!3_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!1_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!0_m Model_2))
          true)
       (= (transfer_m Model_2
                          (Epoch!val!0_m Model_2)
                          (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!1_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!2_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!3_m Model_2) (Node!val!2_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!1_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!0_m Model_2))
          true)
       (= (locked_m Model_2 (Epoch!val!0_m Model_2) (Node!val!2_m Model_2))
          true)
       a!1)))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (locked (ep n1) n1)) (le (ep n1) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(locked(ep(n1), n1)),
;            le(ep(n1), e1))),
;  Not(ForAll([n1, e1],
;             Or(Not(locked(ep(n1), n1)),
;                le(ep(n1), e1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!6
;     Epoch!val!2))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_3)  (Node!val!0_m Model_3) ))
(constraint (distinct (Epoch!val!1_m Model_3)  (Epoch!val!2_m Model_3)  (Epoch!val!3_m Model_3)  (Epoch!val!6_m Model_3)  (Epoch!val!4_m Model_3)  (Epoch!val!5_m Model_3)  (Epoch!val!0_m Model_3) ))
(constraint (let ((a!1 (and (= (one_m Model_3) (Epoch!val!4_m Model_3))
                (= (zero_m Model_3) (Epoch!val!5_m Model_3))
                (le_m Model_3 (Epoch!val!1_m Model_3) (Epoch!val!1_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!1_m Model_3)
                           (Epoch!val!2_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!1_m Model_3)
                           (Epoch!val!3_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!1_m Model_3)
                           (Epoch!val!6_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!1_m Model_3)
                           (Epoch!val!4_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!1_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!1_m Model_3) (Epoch!val!0_m Model_3))
                (le_m Model_3 (Epoch!val!2_m Model_3) (Epoch!val!1_m Model_3))
                (le_m Model_3 (Epoch!val!2_m Model_3) (Epoch!val!2_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!2_m Model_3)
                           (Epoch!val!3_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!2_m Model_3)
                           (Epoch!val!6_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!2_m Model_3)
                           (Epoch!val!4_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!2_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!2_m Model_3) (Epoch!val!0_m Model_3))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!1_m Model_3))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!2_m Model_3))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!3_m Model_3))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!6_m Model_3))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!4_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!3_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!3_m Model_3) (Epoch!val!0_m Model_3))
                (le_m Model_3 (Epoch!val!6_m Model_3) (Epoch!val!1_m Model_3))
                (le_m Model_3 (Epoch!val!6_m Model_3) (Epoch!val!2_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!6_m Model_3)
                           (Epoch!val!3_m Model_3)))
                (le_m Model_3 (Epoch!val!6_m Model_3) (Epoch!val!6_m Model_3))
                (le_m Model_3 (Epoch!val!6_m Model_3) (Epoch!val!4_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!6_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!6_m Model_3) (Epoch!val!0_m Model_3))
                (le_m Model_3 (Epoch!val!4_m Model_3) (Epoch!val!1_m Model_3))
                (le_m Model_3 (Epoch!val!4_m Model_3) (Epoch!val!2_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!4_m Model_3)
                           (Epoch!val!3_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!4_m Model_3)
                           (Epoch!val!6_m Model_3)))
                (le_m Model_3 (Epoch!val!4_m Model_3) (Epoch!val!4_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!4_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!4_m Model_3) (Epoch!val!0_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!1_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!2_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!3_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!6_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!4_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!5_m Model_3))
                (le_m Model_3 (Epoch!val!5_m Model_3) (Epoch!val!0_m Model_3))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!1_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!2_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!3_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!6_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!4_m Model_3)))
                (not (le_m Model_3
                           (Epoch!val!0_m Model_3)
                           (Epoch!val!5_m Model_3)))
                (le_m Model_3 (Epoch!val!0_m Model_3) (Epoch!val!0_m Model_3))
                (not (transfer_m Model_3
                                     (Epoch!val!1_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!1_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!2_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!2_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!3_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!3_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!6_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!6_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!4_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!4_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!5_m Model_3)
                                     (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                     (Epoch!val!5_m Model_3)
                                     (Node!val!0_m Model_3)))
                (transfer_m Model_3
                                (Epoch!val!0_m Model_3)
                                (Node!val!1_m Model_3))
                (not (transfer_m Model_3
                                     (Epoch!val!0_m Model_3)
                                     (Node!val!0_m Model_3)))
                (not (held_m Model_3 (Node!val!1_m Model_3)))
                (not (held_m Model_3 (Node!val!0_m Model_3)))
                (= (ep_m Model_3 (Node!val!1_m Model_3))
                   (Epoch!val!6_m Model_3))
                (= (ep_m Model_3 (Node!val!0_m Model_3))
                   (Epoch!val!2_m Model_3))
                (not (locked_m Model_3
                                   (Epoch!val!1_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!1_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!2_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!2_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!3_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!3_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!6_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!6_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!4_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!4_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!5_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!5_m Model_3)
                                   (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!0_m Model_3)
                                   (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                   (Epoch!val!0_m Model_3)
                                   (Node!val!0_m Model_3)))))
      (a!2 (and (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!1_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!2_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!3_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!6_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!4_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!5_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!0_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!1_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!2_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!3_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!6_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!4_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!5_m Model_3))
                (inv Model_3
                     (Node!val!1_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!0_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!1_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!2_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!3_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!6_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!4_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!5_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!1_m Model_3)
                     (Epoch!val!0_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!1_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!2_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!3_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!6_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!4_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!5_m Model_3))
                (inv Model_3
                     (Node!val!0_m Model_3)
                     (Node!val!0_m Model_3)
                     (Epoch!val!0_m Model_3))))
      (a!3 (and (= (ep_m Model_3 (Node!val!1_m Model_3))
                   (Epoch!val!0_m Model_3))
                (= (ep_m Model_3 (Node!val!0_m Model_3))
                   (Epoch!val!2_m Model_3))
                (not (locked_m Model_3
                                    (Epoch!val!1_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!1_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!2_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!2_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!3_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!3_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!6_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!6_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!4_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!4_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!5_m Model_3)
                                    (Node!val!1_m Model_3)))
                (not (locked_m Model_3
                                    (Epoch!val!5_m Model_3)
                                    (Node!val!0_m Model_3)))
                (locked_m Model_3
                               (Epoch!val!0_m Model_3)
                               (Node!val!1_m Model_3))
                (not (locked_m Model_3
                                    (Epoch!val!0_m Model_3)
                                    (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!1_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!1_m Model_3)
                                      (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!2_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!2_m Model_3)
                                      (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!3_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!3_m Model_3)
                                      (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!6_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!6_m Model_3)
                                      (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!4_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!4_m Model_3)
                                      (Node!val!0_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!5_m Model_3)
                                      (Node!val!1_m Model_3)))
                (not (transfer_m Model_3
                                      (Epoch!val!5_m Model_3)
                                      (Node!val!0_m Model_3)))
                (transfer_m Model_3
                                 (Epoch!val!0_m Model_3)
                                 (Node!val!1_m Model_3))
                (not (transfer_m Model_3
                                      (Epoch!val!0_m Model_3)
                                      (Node!val!0_m Model_3)))
                (held_m Model_3 (Node!val!1_m Model_3))
                (not (held_m Model_3 (Node!val!0_m Model_3))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (transfer e1 n1)) (le e1 (ep n1))))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(transfer(e1, n1)), le(e1, ep(n1)))),
;  Not(ForAll([n1, e1],
;             Or(Not(transfer(e1, n1)),
;                le(e1, ep(n1)))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch)) (or (= x Epoch!val!1) (= x Epoch!val!2) (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!0)
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!0) (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0) (not (= x!0 Epoch!val!2))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_4) ))
(constraint (distinct (Epoch!val!1_m Model_4)  (Epoch!val!2_m Model_4)  (Epoch!val!0_m Model_4) ))
(constraint (let ((a!1 (and (= (one_m Model_4) (Epoch!val!0_m Model_4))
                (= (zero_m Model_4) (Epoch!val!2_m Model_4))
                (le_m Model_4 (Epoch!val!1_m Model_4) (Epoch!val!1_m Model_4))
                (not (le_m Model_4
                           (Epoch!val!1_m Model_4)
                           (Epoch!val!2_m Model_4)))
                (le_m Model_4 (Epoch!val!1_m Model_4) (Epoch!val!0_m Model_4))
                (le_m Model_4 (Epoch!val!2_m Model_4) (Epoch!val!1_m Model_4))
                (le_m Model_4 (Epoch!val!2_m Model_4) (Epoch!val!2_m Model_4))
                (le_m Model_4 (Epoch!val!2_m Model_4) (Epoch!val!0_m Model_4))
                (not (le_m Model_4
                           (Epoch!val!0_m Model_4)
                           (Epoch!val!1_m Model_4)))
                (not (le_m Model_4
                           (Epoch!val!0_m Model_4)
                           (Epoch!val!2_m Model_4)))
                (le_m Model_4 (Epoch!val!0_m Model_4) (Epoch!val!0_m Model_4))
                (not (transfer_m Model_4
                                     (Epoch!val!1_m Model_4)
                                     (Node!val!0_m Model_4)))
                (not (transfer_m Model_4
                                     (Epoch!val!2_m Model_4)
                                     (Node!val!0_m Model_4)))
                (not (transfer_m Model_4
                                     (Epoch!val!0_m Model_4)
                                     (Node!val!0_m Model_4)))
                (held_m Model_4 (Node!val!0_m Model_4))
                (= (ep_m Model_4 (Node!val!0_m Model_4))
                   (Epoch!val!1_m Model_4))
                (not (locked_m Model_4
                                   (Epoch!val!1_m Model_4)
                                   (Node!val!0_m Model_4)))
                (not (locked_m Model_4
                                   (Epoch!val!2_m Model_4)
                                   (Node!val!0_m Model_4)))
                (not (locked_m Model_4
                                   (Epoch!val!0_m Model_4)
                                   (Node!val!0_m Model_4)))))
      (a!2 (and (inv Model_4
                     (Node!val!0_m Model_4)
                     (Node!val!0_m Model_4)
                     (Epoch!val!1_m Model_4))
                (inv Model_4
                     (Node!val!0_m Model_4)
                     (Node!val!0_m Model_4)
                     (Epoch!val!2_m Model_4))
                (inv Model_4
                     (Node!val!0_m Model_4)
                     (Node!val!0_m Model_4)
                     (Epoch!val!0_m Model_4))))
      (a!3 (and (= (ep_m Model_4 (Node!val!0_m Model_4))
                   (Epoch!val!1_m Model_4))
                (not (locked_m Model_4
                                    (Epoch!val!1_m Model_4)
                                    (Node!val!0_m Model_4)))
                (not (locked_m Model_4
                                    (Epoch!val!2_m Model_4)
                                    (Node!val!0_m Model_4)))
                (not (locked_m Model_4
                                    (Epoch!val!0_m Model_4)
                                    (Node!val!0_m Model_4)))
                (not (transfer_m Model_4
                                      (Epoch!val!1_m Model_4)
                                      (Node!val!0_m Model_4)))
                (not (transfer_m Model_4
                                      (Epoch!val!2_m Model_4)
                                      (Node!val!0_m Model_4)))
                (transfer_m Model_4
                                 (Epoch!val!0_m Model_4)
                                 (Node!val!0_m Model_4))
                (not (held_m Model_4 (Node!val!0_m Model_4))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (transfer e1 n1)) (le (ep n1) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(transfer(e1, n1)), le(ep(n1), e1))),
;  Not(ForAll([n1, e1],
;             Or(Not(transfer(e1, n1)),
;                le(ep(n1), e1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!1) (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!3
;     Epoch!val!2))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_5)  (Node!val!0_m Model_5) ))
(constraint (distinct (Epoch!val!1_m Model_5)  (Epoch!val!2_m Model_5)  (Epoch!val!3_m Model_5)  (Epoch!val!4_m Model_5)  (Epoch!val!5_m Model_5)  (Epoch!val!0_m Model_5) ))
(constraint (let ((a!1 (and (= (zero_m Model_5) (Epoch!val!5_m Model_5))
                (= (one_m Model_5) (Epoch!val!4_m Model_5))
                (le_m Model_5 (Epoch!val!1_m Model_5) (Epoch!val!1_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!1_m Model_5)
                           (Epoch!val!2_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!1_m Model_5)
                           (Epoch!val!3_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!1_m Model_5)
                           (Epoch!val!4_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!1_m Model_5)
                           (Epoch!val!5_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!1_m Model_5)
                           (Epoch!val!0_m Model_5)))
                (le_m Model_5 (Epoch!val!2_m Model_5) (Epoch!val!1_m Model_5))
                (le_m Model_5 (Epoch!val!2_m Model_5) (Epoch!val!2_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!2_m Model_5)
                           (Epoch!val!3_m Model_5)))
                (le_m Model_5 (Epoch!val!2_m Model_5) (Epoch!val!4_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!2_m Model_5)
                           (Epoch!val!5_m Model_5)))
                (le_m Model_5 (Epoch!val!2_m Model_5) (Epoch!val!0_m Model_5))
                (le_m Model_5 (Epoch!val!3_m Model_5) (Epoch!val!1_m Model_5))
                (le_m Model_5 (Epoch!val!3_m Model_5) (Epoch!val!2_m Model_5))
                (le_m Model_5 (Epoch!val!3_m Model_5) (Epoch!val!3_m Model_5))
                (le_m Model_5 (Epoch!val!3_m Model_5) (Epoch!val!4_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!3_m Model_5)
                           (Epoch!val!5_m Model_5)))
                (le_m Model_5 (Epoch!val!3_m Model_5) (Epoch!val!0_m Model_5))
                (le_m Model_5 (Epoch!val!4_m Model_5) (Epoch!val!1_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!4_m Model_5)
                           (Epoch!val!2_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!4_m Model_5)
                           (Epoch!val!3_m Model_5)))
                (le_m Model_5 (Epoch!val!4_m Model_5) (Epoch!val!4_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!4_m Model_5)
                           (Epoch!val!5_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!4_m Model_5)
                           (Epoch!val!0_m Model_5)))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!1_m Model_5))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!2_m Model_5))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!3_m Model_5))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!4_m Model_5))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!5_m Model_5))
                (le_m Model_5 (Epoch!val!5_m Model_5) (Epoch!val!0_m Model_5))
                (le_m Model_5 (Epoch!val!0_m Model_5) (Epoch!val!1_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!0_m Model_5)
                           (Epoch!val!2_m Model_5)))
                (not (le_m Model_5
                           (Epoch!val!0_m Model_5)
                           (Epoch!val!3_m Model_5)))
                (le_m Model_5 (Epoch!val!0_m Model_5) (Epoch!val!4_m Model_5))
                (not (le_m Model_5
                           (Epoch!val!0_m Model_5)
                           (Epoch!val!5_m Model_5)))
                (le_m Model_5 (Epoch!val!0_m Model_5) (Epoch!val!0_m Model_5))
                (not (transfer_m Model_5
                                     (Epoch!val!1_m Model_5)
                                     (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!1_m Model_5)
                                     (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!2_m Model_5)
                                     (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!2_m Model_5)
                                     (Node!val!0_m Model_5)))
                (transfer_m Model_5
                                (Epoch!val!3_m Model_5)
                                (Node!val!1_m Model_5))
                (not (transfer_m Model_5
                                     (Epoch!val!3_m Model_5)
                                     (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!4_m Model_5)
                                     (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!4_m Model_5)
                                     (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!5_m Model_5)
                                     (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                     (Epoch!val!5_m Model_5)
                                     (Node!val!0_m Model_5)))
                (transfer_m Model_5
                                (Epoch!val!0_m Model_5)
                                (Node!val!1_m Model_5))
                (not (transfer_m Model_5
                                     (Epoch!val!0_m Model_5)
                                     (Node!val!0_m Model_5)))
                (not (held_m Model_5 (Node!val!1_m Model_5)))
                (not (held_m Model_5 (Node!val!0_m Model_5)))
                (= (ep_m Model_5 (Node!val!1_m Model_5))
                   (Epoch!val!3_m Model_5))
                (= (ep_m Model_5 (Node!val!0_m Model_5))
                   (Epoch!val!2_m Model_5))
                (not (locked_m Model_5
                                   (Epoch!val!1_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!1_m Model_5)
                                   (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!2_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!2_m Model_5)
                                   (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!3_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!3_m Model_5)
                                   (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!4_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!4_m Model_5)
                                   (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!5_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!5_m Model_5)
                                   (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!0_m Model_5)
                                   (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                   (Epoch!val!0_m Model_5)
                                   (Node!val!0_m Model_5)))))
      (a!2 (and (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!1_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!2_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!3_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!4_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!5_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!0_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!1_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!2_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!3_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!4_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!5_m Model_5))
                (inv Model_5
                     (Node!val!1_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!0_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!1_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!2_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!3_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!4_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!5_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!1_m Model_5)
                     (Epoch!val!0_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!1_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!2_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!3_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!4_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!5_m Model_5))
                (inv Model_5
                     (Node!val!0_m Model_5)
                     (Node!val!0_m Model_5)
                     (Epoch!val!0_m Model_5))))
      (a!3 (and (= (ep_m Model_5 (Node!val!1_m Model_5))
                   (Epoch!val!0_m Model_5))
                (= (ep_m Model_5 (Node!val!0_m Model_5))
                   (Epoch!val!2_m Model_5))
                (not (locked_m Model_5
                                    (Epoch!val!1_m Model_5)
                                    (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!1_m Model_5)
                                    (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!2_m Model_5)
                                    (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!2_m Model_5)
                                    (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!3_m Model_5)
                                    (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!3_m Model_5)
                                    (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!4_m Model_5)
                                    (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!4_m Model_5)
                                    (Node!val!0_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!5_m Model_5)
                                    (Node!val!1_m Model_5)))
                (not (locked_m Model_5
                                    (Epoch!val!5_m Model_5)
                                    (Node!val!0_m Model_5)))
                (locked_m Model_5
                               (Epoch!val!0_m Model_5)
                               (Node!val!1_m Model_5))
                (not (locked_m Model_5
                                    (Epoch!val!0_m Model_5)
                                    (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!1_m Model_5)
                                      (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!1_m Model_5)
                                      (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!2_m Model_5)
                                      (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!2_m Model_5)
                                      (Node!val!0_m Model_5)))
                (transfer_m Model_5
                                 (Epoch!val!3_m Model_5)
                                 (Node!val!1_m Model_5))
                (not (transfer_m Model_5
                                      (Epoch!val!3_m Model_5)
                                      (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!4_m Model_5)
                                      (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!4_m Model_5)
                                      (Node!val!0_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!5_m Model_5)
                                      (Node!val!1_m Model_5)))
                (not (transfer_m Model_5
                                      (Epoch!val!5_m Model_5)
                                      (Node!val!0_m Model_5)))
                (transfer_m Model_5
                                 (Epoch!val!0_m Model_5)
                                 (Node!val!1_m Model_5))
                (not (transfer_m Model_5
                                      (Epoch!val!0_m Model_5)
                                      (Node!val!0_m Model_5)))
                (held_m Model_5 (Node!val!1_m Model_5))
                (not (held_m Model_5 (Node!val!0_m Model_5))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (transfer (ep n1) n1)) (le e1 (ep n1))))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(transfer(ep(n1), n1)),
;            le(e1, ep(n1)))),
;  Not(ForAll([n1, e1],
;             Or(Not(transfer(ep(n1), n1)),
;                le(e1, ep(n1)))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5)
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5)))
;       (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!5))
;       (and (= x!0 Epoch!val!5) (= x!1 Epoch!val!3) (not (= x!1 Epoch!val!5)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (= x!1 Node!val!1)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!6
;     Epoch!val!2))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_6)  (Node!val!0_m Model_6) ))
(constraint (distinct (Epoch!val!1_m Model_6)  (Epoch!val!2_m Model_6)  (Epoch!val!3_m Model_6)  (Epoch!val!6_m Model_6)  (Epoch!val!4_m Model_6)  (Epoch!val!5_m Model_6)  (Epoch!val!0_m Model_6) ))
(constraint (let ((a!1 (and (= (one_m Model_6) (Epoch!val!4_m Model_6))
                (= (zero_m Model_6) (Epoch!val!5_m Model_6))
                (le_m Model_6 (Epoch!val!1_m Model_6) (Epoch!val!1_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!2_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!3_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!6_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!4_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!1_m Model_6)
                           (Epoch!val!0_m Model_6)))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!1_m Model_6))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!2_m Model_6))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!3_m Model_6))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!6_m Model_6))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!4_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!2_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (le_m Model_6 (Epoch!val!2_m Model_6) (Epoch!val!0_m Model_6))
                (le_m Model_6 (Epoch!val!3_m Model_6) (Epoch!val!1_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!3_m Model_6)
                           (Epoch!val!2_m Model_6)))
                (le_m Model_6 (Epoch!val!3_m Model_6) (Epoch!val!3_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!3_m Model_6)
                           (Epoch!val!6_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!3_m Model_6)
                           (Epoch!val!4_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!3_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!3_m Model_6)
                           (Epoch!val!0_m Model_6)))
                (le_m Model_6 (Epoch!val!6_m Model_6) (Epoch!val!1_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!6_m Model_6)
                           (Epoch!val!2_m Model_6)))
                (le_m Model_6 (Epoch!val!6_m Model_6) (Epoch!val!3_m Model_6))
                (le_m Model_6 (Epoch!val!6_m Model_6) (Epoch!val!6_m Model_6))
                (le_m Model_6 (Epoch!val!6_m Model_6) (Epoch!val!4_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!6_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (le_m Model_6 (Epoch!val!6_m Model_6) (Epoch!val!0_m Model_6))
                (le_m Model_6 (Epoch!val!4_m Model_6) (Epoch!val!1_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!4_m Model_6)
                           (Epoch!val!2_m Model_6)))
                (le_m Model_6 (Epoch!val!4_m Model_6) (Epoch!val!3_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!4_m Model_6)
                           (Epoch!val!6_m Model_6)))
                (le_m Model_6 (Epoch!val!4_m Model_6) (Epoch!val!4_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!4_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (not (le_m Model_6
                           (Epoch!val!4_m Model_6)
                           (Epoch!val!0_m Model_6)))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!1_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!2_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!3_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!6_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!4_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!5_m Model_6))
                (le_m Model_6 (Epoch!val!5_m Model_6) (Epoch!val!0_m Model_6))
                (le_m Model_6 (Epoch!val!0_m Model_6) (Epoch!val!1_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!0_m Model_6)
                           (Epoch!val!2_m Model_6)))
                (le_m Model_6 (Epoch!val!0_m Model_6) (Epoch!val!3_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!0_m Model_6)
                           (Epoch!val!6_m Model_6)))
                (le_m Model_6 (Epoch!val!0_m Model_6) (Epoch!val!4_m Model_6))
                (not (le_m Model_6
                           (Epoch!val!0_m Model_6)
                           (Epoch!val!5_m Model_6)))
                (le_m Model_6 (Epoch!val!0_m Model_6) (Epoch!val!0_m Model_6))
                (not (transfer_m Model_6
                                     (Epoch!val!1_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!1_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!2_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!2_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!3_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!3_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!6_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!6_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!4_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!4_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!5_m Model_6)
                                     (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                     (Epoch!val!5_m Model_6)
                                     (Node!val!0_m Model_6)))
                (transfer_m Model_6
                                (Epoch!val!0_m Model_6)
                                (Node!val!1_m Model_6))
                (not (transfer_m Model_6
                                     (Epoch!val!0_m Model_6)
                                     (Node!val!0_m Model_6)))
                (not (held_m Model_6 (Node!val!1_m Model_6)))
                (not (held_m Model_6 (Node!val!0_m Model_6)))
                (= (ep_m Model_6 (Node!val!1_m Model_6))
                   (Epoch!val!6_m Model_6))
                (= (ep_m Model_6 (Node!val!0_m Model_6))
                   (Epoch!val!2_m Model_6))
                (not (locked_m Model_6
                                   (Epoch!val!1_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!1_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!2_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!2_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!3_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!3_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!6_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!6_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!4_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!4_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!5_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!5_m Model_6)
                                   (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!0_m Model_6)
                                   (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                   (Epoch!val!0_m Model_6)
                                   (Node!val!0_m Model_6)))))
      (a!2 (and (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!1_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!2_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!3_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!6_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!4_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!5_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!0_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!1_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!2_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!3_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!6_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!4_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!5_m Model_6))
                (inv Model_6
                     (Node!val!1_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!0_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!1_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!2_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!3_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!6_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!4_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!5_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!1_m Model_6)
                     (Epoch!val!0_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!1_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!2_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!3_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!6_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!4_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!5_m Model_6))
                (inv Model_6
                     (Node!val!0_m Model_6)
                     (Node!val!0_m Model_6)
                     (Epoch!val!0_m Model_6))))
      (a!3 (and (= (ep_m Model_6 (Node!val!1_m Model_6))
                   (Epoch!val!0_m Model_6))
                (= (ep_m Model_6 (Node!val!0_m Model_6))
                   (Epoch!val!2_m Model_6))
                (not (locked_m Model_6
                                    (Epoch!val!1_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!1_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!2_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!2_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!3_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!3_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!6_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!6_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!4_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!4_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!5_m Model_6)
                                    (Node!val!1_m Model_6)))
                (not (locked_m Model_6
                                    (Epoch!val!5_m Model_6)
                                    (Node!val!0_m Model_6)))
                (locked_m Model_6
                               (Epoch!val!0_m Model_6)
                               (Node!val!1_m Model_6))
                (not (locked_m Model_6
                                    (Epoch!val!0_m Model_6)
                                    (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!1_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!1_m Model_6)
                                      (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!2_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!2_m Model_6)
                                      (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!3_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!3_m Model_6)
                                      (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!6_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!6_m Model_6)
                                      (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!4_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!4_m Model_6)
                                      (Node!val!0_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!5_m Model_6)
                                      (Node!val!1_m Model_6)))
                (not (transfer_m Model_6
                                      (Epoch!val!5_m Model_6)
                                      (Node!val!0_m Model_6)))
                (transfer_m Model_6
                                 (Epoch!val!0_m Model_6)
                                 (Node!val!1_m Model_6))
                (not (transfer_m Model_6
                                      (Epoch!val!0_m Model_6)
                                      (Node!val!0_m Model_6)))
                (held_m Model_6 (Node!val!1_m Model_6))
                (not (held_m Model_6 (Node!val!0_m Model_6))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (transfer e1 n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1], Not(transfer(e1, n1))),
;  Not(ForAll([n1, e1], Not(transfer(e1, n1))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!0)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!4) (not (= x!0 Epoch!val!0)) (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!0) (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!0)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!0)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!4)) (not (= x!0 Epoch!val!0))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_7) ))
(constraint (distinct (Epoch!val!1_m Model_7)  (Epoch!val!2_m Model_7)  (Epoch!val!3_m Model_7)  (Epoch!val!4_m Model_7)  (Epoch!val!0_m Model_7) ))
(constraint (let ((a!1 (and (= (one_m Model_7) (Epoch!val!3_m Model_7))
                (= (zero_m Model_7) (Epoch!val!4_m Model_7))
                (le_m Model_7 (Epoch!val!1_m Model_7) (Epoch!val!1_m Model_7))
                (le_m Model_7 (Epoch!val!1_m Model_7) (Epoch!val!2_m Model_7))
                (not (le_m Model_7
                           (Epoch!val!1_m Model_7)
                           (Epoch!val!3_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!1_m Model_7)
                           (Epoch!val!4_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!1_m Model_7)
                           (Epoch!val!0_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!2_m Model_7)
                           (Epoch!val!1_m Model_7)))
                (le_m Model_7 (Epoch!val!2_m Model_7) (Epoch!val!2_m Model_7))
                (not (le_m Model_7
                           (Epoch!val!2_m Model_7)
                           (Epoch!val!3_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!2_m Model_7)
                           (Epoch!val!4_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!2_m Model_7)
                           (Epoch!val!0_m Model_7)))
                (le_m Model_7 (Epoch!val!3_m Model_7) (Epoch!val!1_m Model_7))
                (le_m Model_7 (Epoch!val!3_m Model_7) (Epoch!val!2_m Model_7))
                (le_m Model_7 (Epoch!val!3_m Model_7) (Epoch!val!3_m Model_7))
                (not (le_m Model_7
                           (Epoch!val!3_m Model_7)
                           (Epoch!val!4_m Model_7)))
                (le_m Model_7 (Epoch!val!3_m Model_7) (Epoch!val!0_m Model_7))
                (le_m Model_7 (Epoch!val!4_m Model_7) (Epoch!val!1_m Model_7))
                (le_m Model_7 (Epoch!val!4_m Model_7) (Epoch!val!2_m Model_7))
                (le_m Model_7 (Epoch!val!4_m Model_7) (Epoch!val!3_m Model_7))
                (le_m Model_7 (Epoch!val!4_m Model_7) (Epoch!val!4_m Model_7))
                (le_m Model_7 (Epoch!val!4_m Model_7) (Epoch!val!0_m Model_7))
                (le_m Model_7 (Epoch!val!0_m Model_7) (Epoch!val!1_m Model_7))
                (le_m Model_7 (Epoch!val!0_m Model_7) (Epoch!val!2_m Model_7))
                (not (le_m Model_7
                           (Epoch!val!0_m Model_7)
                           (Epoch!val!3_m Model_7)))
                (not (le_m Model_7
                           (Epoch!val!0_m Model_7)
                           (Epoch!val!4_m Model_7)))
                (le_m Model_7 (Epoch!val!0_m Model_7) (Epoch!val!0_m Model_7))
                (not (transfer_m Model_7
                                     (Epoch!val!1_m Model_7)
                                     (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                     (Epoch!val!2_m Model_7)
                                     (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                     (Epoch!val!3_m Model_7)
                                     (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                     (Epoch!val!4_m Model_7)
                                     (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                     (Epoch!val!0_m Model_7)
                                     (Node!val!0_m Model_7)))
                (held_m Model_7 (Node!val!0_m Model_7))
                (= (ep_m Model_7 (Node!val!0_m Model_7))
                   (Epoch!val!1_m Model_7))
                (not (locked_m Model_7
                                   (Epoch!val!1_m Model_7)
                                   (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                   (Epoch!val!2_m Model_7)
                                   (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                   (Epoch!val!3_m Model_7)
                                   (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                   (Epoch!val!4_m Model_7)
                                   (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                   (Epoch!val!0_m Model_7)
                                   (Node!val!0_m Model_7)))))
      (a!2 (and (inv Model_7
                     (Node!val!0_m Model_7)
                     (Node!val!0_m Model_7)
                     (Epoch!val!1_m Model_7))
                (inv Model_7
                     (Node!val!0_m Model_7)
                     (Node!val!0_m Model_7)
                     (Epoch!val!2_m Model_7))
                (inv Model_7
                     (Node!val!0_m Model_7)
                     (Node!val!0_m Model_7)
                     (Epoch!val!3_m Model_7))
                (inv Model_7
                     (Node!val!0_m Model_7)
                     (Node!val!0_m Model_7)
                     (Epoch!val!4_m Model_7))
                (inv Model_7
                     (Node!val!0_m Model_7)
                     (Node!val!0_m Model_7)
                     (Epoch!val!0_m Model_7))))
      (a!3 (and (= (ep_m Model_7 (Node!val!0_m Model_7))
                   (Epoch!val!1_m Model_7))
                (not (locked_m Model_7
                                    (Epoch!val!1_m Model_7)
                                    (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                    (Epoch!val!2_m Model_7)
                                    (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                    (Epoch!val!3_m Model_7)
                                    (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                    (Epoch!val!4_m Model_7)
                                    (Node!val!0_m Model_7)))
                (not (locked_m Model_7
                                    (Epoch!val!0_m Model_7)
                                    (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                      (Epoch!val!1_m Model_7)
                                      (Node!val!0_m Model_7)))
                (transfer_m Model_7
                                 (Epoch!val!2_m Model_7)
                                 (Node!val!0_m Model_7))
                (not (transfer_m Model_7
                                      (Epoch!val!3_m Model_7)
                                      (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                      (Epoch!val!4_m Model_7)
                                      (Node!val!0_m Model_7)))
                (not (transfer_m Model_7
                                      (Epoch!val!0_m Model_7)
                                      (Node!val!0_m Model_7)))
                (not (held_m Model_7 (Node!val!0_m Model_7))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (locked e1 n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1], Not(locked(e1, n1))),
;  Not(ForAll([n1, e1], Not(locked(e1, n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!4) (not (= x!0 Epoch!val!3)) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!0
;     Epoch!val!1))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!2
;     Epoch!val!1))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!0))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_8)  (Node!val!0_m Model_8) ))
(constraint (distinct (Epoch!val!1_m Model_8)  (Epoch!val!2_m Model_8)  (Epoch!val!3_m Model_8)  (Epoch!val!4_m Model_8)  (Epoch!val!0_m Model_8) ))
(constraint (let ((a!1 (and (= (one_m Model_8) (Epoch!val!3_m Model_8))
                (= (zero_m Model_8) (Epoch!val!4_m Model_8))
                (le_m Model_8 (Epoch!val!1_m Model_8) (Epoch!val!1_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!1_m Model_8)
                           (Epoch!val!2_m Model_8)))
                (not (le_m Model_8
                           (Epoch!val!1_m Model_8)
                           (Epoch!val!3_m Model_8)))
                (not (le_m Model_8
                           (Epoch!val!1_m Model_8)
                           (Epoch!val!4_m Model_8)))
                (not (le_m Model_8
                           (Epoch!val!1_m Model_8)
                           (Epoch!val!0_m Model_8)))
                (le_m Model_8 (Epoch!val!2_m Model_8) (Epoch!val!1_m Model_8))
                (le_m Model_8 (Epoch!val!2_m Model_8) (Epoch!val!2_m Model_8))
                (le_m Model_8 (Epoch!val!2_m Model_8) (Epoch!val!3_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!2_m Model_8)
                           (Epoch!val!4_m Model_8)))
                (le_m Model_8 (Epoch!val!2_m Model_8) (Epoch!val!0_m Model_8))
                (le_m Model_8 (Epoch!val!3_m Model_8) (Epoch!val!1_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!3_m Model_8)
                           (Epoch!val!2_m Model_8)))
                (le_m Model_8 (Epoch!val!3_m Model_8) (Epoch!val!3_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!3_m Model_8)
                           (Epoch!val!4_m Model_8)))
                (not (le_m Model_8
                           (Epoch!val!3_m Model_8)
                           (Epoch!val!0_m Model_8)))
                (le_m Model_8 (Epoch!val!4_m Model_8) (Epoch!val!1_m Model_8))
                (le_m Model_8 (Epoch!val!4_m Model_8) (Epoch!val!2_m Model_8))
                (le_m Model_8 (Epoch!val!4_m Model_8) (Epoch!val!3_m Model_8))
                (le_m Model_8 (Epoch!val!4_m Model_8) (Epoch!val!4_m Model_8))
                (le_m Model_8 (Epoch!val!4_m Model_8) (Epoch!val!0_m Model_8))
                (le_m Model_8 (Epoch!val!0_m Model_8) (Epoch!val!1_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!0_m Model_8)
                           (Epoch!val!2_m Model_8)))
                (le_m Model_8 (Epoch!val!0_m Model_8) (Epoch!val!3_m Model_8))
                (not (le_m Model_8
                           (Epoch!val!0_m Model_8)
                           (Epoch!val!4_m Model_8)))
                (le_m Model_8 (Epoch!val!0_m Model_8) (Epoch!val!0_m Model_8))
                (not (transfer_m Model_8
                                     (Epoch!val!1_m Model_8)
                                     (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!1_m Model_8)
                                     (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!2_m Model_8)
                                     (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!2_m Model_8)
                                     (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!3_m Model_8)
                                     (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!3_m Model_8)
                                     (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!4_m Model_8)
                                     (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!4_m Model_8)
                                     (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                     (Epoch!val!0_m Model_8)
                                     (Node!val!1_m Model_8)))
                (transfer_m Model_8
                                (Epoch!val!0_m Model_8)
                                (Node!val!0_m Model_8))
                (not (held_m Model_8 (Node!val!1_m Model_8)))
                (not (held_m Model_8 (Node!val!0_m Model_8)))
                (= (ep_m Model_8 (Node!val!1_m Model_8))
                   (Epoch!val!1_m Model_8))
                (= (ep_m Model_8 (Node!val!0_m Model_8))
                   (Epoch!val!2_m Model_8))
                (not (locked_m Model_8
                                   (Epoch!val!1_m Model_8)
                                   (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!1_m Model_8)
                                   (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!2_m Model_8)
                                   (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!2_m Model_8)
                                   (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!3_m Model_8)
                                   (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!3_m Model_8)
                                   (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!4_m Model_8)
                                   (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!4_m Model_8)
                                   (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!0_m Model_8)
                                   (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                   (Epoch!val!0_m Model_8)
                                   (Node!val!0_m Model_8)))))
      (a!2 (and (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!1_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!2_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!3_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!4_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!0_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!1_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!2_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!3_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!4_m Model_8))
                (inv Model_8
                     (Node!val!1_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!0_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!1_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!2_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!3_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!4_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!1_m Model_8)
                     (Epoch!val!0_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!1_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!2_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!3_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!4_m Model_8))
                (inv Model_8
                     (Node!val!0_m Model_8)
                     (Node!val!0_m Model_8)
                     (Epoch!val!0_m Model_8))))
      (a!3 (and (= (ep_m Model_8 (Node!val!1_m Model_8))
                   (Epoch!val!1_m Model_8))
                (= (ep_m Model_8 (Node!val!0_m Model_8))
                   (Epoch!val!0_m Model_8))
                (not (locked_m Model_8
                                    (Epoch!val!1_m Model_8)
                                    (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!1_m Model_8)
                                    (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!2_m Model_8)
                                    (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!2_m Model_8)
                                    (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!3_m Model_8)
                                    (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!3_m Model_8)
                                    (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!4_m Model_8)
                                    (Node!val!1_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!4_m Model_8)
                                    (Node!val!0_m Model_8)))
                (not (locked_m Model_8
                                    (Epoch!val!0_m Model_8)
                                    (Node!val!1_m Model_8)))
                (locked_m Model_8
                               (Epoch!val!0_m Model_8)
                               (Node!val!0_m Model_8))
                (not (transfer_m Model_8
                                      (Epoch!val!1_m Model_8)
                                      (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!1_m Model_8)
                                      (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!2_m Model_8)
                                      (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!2_m Model_8)
                                      (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!3_m Model_8)
                                      (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!3_m Model_8)
                                      (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!4_m Model_8)
                                      (Node!val!1_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!4_m Model_8)
                                      (Node!val!0_m Model_8)))
                (not (transfer_m Model_8
                                      (Epoch!val!0_m Model_8)
                                      (Node!val!1_m Model_8)))
                (transfer_m Model_8
                                 (Epoch!val!0_m Model_8)
                                 (Node!val!0_m Model_8))
                (not (held_m Model_8 (Node!val!1_m Model_8)))
                (held_m Model_8 (Node!val!0_m Model_8)))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (locked (ep n1) n1)) (le e1 (ep n1))))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(locked(ep(n1), n1)),
;            le(e1, ep(n1)))),
;  Not(ForAll([n1, e1],
;             Or(Not(locked(ep(n1), n1)),
;                le(e1, ep(n1)))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!6
;     Epoch!val!2))
(constraint (distinct (Node!val!1_m Model_9)  (Node!val!0_m Model_9) ))
(constraint (distinct (Epoch!val!1_m Model_9)  (Epoch!val!2_m Model_9)  (Epoch!val!3_m Model_9)  (Epoch!val!6_m Model_9)  (Epoch!val!4_m Model_9)  (Epoch!val!5_m Model_9)  (Epoch!val!0_m Model_9) ))
(constraint (let ((a!1 (and (= (zero_m Model_9) (Epoch!val!5_m Model_9))
                (= (one_m Model_9) (Epoch!val!4_m Model_9))
                (not (locked_m Model_9
                                   (Epoch!val!1_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!1_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!2_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!2_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!3_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!3_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!6_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!6_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!4_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!4_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!5_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!5_m Model_9)
                                   (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!0_m Model_9)
                                   (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                   (Epoch!val!0_m Model_9)
                                   (Node!val!0_m Model_9)))
                (le_m Model_9 (Epoch!val!1_m Model_9) (Epoch!val!1_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!1_m Model_9)
                           (Epoch!val!2_m Model_9)))
                (le_m Model_9 (Epoch!val!1_m Model_9) (Epoch!val!3_m Model_9))
                (le_m Model_9 (Epoch!val!1_m Model_9) (Epoch!val!6_m Model_9))
                (le_m Model_9 (Epoch!val!1_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!1_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (le_m Model_9 (Epoch!val!1_m Model_9) (Epoch!val!0_m Model_9))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!1_m Model_9))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!2_m Model_9))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!3_m Model_9))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!6_m Model_9))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!2_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (le_m Model_9 (Epoch!val!2_m Model_9) (Epoch!val!0_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!3_m Model_9)
                           (Epoch!val!1_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!3_m Model_9)
                           (Epoch!val!2_m Model_9)))
                (le_m Model_9 (Epoch!val!3_m Model_9) (Epoch!val!3_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!3_m Model_9)
                           (Epoch!val!6_m Model_9)))
                (le_m Model_9 (Epoch!val!3_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!3_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!3_m Model_9)
                           (Epoch!val!0_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!6_m Model_9)
                           (Epoch!val!1_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!6_m Model_9)
                           (Epoch!val!2_m Model_9)))
                (le_m Model_9 (Epoch!val!6_m Model_9) (Epoch!val!3_m Model_9))
                (le_m Model_9 (Epoch!val!6_m Model_9) (Epoch!val!6_m Model_9))
                (le_m Model_9 (Epoch!val!6_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!6_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (le_m Model_9 (Epoch!val!6_m Model_9) (Epoch!val!0_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!1_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!2_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!3_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!6_m Model_9)))
                (le_m Model_9 (Epoch!val!4_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!4_m Model_9)
                           (Epoch!val!0_m Model_9)))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!1_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!2_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!3_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!6_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!4_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!5_m Model_9))
                (le_m Model_9 (Epoch!val!5_m Model_9) (Epoch!val!0_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!0_m Model_9)
                           (Epoch!val!1_m Model_9)))
                (not (le_m Model_9
                           (Epoch!val!0_m Model_9)
                           (Epoch!val!2_m Model_9)))
                (le_m Model_9 (Epoch!val!0_m Model_9) (Epoch!val!3_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!0_m Model_9)
                           (Epoch!val!6_m Model_9)))
                (le_m Model_9 (Epoch!val!0_m Model_9) (Epoch!val!4_m Model_9))
                (not (le_m Model_9
                           (Epoch!val!0_m Model_9)
                           (Epoch!val!5_m Model_9)))
                (le_m Model_9 (Epoch!val!0_m Model_9) (Epoch!val!0_m Model_9))
                (not (transfer_m Model_9
                                     (Epoch!val!1_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!1_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!2_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!2_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!3_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!3_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!6_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!6_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!4_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!4_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!5_m Model_9)
                                     (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                     (Epoch!val!5_m Model_9)
                                     (Node!val!0_m Model_9)))
                (transfer_m Model_9
                                (Epoch!val!0_m Model_9)
                                (Node!val!1_m Model_9))
                (not (transfer_m Model_9
                                     (Epoch!val!0_m Model_9)
                                     (Node!val!0_m Model_9)))
                (not (held_m Model_9 (Node!val!1_m Model_9)))
                (not (held_m Model_9 (Node!val!0_m Model_9)))
                (= (ep_m Model_9 (Node!val!1_m Model_9))
                   (Epoch!val!6_m Model_9))
                (= (ep_m Model_9 (Node!val!0_m Model_9))
                   (Epoch!val!2_m Model_9))))
      (a!2 (and (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!1_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!2_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!3_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!6_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!4_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!5_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!0_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!1_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!2_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!3_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!6_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!4_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!5_m Model_9))
                (inv Model_9
                     (Node!val!1_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!0_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!1_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!2_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!3_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!6_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!4_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!5_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!1_m Model_9)
                     (Epoch!val!0_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!1_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!2_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!3_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!6_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!4_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!5_m Model_9))
                (inv Model_9
                     (Node!val!0_m Model_9)
                     (Node!val!0_m Model_9)
                     (Epoch!val!0_m Model_9))))
      (a!3 (and (held_m Model_9 (Node!val!1_m Model_9))
                (not (held_m Model_9 (Node!val!0_m Model_9)))
                (= (ep_m Model_9 (Node!val!1_m Model_9))
                   (Epoch!val!0_m Model_9))
                (= (ep_m Model_9 (Node!val!0_m Model_9))
                   (Epoch!val!2_m Model_9))
                (not (locked_m Model_9
                                    (Epoch!val!1_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!1_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!2_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!2_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!3_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!3_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!6_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!6_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!4_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!4_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!5_m Model_9)
                                    (Node!val!1_m Model_9)))
                (not (locked_m Model_9
                                    (Epoch!val!5_m Model_9)
                                    (Node!val!0_m Model_9)))
                (locked_m Model_9
                               (Epoch!val!0_m Model_9)
                               (Node!val!1_m Model_9))
                (not (locked_m Model_9
                                    (Epoch!val!0_m Model_9)
                                    (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!1_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!1_m Model_9)
                                      (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!2_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!2_m Model_9)
                                      (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!3_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!3_m Model_9)
                                      (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!6_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!6_m Model_9)
                                      (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!4_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!4_m Model_9)
                                      (Node!val!0_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!5_m Model_9)
                                      (Node!val!1_m Model_9)))
                (not (transfer_m Model_9
                                      (Epoch!val!5_m Model_9)
                                      (Node!val!0_m Model_9)))
                (transfer_m Model_9
                                 (Epoch!val!0_m Model_9)
                                 (Node!val!1_m Model_9))
                (not (transfer_m Model_9
                                      (Epoch!val!0_m Model_9)
                                      (Node!val!0_m Model_9))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node)) (not (locked (ep n1) n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll(n1, Not(locked(ep(n1), n1))),
;  Not(ForAll(n1, Not(locked(ep(n1), n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!3
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
(constraint (distinct (Node!val!1_m Model_10)  (Node!val!0_m Model_10) ))
(constraint (distinct (Epoch!val!1_m Model_10)  (Epoch!val!2_m Model_10)  (Epoch!val!3_m Model_10)  (Epoch!val!4_m Model_10)  (Epoch!val!5_m Model_10)  (Epoch!val!0_m Model_10) ))
(constraint (let ((a!1 (and (= (zero_m Model_10) (Epoch!val!5_m Model_10))
                (= (one_m Model_10) (Epoch!val!4_m Model_10))
                (le_m Model_10
                      (Epoch!val!1_m Model_10)
                      (Epoch!val!1_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!1_m Model_10)
                           (Epoch!val!2_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!1_m Model_10)
                           (Epoch!val!3_m Model_10)))
                (le_m Model_10
                      (Epoch!val!1_m Model_10)
                      (Epoch!val!4_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!1_m Model_10)
                           (Epoch!val!5_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!1_m Model_10)
                           (Epoch!val!0_m Model_10)))
                (le_m Model_10
                      (Epoch!val!2_m Model_10)
                      (Epoch!val!1_m Model_10))
                (le_m Model_10
                      (Epoch!val!2_m Model_10)
                      (Epoch!val!2_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!2_m Model_10)
                           (Epoch!val!3_m Model_10)))
                (le_m Model_10
                      (Epoch!val!2_m Model_10)
                      (Epoch!val!4_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!2_m Model_10)
                           (Epoch!val!5_m Model_10)))
                (le_m Model_10
                      (Epoch!val!2_m Model_10)
                      (Epoch!val!0_m Model_10))
                (le_m Model_10
                      (Epoch!val!3_m Model_10)
                      (Epoch!val!1_m Model_10))
                (le_m Model_10
                      (Epoch!val!3_m Model_10)
                      (Epoch!val!2_m Model_10))
                (le_m Model_10
                      (Epoch!val!3_m Model_10)
                      (Epoch!val!3_m Model_10))
                (le_m Model_10
                      (Epoch!val!3_m Model_10)
                      (Epoch!val!4_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!3_m Model_10)
                           (Epoch!val!5_m Model_10)))
                (le_m Model_10
                      (Epoch!val!3_m Model_10)
                      (Epoch!val!0_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!4_m Model_10)
                           (Epoch!val!1_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!4_m Model_10)
                           (Epoch!val!2_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!4_m Model_10)
                           (Epoch!val!3_m Model_10)))
                (le_m Model_10
                      (Epoch!val!4_m Model_10)
                      (Epoch!val!4_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!4_m Model_10)
                           (Epoch!val!5_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!4_m Model_10)
                           (Epoch!val!0_m Model_10)))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!1_m Model_10))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!2_m Model_10))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!3_m Model_10))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!4_m Model_10))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!5_m Model_10))
                (le_m Model_10
                      (Epoch!val!5_m Model_10)
                      (Epoch!val!0_m Model_10))
                (le_m Model_10
                      (Epoch!val!0_m Model_10)
                      (Epoch!val!1_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!0_m Model_10)
                           (Epoch!val!2_m Model_10)))
                (not (le_m Model_10
                           (Epoch!val!0_m Model_10)
                           (Epoch!val!3_m Model_10)))
                (le_m Model_10
                      (Epoch!val!0_m Model_10)
                      (Epoch!val!4_m Model_10))
                (not (le_m Model_10
                           (Epoch!val!0_m Model_10)
                           (Epoch!val!5_m Model_10)))
                (le_m Model_10
                      (Epoch!val!0_m Model_10)
                      (Epoch!val!0_m Model_10))
                (not (transfer_m Model_10
                                     (Epoch!val!1_m Model_10)
                                     (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!1_m Model_10)
                                     (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!2_m Model_10)
                                     (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!2_m Model_10)
                                     (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!3_m Model_10)
                                     (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!3_m Model_10)
                                     (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!4_m Model_10)
                                     (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!4_m Model_10)
                                     (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!5_m Model_10)
                                     (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                     (Epoch!val!5_m Model_10)
                                     (Node!val!0_m Model_10)))
                (transfer_m Model_10
                                (Epoch!val!0_m Model_10)
                                (Node!val!1_m Model_10))
                (not (transfer_m Model_10
                                     (Epoch!val!0_m Model_10)
                                     (Node!val!0_m Model_10)))
                (not (held_m Model_10 (Node!val!1_m Model_10)))
                (not (held_m Model_10 (Node!val!0_m Model_10)))
                (= (ep_m Model_10 (Node!val!1_m Model_10))
                   (Epoch!val!3_m Model_10))
                (= (ep_m Model_10 (Node!val!0_m Model_10))
                   (Epoch!val!2_m Model_10))
                (not (locked_m Model_10
                                   (Epoch!val!1_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!1_m Model_10)
                                   (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!2_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!2_m Model_10)
                                   (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!3_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!3_m Model_10)
                                   (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!4_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!4_m Model_10)
                                   (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!5_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!5_m Model_10)
                                   (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!0_m Model_10)
                                   (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                   (Epoch!val!0_m Model_10)
                                   (Node!val!0_m Model_10)))))
      (a!2 (and (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!1_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!2_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!3_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!4_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!5_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!0_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!1_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!2_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!3_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!4_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!5_m Model_10))
                (inv Model_10
                     (Node!val!1_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!0_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!1_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!2_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!3_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!4_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!5_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!1_m Model_10)
                     (Epoch!val!0_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!1_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!2_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!3_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!4_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!5_m Model_10))
                (inv Model_10
                     (Node!val!0_m Model_10)
                     (Node!val!0_m Model_10)
                     (Epoch!val!0_m Model_10))))
      (a!3 (and (= (ep_m Model_10 (Node!val!1_m Model_10))
                   (Epoch!val!0_m Model_10))
                (= (ep_m Model_10 (Node!val!0_m Model_10))
                   (Epoch!val!2_m Model_10))
                (not (locked_m Model_10
                                    (Epoch!val!1_m Model_10)
                                    (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!1_m Model_10)
                                    (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!2_m Model_10)
                                    (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!2_m Model_10)
                                    (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!3_m Model_10)
                                    (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!3_m Model_10)
                                    (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!4_m Model_10)
                                    (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!4_m Model_10)
                                    (Node!val!0_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!5_m Model_10)
                                    (Node!val!1_m Model_10)))
                (not (locked_m Model_10
                                    (Epoch!val!5_m Model_10)
                                    (Node!val!0_m Model_10)))
                (locked_m Model_10
                               (Epoch!val!0_m Model_10)
                               (Node!val!1_m Model_10))
                (not (locked_m Model_10
                                    (Epoch!val!0_m Model_10)
                                    (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!1_m Model_10)
                                      (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!1_m Model_10)
                                      (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!2_m Model_10)
                                      (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!2_m Model_10)
                                      (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!3_m Model_10)
                                      (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!3_m Model_10)
                                      (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!4_m Model_10)
                                      (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!4_m Model_10)
                                      (Node!val!0_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!5_m Model_10)
                                      (Node!val!1_m Model_10)))
                (not (transfer_m Model_10
                                      (Epoch!val!5_m Model_10)
                                      (Node!val!0_m Model_10)))
                (transfer_m Model_10
                                 (Epoch!val!0_m Model_10)
                                 (Node!val!1_m Model_10))
                (not (transfer_m Model_10
                                      (Epoch!val!0_m Model_10)
                                      (Node!val!0_m Model_10)))
                (held_m Model_10 (Node!val!1_m Model_10))
                (not (held_m Model_10 (Node!val!0_m Model_10))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node)) (not (transfer (ep n1) n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll(n1, Not(transfer(ep(n1), n1))),
;  Not(ForAll(n1, Not(transfer(ep(n1), n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!3
;     Epoch!val!2))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_11)  (Node!val!0_m Model_11) ))
(constraint (distinct (Epoch!val!1_m Model_11)  (Epoch!val!2_m Model_11)  (Epoch!val!3_m Model_11)  (Epoch!val!4_m Model_11)  (Epoch!val!5_m Model_11)  (Epoch!val!0_m Model_11) ))
(constraint (let ((a!1 (and (= (one_m Model_11) (Epoch!val!4_m Model_11))
                (= (zero_m Model_11) (Epoch!val!5_m Model_11))
                (le_m Model_11
                      (Epoch!val!1_m Model_11)
                      (Epoch!val!1_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!1_m Model_11)
                           (Epoch!val!2_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!1_m Model_11)
                           (Epoch!val!3_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!1_m Model_11)
                           (Epoch!val!4_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!1_m Model_11)
                           (Epoch!val!5_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!1_m Model_11)
                           (Epoch!val!0_m Model_11)))
                (le_m Model_11
                      (Epoch!val!2_m Model_11)
                      (Epoch!val!1_m Model_11))
                (le_m Model_11
                      (Epoch!val!2_m Model_11)
                      (Epoch!val!2_m Model_11))
                (le_m Model_11
                      (Epoch!val!2_m Model_11)
                      (Epoch!val!3_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!2_m Model_11)
                           (Epoch!val!4_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!2_m Model_11)
                           (Epoch!val!5_m Model_11)))
                (le_m Model_11
                      (Epoch!val!2_m Model_11)
                      (Epoch!val!0_m Model_11))
                (le_m Model_11
                      (Epoch!val!3_m Model_11)
                      (Epoch!val!1_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!3_m Model_11)
                           (Epoch!val!2_m Model_11)))
                (le_m Model_11
                      (Epoch!val!3_m Model_11)
                      (Epoch!val!3_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!3_m Model_11)
                           (Epoch!val!4_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!3_m Model_11)
                           (Epoch!val!5_m Model_11)))
                (le_m Model_11
                      (Epoch!val!3_m Model_11)
                      (Epoch!val!0_m Model_11))
                (le_m Model_11
                      (Epoch!val!4_m Model_11)
                      (Epoch!val!1_m Model_11))
                (le_m Model_11
                      (Epoch!val!4_m Model_11)
                      (Epoch!val!2_m Model_11))
                (le_m Model_11
                      (Epoch!val!4_m Model_11)
                      (Epoch!val!3_m Model_11))
                (le_m Model_11
                      (Epoch!val!4_m Model_11)
                      (Epoch!val!4_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!4_m Model_11)
                           (Epoch!val!5_m Model_11)))
                (le_m Model_11
                      (Epoch!val!4_m Model_11)
                      (Epoch!val!0_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!1_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!2_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!3_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!4_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!5_m Model_11))
                (le_m Model_11
                      (Epoch!val!5_m Model_11)
                      (Epoch!val!0_m Model_11))
                (le_m Model_11
                      (Epoch!val!0_m Model_11)
                      (Epoch!val!1_m Model_11))
                (not (le_m Model_11
                           (Epoch!val!0_m Model_11)
                           (Epoch!val!2_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!0_m Model_11)
                           (Epoch!val!3_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!0_m Model_11)
                           (Epoch!val!4_m Model_11)))
                (not (le_m Model_11
                           (Epoch!val!0_m Model_11)
                           (Epoch!val!5_m Model_11)))
                (le_m Model_11
                      (Epoch!val!0_m Model_11)
                      (Epoch!val!0_m Model_11))
                (not (transfer_m Model_11
                                     (Epoch!val!1_m Model_11)
                                     (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!1_m Model_11)
                                     (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!2_m Model_11)
                                     (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!2_m Model_11)
                                     (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!3_m Model_11)
                                     (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!3_m Model_11)
                                     (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!4_m Model_11)
                                     (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!4_m Model_11)
                                     (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!5_m Model_11)
                                     (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                     (Epoch!val!5_m Model_11)
                                     (Node!val!0_m Model_11)))
                (transfer_m Model_11
                                (Epoch!val!0_m Model_11)
                                (Node!val!1_m Model_11))
                (not (transfer_m Model_11
                                     (Epoch!val!0_m Model_11)
                                     (Node!val!0_m Model_11)))
                (not (held_m Model_11 (Node!val!1_m Model_11)))
                (not (held_m Model_11 (Node!val!0_m Model_11)))
                (= (ep_m Model_11 (Node!val!1_m Model_11))
                   (Epoch!val!3_m Model_11))
                (= (ep_m Model_11 (Node!val!0_m Model_11))
                   (Epoch!val!2_m Model_11))
                (not (locked_m Model_11
                                   (Epoch!val!1_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!1_m Model_11)
                                   (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!2_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!2_m Model_11)
                                   (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!3_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!3_m Model_11)
                                   (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!4_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!4_m Model_11)
                                   (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!5_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!5_m Model_11)
                                   (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!0_m Model_11)
                                   (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                   (Epoch!val!0_m Model_11)
                                   (Node!val!0_m Model_11)))))
      (a!2 (and (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!1_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!2_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!3_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!4_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!5_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!0_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!1_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!2_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!3_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!4_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!5_m Model_11))
                (inv Model_11
                     (Node!val!1_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!0_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!1_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!2_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!3_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!4_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!5_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!1_m Model_11)
                     (Epoch!val!0_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!1_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!2_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!3_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!4_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!5_m Model_11))
                (inv Model_11
                     (Node!val!0_m Model_11)
                     (Node!val!0_m Model_11)
                     (Epoch!val!0_m Model_11))))
      (a!3 (and (= (ep_m Model_11 (Node!val!1_m Model_11))
                   (Epoch!val!0_m Model_11))
                (= (ep_m Model_11 (Node!val!0_m Model_11))
                   (Epoch!val!2_m Model_11))
                (not (locked_m Model_11
                                    (Epoch!val!1_m Model_11)
                                    (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!1_m Model_11)
                                    (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!2_m Model_11)
                                    (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!2_m Model_11)
                                    (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!3_m Model_11)
                                    (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!3_m Model_11)
                                    (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!4_m Model_11)
                                    (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!4_m Model_11)
                                    (Node!val!0_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!5_m Model_11)
                                    (Node!val!1_m Model_11)))
                (not (locked_m Model_11
                                    (Epoch!val!5_m Model_11)
                                    (Node!val!0_m Model_11)))
                (locked_m Model_11
                               (Epoch!val!0_m Model_11)
                               (Node!val!1_m Model_11))
                (not (locked_m Model_11
                                    (Epoch!val!0_m Model_11)
                                    (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!1_m Model_11)
                                      (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!1_m Model_11)
                                      (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!2_m Model_11)
                                      (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!2_m Model_11)
                                      (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!3_m Model_11)
                                      (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!3_m Model_11)
                                      (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!4_m Model_11)
                                      (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!4_m Model_11)
                                      (Node!val!0_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!5_m Model_11)
                                      (Node!val!1_m Model_11)))
                (not (transfer_m Model_11
                                      (Epoch!val!5_m Model_11)
                                      (Node!val!0_m Model_11)))
                (transfer_m Model_11
                                 (Epoch!val!0_m Model_11)
                                 (Node!val!1_m Model_11))
                (not (transfer_m Model_11
                                      (Epoch!val!0_m Model_11)
                                      (Node!val!0_m Model_11)))
                (held_m Model_11 (Node!val!1_m Model_11))
                (not (held_m Model_11 (Node!val!0_m Model_11))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (transfer e1 n1)) (le (ep n1) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(transfer(e1, n1)), le(ep(n1), e1))),
;  Not(ForAll([n1, e1],
;             Or(Not(transfer(e1, n1)),
;                le(ep(n1), e1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!5
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Node!val!1))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Node!val!1))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!4) (not (= x!0 Epoch!val!3)) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!1)))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Node!val!1))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Node!val!1))))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_12)  (Node!val!0_m Model_12) ))
(constraint (distinct (Epoch!val!1_m Model_12)  (Epoch!val!2_m Model_12)  (Epoch!val!3_m Model_12)  (Epoch!val!4_m Model_12)  (Epoch!val!5_m Model_12)  (Epoch!val!0_m Model_12) ))
(constraint (let ((a!1 (and (= (zero_m Model_12) (Epoch!val!4_m Model_12))
                (= (one_m Model_12) (Epoch!val!3_m Model_12))
                (le_m Model_12
                      (Epoch!val!1_m Model_12)
                      (Epoch!val!1_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!1_m Model_12)
                           (Epoch!val!2_m Model_12)))
                (le_m Model_12
                      (Epoch!val!1_m Model_12)
                      (Epoch!val!3_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!1_m Model_12)
                           (Epoch!val!4_m Model_12)))
                (le_m Model_12
                      (Epoch!val!1_m Model_12)
                      (Epoch!val!5_m Model_12))
                (le_m Model_12
                      (Epoch!val!1_m Model_12)
                      (Epoch!val!0_m Model_12))
                (le_m Model_12
                      (Epoch!val!2_m Model_12)
                      (Epoch!val!1_m Model_12))
                (le_m Model_12
                      (Epoch!val!2_m Model_12)
                      (Epoch!val!2_m Model_12))
                (le_m Model_12
                      (Epoch!val!2_m Model_12)
                      (Epoch!val!3_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!2_m Model_12)
                           (Epoch!val!4_m Model_12)))
                (le_m Model_12
                      (Epoch!val!2_m Model_12)
                      (Epoch!val!5_m Model_12))
                (le_m Model_12
                      (Epoch!val!2_m Model_12)
                      (Epoch!val!0_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!3_m Model_12)
                           (Epoch!val!1_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!3_m Model_12)
                           (Epoch!val!2_m Model_12)))
                (le_m Model_12
                      (Epoch!val!3_m Model_12)
                      (Epoch!val!3_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!3_m Model_12)
                           (Epoch!val!4_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!3_m Model_12)
                           (Epoch!val!5_m Model_12)))
                (le_m Model_12
                      (Epoch!val!3_m Model_12)
                      (Epoch!val!0_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!1_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!2_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!3_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!4_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!5_m Model_12))
                (le_m Model_12
                      (Epoch!val!4_m Model_12)
                      (Epoch!val!0_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!5_m Model_12)
                           (Epoch!val!1_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!5_m Model_12)
                           (Epoch!val!2_m Model_12)))
                (le_m Model_12
                      (Epoch!val!5_m Model_12)
                      (Epoch!val!3_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!5_m Model_12)
                           (Epoch!val!4_m Model_12)))
                (le_m Model_12
                      (Epoch!val!5_m Model_12)
                      (Epoch!val!5_m Model_12))
                (le_m Model_12
                      (Epoch!val!5_m Model_12)
                      (Epoch!val!0_m Model_12))
                (not (le_m Model_12
                           (Epoch!val!0_m Model_12)
                           (Epoch!val!1_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!0_m Model_12)
                           (Epoch!val!2_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!0_m Model_12)
                           (Epoch!val!3_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!0_m Model_12)
                           (Epoch!val!4_m Model_12)))
                (not (le_m Model_12
                           (Epoch!val!0_m Model_12)
                           (Epoch!val!5_m Model_12)))
                (le_m Model_12
                      (Epoch!val!0_m Model_12)
                      (Epoch!val!0_m Model_12))
                (not (transfer_m Model_12
                                     (Epoch!val!1_m Model_12)
                                     (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!1_m Model_12)
                                     (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!2_m Model_12)
                                     (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!2_m Model_12)
                                     (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!3_m Model_12)
                                     (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!3_m Model_12)
                                     (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!4_m Model_12)
                                     (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                     (Epoch!val!4_m Model_12)
                                     (Node!val!0_m Model_12)))
                (transfer_m Model_12
                                (Epoch!val!5_m Model_12)
                                (Node!val!1_m Model_12))
                (not (transfer_m Model_12
                                     (Epoch!val!5_m Model_12)
                                     (Node!val!0_m Model_12)))
                (transfer_m Model_12
                                (Epoch!val!0_m Model_12)
                                (Node!val!1_m Model_12))
                (not (transfer_m Model_12
                                     (Epoch!val!0_m Model_12)
                                     (Node!val!0_m Model_12)))
                (not (held_m Model_12 (Node!val!1_m Model_12)))
                (not (held_m Model_12 (Node!val!0_m Model_12)))
                (= (ep_m Model_12 (Node!val!1_m Model_12))
                   (Epoch!val!5_m Model_12))
                (= (ep_m Model_12 (Node!val!0_m Model_12))
                   (Epoch!val!2_m Model_12))
                (not (locked_m Model_12
                                   (Epoch!val!1_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!1_m Model_12)
                                   (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!2_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!2_m Model_12)
                                   (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!3_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!3_m Model_12)
                                   (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!4_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!4_m Model_12)
                                   (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!5_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!5_m Model_12)
                                   (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!0_m Model_12)
                                   (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                   (Epoch!val!0_m Model_12)
                                   (Node!val!0_m Model_12)))))
      (a!2 (and (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!1_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!2_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!3_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!4_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!5_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!0_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!1_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!2_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!3_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!4_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!5_m Model_12))
                (inv Model_12
                     (Node!val!1_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!0_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!1_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!2_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!3_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!4_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!5_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!1_m Model_12)
                     (Epoch!val!0_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!1_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!2_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!3_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!4_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!5_m Model_12))
                (inv Model_12
                     (Node!val!0_m Model_12)
                     (Node!val!0_m Model_12)
                     (Epoch!val!0_m Model_12))))
      (a!3 (and (= (ep_m Model_12 (Node!val!1_m Model_12))
                   (Epoch!val!0_m Model_12))
                (= (ep_m Model_12 (Node!val!0_m Model_12))
                   (Epoch!val!2_m Model_12))
                (not (locked_m Model_12
                                    (Epoch!val!1_m Model_12)
                                    (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!1_m Model_12)
                                    (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!2_m Model_12)
                                    (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!2_m Model_12)
                                    (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!3_m Model_12)
                                    (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!3_m Model_12)
                                    (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!4_m Model_12)
                                    (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!4_m Model_12)
                                    (Node!val!0_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!5_m Model_12)
                                    (Node!val!1_m Model_12)))
                (not (locked_m Model_12
                                    (Epoch!val!5_m Model_12)
                                    (Node!val!0_m Model_12)))
                (locked_m Model_12
                               (Epoch!val!0_m Model_12)
                               (Node!val!1_m Model_12))
                (not (locked_m Model_12
                                    (Epoch!val!0_m Model_12)
                                    (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!1_m Model_12)
                                      (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!1_m Model_12)
                                      (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!2_m Model_12)
                                      (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!2_m Model_12)
                                      (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!3_m Model_12)
                                      (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!3_m Model_12)
                                      (Node!val!0_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!4_m Model_12)
                                      (Node!val!1_m Model_12)))
                (not (transfer_m Model_12
                                      (Epoch!val!4_m Model_12)
                                      (Node!val!0_m Model_12)))
                (transfer_m Model_12
                                 (Epoch!val!5_m Model_12)
                                 (Node!val!1_m Model_12))
                (not (transfer_m Model_12
                                      (Epoch!val!5_m Model_12)
                                      (Node!val!0_m Model_12)))
                (transfer_m Model_12
                                 (Epoch!val!0_m Model_12)
                                 (Node!val!1_m Model_12))
                (not (transfer_m Model_12
                                      (Epoch!val!0_m Model_12)
                                      (Node!val!0_m Model_12)))
                (held_m Model_12 (Node!val!1_m Model_12))
                (not (held_m Model_12 (Node!val!0_m Model_12))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (n2 Node) (e1 Epoch))
;   (or (not (locked (ep n2) n1)) (le e1 (ep n1))))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, n2, e1],
;         Or(Not(locked(ep(n2), n1)),
;            le(e1, ep(n1)))),
;  Not(ForAll([n1, n2, e1],
;             Or(Not(locked(ep(n2), n1)),
;                le(e1, ep(n1)))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!1)
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!4) (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!1)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!1))
;        (= x!1 Node!val!1)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!1))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!1))
;        (= x!1 Node!val!1)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!6
;     Epoch!val!2))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_13)  (Node!val!0_m Model_13) ))
(constraint (distinct (Epoch!val!1_m Model_13)  (Epoch!val!2_m Model_13)  (Epoch!val!3_m Model_13)  (Epoch!val!6_m Model_13)  (Epoch!val!4_m Model_13)  (Epoch!val!5_m Model_13)  (Epoch!val!0_m Model_13) ))
(constraint (let ((a!1 (and (= (zero_m Model_13) (Epoch!val!5_m Model_13))
                (= (one_m Model_13) (Epoch!val!4_m Model_13))
                (le_m Model_13
                      (Epoch!val!1_m Model_13)
                      (Epoch!val!1_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!1_m Model_13)
                           (Epoch!val!2_m Model_13)))
                (le_m Model_13
                      (Epoch!val!1_m Model_13)
                      (Epoch!val!3_m Model_13))
                (le_m Model_13
                      (Epoch!val!1_m Model_13)
                      (Epoch!val!6_m Model_13))
                (le_m Model_13
                      (Epoch!val!1_m Model_13)
                      (Epoch!val!4_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!1_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (le_m Model_13
                      (Epoch!val!1_m Model_13)
                      (Epoch!val!0_m Model_13))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!1_m Model_13))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!2_m Model_13))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!3_m Model_13))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!6_m Model_13))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!4_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!2_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (le_m Model_13
                      (Epoch!val!2_m Model_13)
                      (Epoch!val!0_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!1_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!2_m Model_13)))
                (le_m Model_13
                      (Epoch!val!3_m Model_13)
                      (Epoch!val!3_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!6_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!4_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!3_m Model_13)
                           (Epoch!val!0_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!6_m Model_13)
                           (Epoch!val!1_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!6_m Model_13)
                           (Epoch!val!2_m Model_13)))
                (le_m Model_13
                      (Epoch!val!6_m Model_13)
                      (Epoch!val!3_m Model_13))
                (le_m Model_13
                      (Epoch!val!6_m Model_13)
                      (Epoch!val!6_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!6_m Model_13)
                           (Epoch!val!4_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!6_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (le_m Model_13
                      (Epoch!val!6_m Model_13)
                      (Epoch!val!0_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!4_m Model_13)
                           (Epoch!val!1_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!4_m Model_13)
                           (Epoch!val!2_m Model_13)))
                (le_m Model_13
                      (Epoch!val!4_m Model_13)
                      (Epoch!val!3_m Model_13))
                (le_m Model_13
                      (Epoch!val!4_m Model_13)
                      (Epoch!val!6_m Model_13))
                (le_m Model_13
                      (Epoch!val!4_m Model_13)
                      (Epoch!val!4_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!4_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (le_m Model_13
                      (Epoch!val!4_m Model_13)
                      (Epoch!val!0_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!1_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!2_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!3_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!6_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!4_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!5_m Model_13))
                (le_m Model_13
                      (Epoch!val!5_m Model_13)
                      (Epoch!val!0_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!0_m Model_13)
                           (Epoch!val!1_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!0_m Model_13)
                           (Epoch!val!2_m Model_13)))
                (le_m Model_13
                      (Epoch!val!0_m Model_13)
                      (Epoch!val!3_m Model_13))
                (not (le_m Model_13
                           (Epoch!val!0_m Model_13)
                           (Epoch!val!6_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!0_m Model_13)
                           (Epoch!val!4_m Model_13)))
                (not (le_m Model_13
                           (Epoch!val!0_m Model_13)
                           (Epoch!val!5_m Model_13)))
                (le_m Model_13
                      (Epoch!val!0_m Model_13)
                      (Epoch!val!0_m Model_13))
                (not (transfer_m Model_13
                                     (Epoch!val!1_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!1_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!2_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!2_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!3_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!3_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!6_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!6_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!4_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!4_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!5_m Model_13)
                                     (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                     (Epoch!val!5_m Model_13)
                                     (Node!val!0_m Model_13)))
                (transfer_m Model_13
                                (Epoch!val!0_m Model_13)
                                (Node!val!1_m Model_13))
                (not (transfer_m Model_13
                                     (Epoch!val!0_m Model_13)
                                     (Node!val!0_m Model_13)))
                (not (held_m Model_13 (Node!val!1_m Model_13)))
                (not (held_m Model_13 (Node!val!0_m Model_13)))
                (= (ep_m Model_13 (Node!val!1_m Model_13))
                   (Epoch!val!6_m Model_13))
                (= (ep_m Model_13 (Node!val!0_m Model_13))
                   (Epoch!val!2_m Model_13))
                (not (locked_m Model_13
                                   (Epoch!val!1_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!1_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!2_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!2_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!3_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!3_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!6_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!6_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!4_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!4_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!5_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!5_m Model_13)
                                   (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!0_m Model_13)
                                   (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                   (Epoch!val!0_m Model_13)
                                   (Node!val!0_m Model_13)))))
      (a!2 (and (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!1_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!2_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!3_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!6_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!4_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!5_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!0_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!1_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!2_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!3_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!6_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!4_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!5_m Model_13))
                (inv Model_13
                     (Node!val!1_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!0_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!1_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!2_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!3_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!6_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!4_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!5_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!1_m Model_13)
                     (Epoch!val!0_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!1_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!2_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!3_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!6_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!4_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!5_m Model_13))
                (inv Model_13
                     (Node!val!0_m Model_13)
                     (Node!val!0_m Model_13)
                     (Epoch!val!0_m Model_13))))
      (a!3 (and (= (ep_m Model_13 (Node!val!1_m Model_13))
                   (Epoch!val!0_m Model_13))
                (= (ep_m Model_13 (Node!val!0_m Model_13))
                   (Epoch!val!2_m Model_13))
                (not (locked_m Model_13
                                    (Epoch!val!1_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!1_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!2_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!2_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!3_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!3_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!6_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!6_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!4_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!4_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!5_m Model_13)
                                    (Node!val!1_m Model_13)))
                (not (locked_m Model_13
                                    (Epoch!val!5_m Model_13)
                                    (Node!val!0_m Model_13)))
                (locked_m Model_13
                               (Epoch!val!0_m Model_13)
                               (Node!val!1_m Model_13))
                (not (locked_m Model_13
                                    (Epoch!val!0_m Model_13)
                                    (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!1_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!1_m Model_13)
                                      (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!2_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!2_m Model_13)
                                      (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!3_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!3_m Model_13)
                                      (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!6_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!6_m Model_13)
                                      (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!4_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!4_m Model_13)
                                      (Node!val!0_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!5_m Model_13)
                                      (Node!val!1_m Model_13)))
                (not (transfer_m Model_13
                                      (Epoch!val!5_m Model_13)
                                      (Node!val!0_m Model_13)))
                (transfer_m Model_13
                                 (Epoch!val!0_m Model_13)
                                 (Node!val!1_m Model_13))
                (not (transfer_m Model_13
                                      (Epoch!val!0_m Model_13)
                                      (Node!val!0_m Model_13)))
                (held_m Model_13 (Node!val!1_m Model_13))
                (not (held_m Model_13 (Node!val!0_m Model_13))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n2 Node) (e1 Epoch)) (not (transfer e1 n2)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n2, e1], Not(transfer(e1, n2))),
;  Not(ForAll([n2, e1], Not(transfer(e1, n2))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!2)) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0) (not (= x!0 Epoch!val!3)) (not (= x!0 Epoch!val!2))))
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_14) ))
(constraint (distinct (Epoch!val!1_m Model_14)  (Epoch!val!2_m Model_14)  (Epoch!val!3_m Model_14)  (Epoch!val!0_m Model_14) ))
(constraint (let ((a!1 (and (= (zero_m Model_14) (Epoch!val!3_m Model_14))
                (= (one_m Model_14) (Epoch!val!2_m Model_14))
                (le_m Model_14
                      (Epoch!val!1_m Model_14)
                      (Epoch!val!1_m Model_14))
                (not (le_m Model_14
                           (Epoch!val!1_m Model_14)
                           (Epoch!val!2_m Model_14)))
                (not (le_m Model_14
                           (Epoch!val!1_m Model_14)
                           (Epoch!val!3_m Model_14)))
                (le_m Model_14
                      (Epoch!val!1_m Model_14)
                      (Epoch!val!0_m Model_14))
                (le_m Model_14
                      (Epoch!val!2_m Model_14)
                      (Epoch!val!1_m Model_14))
                (le_m Model_14
                      (Epoch!val!2_m Model_14)
                      (Epoch!val!2_m Model_14))
                (not (le_m Model_14
                           (Epoch!val!2_m Model_14)
                           (Epoch!val!3_m Model_14)))
                (le_m Model_14
                      (Epoch!val!2_m Model_14)
                      (Epoch!val!0_m Model_14))
                (le_m Model_14
                      (Epoch!val!3_m Model_14)
                      (Epoch!val!1_m Model_14))
                (le_m Model_14
                      (Epoch!val!3_m Model_14)
                      (Epoch!val!2_m Model_14))
                (le_m Model_14
                      (Epoch!val!3_m Model_14)
                      (Epoch!val!3_m Model_14))
                (le_m Model_14
                      (Epoch!val!3_m Model_14)
                      (Epoch!val!0_m Model_14))
                (not (le_m Model_14
                           (Epoch!val!0_m Model_14)
                           (Epoch!val!1_m Model_14)))
                (not (le_m Model_14
                           (Epoch!val!0_m Model_14)
                           (Epoch!val!2_m Model_14)))
                (not (le_m Model_14
                           (Epoch!val!0_m Model_14)
                           (Epoch!val!3_m Model_14)))
                (le_m Model_14
                      (Epoch!val!0_m Model_14)
                      (Epoch!val!0_m Model_14))
                (not (transfer_m Model_14
                                     (Epoch!val!1_m Model_14)
                                     (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                     (Epoch!val!2_m Model_14)
                                     (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                     (Epoch!val!3_m Model_14)
                                     (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                     (Epoch!val!0_m Model_14)
                                     (Node!val!0_m Model_14)))
                (held_m Model_14 (Node!val!0_m Model_14))
                (= (ep_m Model_14 (Node!val!0_m Model_14))
                   (Epoch!val!1_m Model_14))
                (not (locked_m Model_14
                                   (Epoch!val!1_m Model_14)
                                   (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                   (Epoch!val!2_m Model_14)
                                   (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                   (Epoch!val!3_m Model_14)
                                   (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                   (Epoch!val!0_m Model_14)
                                   (Node!val!0_m Model_14)))))
      (a!2 (and (inv Model_14
                     (Node!val!0_m Model_14)
                     (Node!val!0_m Model_14)
                     (Epoch!val!1_m Model_14))
                (inv Model_14
                     (Node!val!0_m Model_14)
                     (Node!val!0_m Model_14)
                     (Epoch!val!2_m Model_14))
                (inv Model_14
                     (Node!val!0_m Model_14)
                     (Node!val!0_m Model_14)
                     (Epoch!val!3_m Model_14))
                (inv Model_14
                     (Node!val!0_m Model_14)
                     (Node!val!0_m Model_14)
                     (Epoch!val!0_m Model_14))))
      (a!3 (and (= (ep_m Model_14 (Node!val!0_m Model_14))
                   (Epoch!val!1_m Model_14))
                (not (locked_m Model_14
                                    (Epoch!val!1_m Model_14)
                                    (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                    (Epoch!val!2_m Model_14)
                                    (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                    (Epoch!val!3_m Model_14)
                                    (Node!val!0_m Model_14)))
                (not (locked_m Model_14
                                    (Epoch!val!0_m Model_14)
                                    (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                      (Epoch!val!1_m Model_14)
                                      (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                      (Epoch!val!2_m Model_14)
                                      (Node!val!0_m Model_14)))
                (not (transfer_m Model_14
                                      (Epoch!val!3_m Model_14)
                                      (Node!val!0_m Model_14)))
                (transfer_m Model_14
                                 (Epoch!val!0_m Model_14)
                                 (Node!val!0_m Model_14))
                (not (held_m Model_14 (Node!val!0_m Model_14))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch))
;   (or (not (locked (ep n1) n1)) (le e1 (ep n1))))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1],
;         Or(Not(locked(ep(n1), n1)),
;            le(e1, ep(n1)))),
;  Not(ForAll([n1, e1],
;             Or(Not(locked(ep(n1), n1)),
;                le(e1, ep(n1)))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!5)
; (define-fun zero () Epoch
;   Epoch!val!6)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!3
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!0))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_15)  (Node!val!0_m Model_15) ))
(constraint (distinct (Epoch!val!1_m Model_15)  (Epoch!val!2_m Model_15)  (Epoch!val!3_m Model_15)  (Epoch!val!6_m Model_15)  (Epoch!val!4_m Model_15)  (Epoch!val!5_m Model_15)  (Epoch!val!0_m Model_15) ))
(constraint (let ((a!1 (and (= (one_m Model_15) (Epoch!val!5_m Model_15))
                (= (zero_m Model_15) (Epoch!val!6_m Model_15))
                (le_m Model_15
                      (Epoch!val!1_m Model_15)
                      (Epoch!val!1_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!1_m Model_15)
                           (Epoch!val!2_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!1_m Model_15)
                           (Epoch!val!3_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!1_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!1_m Model_15)
                      (Epoch!val!4_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!1_m Model_15)
                           (Epoch!val!5_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!1_m Model_15)
                           (Epoch!val!0_m Model_15)))
                (le_m Model_15
                      (Epoch!val!2_m Model_15)
                      (Epoch!val!1_m Model_15))
                (le_m Model_15
                      (Epoch!val!2_m Model_15)
                      (Epoch!val!2_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!2_m Model_15)
                           (Epoch!val!3_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!2_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!2_m Model_15)
                      (Epoch!val!4_m Model_15))
                (le_m Model_15
                      (Epoch!val!2_m Model_15)
                      (Epoch!val!5_m Model_15))
                (le_m Model_15
                      (Epoch!val!2_m Model_15)
                      (Epoch!val!0_m Model_15))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!1_m Model_15))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!2_m Model_15))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!3_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!3_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!4_m Model_15))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!5_m Model_15))
                (le_m Model_15
                      (Epoch!val!3_m Model_15)
                      (Epoch!val!0_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!1_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!2_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!3_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!6_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!4_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!5_m Model_15))
                (le_m Model_15
                      (Epoch!val!6_m Model_15)
                      (Epoch!val!0_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!1_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!2_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!3_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!4_m Model_15)
                      (Epoch!val!4_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!5_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!4_m Model_15)
                           (Epoch!val!0_m Model_15)))
                (le_m Model_15
                      (Epoch!val!5_m Model_15)
                      (Epoch!val!1_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!5_m Model_15)
                           (Epoch!val!2_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!5_m Model_15)
                           (Epoch!val!3_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!5_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!5_m Model_15)
                      (Epoch!val!4_m Model_15))
                (le_m Model_15
                      (Epoch!val!5_m Model_15)
                      (Epoch!val!5_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!5_m Model_15)
                           (Epoch!val!0_m Model_15)))
                (le_m Model_15
                      (Epoch!val!0_m Model_15)
                      (Epoch!val!1_m Model_15))
                (not (le_m Model_15
                           (Epoch!val!0_m Model_15)
                           (Epoch!val!2_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!0_m Model_15)
                           (Epoch!val!3_m Model_15)))
                (not (le_m Model_15
                           (Epoch!val!0_m Model_15)
                           (Epoch!val!6_m Model_15)))
                (le_m Model_15
                      (Epoch!val!0_m Model_15)
                      (Epoch!val!4_m Model_15))
                (le_m Model_15
                      (Epoch!val!0_m Model_15)
                      (Epoch!val!5_m Model_15))
                (le_m Model_15
                      (Epoch!val!0_m Model_15)
                      (Epoch!val!0_m Model_15))
                (not (transfer_m Model_15
                                     (Epoch!val!1_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!1_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!2_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!2_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!3_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!3_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!6_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!6_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!4_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!4_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!5_m Model_15)
                                     (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!5_m Model_15)
                                     (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                     (Epoch!val!0_m Model_15)
                                     (Node!val!1_m Model_15)))
                (transfer_m Model_15
                                (Epoch!val!0_m Model_15)
                                (Node!val!0_m Model_15))
                (not (held_m Model_15 (Node!val!1_m Model_15)))
                (not (held_m Model_15 (Node!val!0_m Model_15)))
                (= (ep_m Model_15 (Node!val!1_m Model_15))
                   (Epoch!val!2_m Model_15))
                (= (ep_m Model_15 (Node!val!0_m Model_15))
                   (Epoch!val!3_m Model_15))
                (not (locked_m Model_15
                                   (Epoch!val!1_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!1_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!2_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!2_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!3_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!3_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!6_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!6_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!4_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!4_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!5_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!5_m Model_15)
                                   (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!0_m Model_15)
                                   (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                   (Epoch!val!0_m Model_15)
                                   (Node!val!0_m Model_15)))))
      (a!2 (and (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!1_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!2_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!3_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!6_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!4_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!5_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!0_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!1_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!2_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!3_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!6_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!4_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!5_m Model_15))
                (inv Model_15
                     (Node!val!1_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!0_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!1_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!2_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!3_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!6_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!4_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!5_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!1_m Model_15)
                     (Epoch!val!0_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!1_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!2_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!3_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!6_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!4_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!5_m Model_15))
                (inv Model_15
                     (Node!val!0_m Model_15)
                     (Node!val!0_m Model_15)
                     (Epoch!val!0_m Model_15))))
      (a!3 (and (= (ep_m Model_15 (Node!val!1_m Model_15))
                   (Epoch!val!2_m Model_15))
                (= (ep_m Model_15 (Node!val!0_m Model_15))
                   (Epoch!val!0_m Model_15))
                (not (locked_m Model_15
                                    (Epoch!val!1_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!1_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!2_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!2_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!3_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!3_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!6_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!6_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!4_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!4_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!5_m Model_15)
                                    (Node!val!1_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!5_m Model_15)
                                    (Node!val!0_m Model_15)))
                (not (locked_m Model_15
                                    (Epoch!val!0_m Model_15)
                                    (Node!val!1_m Model_15)))
                (locked_m Model_15
                               (Epoch!val!0_m Model_15)
                               (Node!val!0_m Model_15))
                (not (transfer_m Model_15
                                      (Epoch!val!1_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!1_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!2_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!2_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!3_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!3_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!6_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!6_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!4_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!4_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!5_m Model_15)
                                      (Node!val!1_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!5_m Model_15)
                                      (Node!val!0_m Model_15)))
                (not (transfer_m Model_15
                                      (Epoch!val!0_m Model_15)
                                      (Node!val!1_m Model_15)))
                (transfer_m Model_15
                                 (Epoch!val!0_m Model_15)
                                 (Node!val!0_m Model_15))
                (not (held_m Model_15 (Node!val!1_m Model_15)))
                (held_m Model_15 (Node!val!0_m Model_15)))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (transfer (ep n2) n1)) (held n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, n2],
;         Or(held(n1), Not(transfer(ep(n2), n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(transfer(ep(n2), n1)),
;                held(n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun ep ((x!0 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 Node!val!0) (not (= x!0 Node!val!2)))
;                   Epoch!val!2
;                   Epoch!val!4)))
;     (ite (and (not (= x!0 Node!val!0)) (not (= x!0 Node!val!2)))
;          Epoch!val!6
;          (ite (= x!0 Node!val!2) Epoch!val!3 a!1))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!2))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Node!val!0))
;            (not (= x!1 Node!val!2)))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 Node!val!0) (not (= x!0 Node!val!2)))
;                   Epoch!val!2
;                   (ite (= x!0 Node!val!2) Epoch!val!0 Epoch!val!4))))
;     (ite (and (not (= x!0 Node!val!0)) (not (= x!0 Node!val!2)))
;          Epoch!val!6
;          a!1)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!2)))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!2))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Node!val!0))
;            (not (= x!1 Node!val!2)))))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_16)  (Node!val!0_m Model_16)  (Node!val!2_m Model_16) ))
(constraint (distinct (Epoch!val!1_m Model_16)  (Epoch!val!2_m Model_16)  (Epoch!val!3_m Model_16)  (Epoch!val!6_m Model_16)  (Epoch!val!4_m Model_16)  (Epoch!val!5_m Model_16)  (Epoch!val!0_m Model_16) ))
(constraint (let ((a!1 (and (= (one_m Model_16) (Epoch!val!4_m Model_16))
                (= (zero_m Model_16) (Epoch!val!5_m Model_16))
                (le_m Model_16
                      (Epoch!val!1_m Model_16)
                      (Epoch!val!1_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!1_m Model_16)
                           (Epoch!val!2_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!1_m Model_16)
                           (Epoch!val!3_m Model_16)))
                (le_m Model_16
                      (Epoch!val!1_m Model_16)
                      (Epoch!val!6_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!1_m Model_16)
                           (Epoch!val!4_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!1_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (le_m Model_16
                      (Epoch!val!1_m Model_16)
                      (Epoch!val!0_m Model_16))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!1_m Model_16))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!2_m Model_16))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!3_m Model_16))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!6_m Model_16))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!4_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!2_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (le_m Model_16
                      (Epoch!val!2_m Model_16)
                      (Epoch!val!0_m Model_16))
                (le_m Model_16
                      (Epoch!val!3_m Model_16)
                      (Epoch!val!1_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!3_m Model_16)
                           (Epoch!val!2_m Model_16)))
                (le_m Model_16
                      (Epoch!val!3_m Model_16)
                      (Epoch!val!3_m Model_16))
                (le_m Model_16
                      (Epoch!val!3_m Model_16)
                      (Epoch!val!6_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!3_m Model_16)
                           (Epoch!val!4_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!3_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (le_m Model_16
                      (Epoch!val!3_m Model_16)
                      (Epoch!val!0_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!1_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!2_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!3_m Model_16)))
                (le_m Model_16
                      (Epoch!val!6_m Model_16)
                      (Epoch!val!6_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!4_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!6_m Model_16)
                           (Epoch!val!0_m Model_16)))
                (le_m Model_16
                      (Epoch!val!4_m Model_16)
                      (Epoch!val!1_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!4_m Model_16)
                           (Epoch!val!2_m Model_16)))
                (le_m Model_16
                      (Epoch!val!4_m Model_16)
                      (Epoch!val!3_m Model_16))
                (le_m Model_16
                      (Epoch!val!4_m Model_16)
                      (Epoch!val!6_m Model_16))
                (le_m Model_16
                      (Epoch!val!4_m Model_16)
                      (Epoch!val!4_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!4_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (le_m Model_16
                      (Epoch!val!4_m Model_16)
                      (Epoch!val!0_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!1_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!2_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!3_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!6_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!4_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!5_m Model_16))
                (le_m Model_16
                      (Epoch!val!5_m Model_16)
                      (Epoch!val!0_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!0_m Model_16)
                           (Epoch!val!1_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!0_m Model_16)
                           (Epoch!val!2_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!0_m Model_16)
                           (Epoch!val!3_m Model_16)))
                (le_m Model_16
                      (Epoch!val!0_m Model_16)
                      (Epoch!val!6_m Model_16))
                (not (le_m Model_16
                           (Epoch!val!0_m Model_16)
                           (Epoch!val!4_m Model_16)))
                (not (le_m Model_16
                           (Epoch!val!0_m Model_16)
                           (Epoch!val!5_m Model_16)))
                (le_m Model_16
                      (Epoch!val!0_m Model_16)
                      (Epoch!val!0_m Model_16))
                (not (transfer_m Model_16
                                     (Epoch!val!1_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!1_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!1_m Model_16)
                                     (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!2_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!2_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!2_m Model_16)
                                     (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!3_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!3_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!3_m Model_16)
                                     (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!6_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!6_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!6_m Model_16)
                                     (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!4_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!4_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!4_m Model_16)
                                     (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!5_m Model_16)
                                     (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!5_m Model_16)
                                     (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                     (Epoch!val!5_m Model_16)
                                     (Node!val!2_m Model_16)))
                (transfer_m Model_16
                                (Epoch!val!0_m Model_16)
                                (Node!val!1_m Model_16))
                (not (transfer_m Model_16
                                     (Epoch!val!0_m Model_16)
                                     (Node!val!0_m Model_16)))
                (transfer_m Model_16
                                (Epoch!val!0_m Model_16)
                                (Node!val!2_m Model_16))
                (not (held_m Model_16 (Node!val!1_m Model_16)))
                (not (held_m Model_16 (Node!val!0_m Model_16)))
                (not (held_m Model_16 (Node!val!2_m Model_16)))
                (= (ep_m Model_16 (Node!val!1_m Model_16))
                   (Epoch!val!6_m Model_16))
                (= (ep_m Model_16 (Node!val!0_m Model_16))
                   (Epoch!val!2_m Model_16))
                (= (ep_m Model_16 (Node!val!2_m Model_16))
                   (Epoch!val!3_m Model_16))
                (not (locked_m Model_16
                                   (Epoch!val!1_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!1_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!1_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!2_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!2_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!2_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!3_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!3_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!3_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!6_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!6_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!6_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!4_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!4_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!4_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!5_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!5_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!5_m Model_16)
                                   (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!0_m Model_16)
                                   (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!0_m Model_16)
                                   (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                   (Epoch!val!0_m Model_16)
                                   (Node!val!2_m Model_16)))))
      (a!2 (and (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!1_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!0_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!1_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!0_m Model_16)
                     (Epoch!val!0_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!1_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!2_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!3_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!6_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!4_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!5_m Model_16))
                (inv Model_16
                     (Node!val!2_m Model_16)
                     (Node!val!2_m Model_16)
                     (Epoch!val!0_m Model_16))))
      (a!3 (and (= (ep_m Model_16 (Node!val!1_m Model_16))
                   (Epoch!val!6_m Model_16))
                (= (ep_m Model_16 (Node!val!0_m Model_16))
                   (Epoch!val!2_m Model_16))
                (= (ep_m Model_16 (Node!val!2_m Model_16))
                   (Epoch!val!0_m Model_16))
                (not (locked_m Model_16
                                    (Epoch!val!1_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!1_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!1_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!2_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!2_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!2_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!3_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!3_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!3_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!6_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!6_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!6_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!4_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!4_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!4_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!5_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!5_m Model_16)
                                    (Node!val!0_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!5_m Model_16)
                                    (Node!val!2_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!0_m Model_16)
                                    (Node!val!1_m Model_16)))
                (not (locked_m Model_16
                                    (Epoch!val!0_m Model_16)
                                    (Node!val!0_m Model_16)))
                (locked_m Model_16
                               (Epoch!val!0_m Model_16)
                               (Node!val!2_m Model_16))
                (not (transfer_m Model_16
                                      (Epoch!val!1_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!1_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!1_m Model_16)
                                      (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!2_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!2_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!2_m Model_16)
                                      (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!3_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!3_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!3_m Model_16)
                                      (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!6_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!6_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!6_m Model_16)
                                      (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!4_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!4_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!4_m Model_16)
                                      (Node!val!2_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!5_m Model_16)
                                      (Node!val!1_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!5_m Model_16)
                                      (Node!val!0_m Model_16)))
                (not (transfer_m Model_16
                                      (Epoch!val!5_m Model_16)
                                      (Node!val!2_m Model_16)))
                (transfer_m Model_16
                                 (Epoch!val!0_m Model_16)
                                 (Node!val!1_m Model_16))
                (not (transfer_m Model_16
                                      (Epoch!val!0_m Model_16)
                                      (Node!val!0_m Model_16)))
                (transfer_m Model_16
                                 (Epoch!val!0_m Model_16)
                                 (Node!val!2_m Model_16))
                (not (held_m Model_16 (Node!val!1_m Model_16)))
                (not (held_m Model_16 (Node!val!0_m Model_16)))
                (held_m Model_16 (Node!val!2_m Model_16)))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (or (held n1) (le (ep n1) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, e1], Or(held(n1), le(ep(n1), e1))),
;  Not(ForAll([n1, e1],
;             Or(held(n1), le(ep(n1), e1))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!0)
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!0) (= x!1 Epoch!val!0))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!0)) (= x!1 Epoch!val!0))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (= x!0 Epoch!val!0))
(constraint (distinct (Node!val!0_m Model_17) ))
(constraint (distinct (Epoch!val!1_m Model_17)  (Epoch!val!2_m Model_17)  (Epoch!val!3_m Model_17)  (Epoch!val!0_m Model_17) ))
(constraint (let ((a!1 (and (= (one_m Model_17) (Epoch!val!0_m Model_17))
                (= (zero_m Model_17) (Epoch!val!3_m Model_17))
                (not (locked_m Model_17
                                   (Epoch!val!1_m Model_17)
                                   (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                   (Epoch!val!2_m Model_17)
                                   (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                   (Epoch!val!3_m Model_17)
                                   (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                   (Epoch!val!0_m Model_17)
                                   (Node!val!0_m Model_17)))
                (le_m Model_17
                      (Epoch!val!1_m Model_17)
                      (Epoch!val!1_m Model_17))
                (not (le_m Model_17
                           (Epoch!val!1_m Model_17)
                           (Epoch!val!2_m Model_17)))
                (not (le_m Model_17
                           (Epoch!val!1_m Model_17)
                           (Epoch!val!3_m Model_17)))
                (le_m Model_17
                      (Epoch!val!1_m Model_17)
                      (Epoch!val!0_m Model_17))
                (le_m Model_17
                      (Epoch!val!2_m Model_17)
                      (Epoch!val!1_m Model_17))
                (le_m Model_17
                      (Epoch!val!2_m Model_17)
                      (Epoch!val!2_m Model_17))
                (not (le_m Model_17
                           (Epoch!val!2_m Model_17)
                           (Epoch!val!3_m Model_17)))
                (le_m Model_17
                      (Epoch!val!2_m Model_17)
                      (Epoch!val!0_m Model_17))
                (le_m Model_17
                      (Epoch!val!3_m Model_17)
                      (Epoch!val!1_m Model_17))
                (le_m Model_17
                      (Epoch!val!3_m Model_17)
                      (Epoch!val!2_m Model_17))
                (le_m Model_17
                      (Epoch!val!3_m Model_17)
                      (Epoch!val!3_m Model_17))
                (le_m Model_17
                      (Epoch!val!3_m Model_17)
                      (Epoch!val!0_m Model_17))
                (not (le_m Model_17
                           (Epoch!val!0_m Model_17)
                           (Epoch!val!1_m Model_17)))
                (not (le_m Model_17
                           (Epoch!val!0_m Model_17)
                           (Epoch!val!2_m Model_17)))
                (not (le_m Model_17
                           (Epoch!val!0_m Model_17)
                           (Epoch!val!3_m Model_17)))
                (le_m Model_17
                      (Epoch!val!0_m Model_17)
                      (Epoch!val!0_m Model_17))
                (not (transfer_m Model_17
                                     (Epoch!val!1_m Model_17)
                                     (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                     (Epoch!val!2_m Model_17)
                                     (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                     (Epoch!val!3_m Model_17)
                                     (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                     (Epoch!val!0_m Model_17)
                                     (Node!val!0_m Model_17)))
                (held_m Model_17 (Node!val!0_m Model_17))
                (= (ep_m Model_17 (Node!val!0_m Model_17))
                   (Epoch!val!1_m Model_17))))
      (a!2 (and (inv Model_17
                     (Node!val!0_m Model_17)
                     (Node!val!0_m Model_17)
                     (Epoch!val!1_m Model_17))
                (inv Model_17
                     (Node!val!0_m Model_17)
                     (Node!val!0_m Model_17)
                     (Epoch!val!2_m Model_17))
                (inv Model_17
                     (Node!val!0_m Model_17)
                     (Node!val!0_m Model_17)
                     (Epoch!val!3_m Model_17))
                (inv Model_17
                     (Node!val!0_m Model_17)
                     (Node!val!0_m Model_17)
                     (Epoch!val!0_m Model_17))))
      (a!3 (and (= (ep_m Model_17 (Node!val!0_m Model_17))
                   (Epoch!val!1_m Model_17))
                (not (locked_m Model_17
                                    (Epoch!val!1_m Model_17)
                                    (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                    (Epoch!val!2_m Model_17)
                                    (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                    (Epoch!val!3_m Model_17)
                                    (Node!val!0_m Model_17)))
                (not (locked_m Model_17
                                    (Epoch!val!0_m Model_17)
                                    (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                      (Epoch!val!1_m Model_17)
                                      (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                      (Epoch!val!2_m Model_17)
                                      (Node!val!0_m Model_17)))
                (not (transfer_m Model_17
                                      (Epoch!val!3_m Model_17)
                                      (Node!val!0_m Model_17)))
                (transfer_m Model_17
                                 (Epoch!val!0_m Model_17)
                                 (Node!val!0_m Model_17))
                (not (held_m Model_17 (Node!val!0_m Model_17))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (transfer (ep n2) n1)) (held n2)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, n2],
;         Or(held(n2), Not(transfer(ep(n2), n1)))),
;  Not(ForAll([n1, n2],
;             Or(Not(transfer(ep(n2), n1)),
;                held(n2))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!2)
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!4) (not (= x!0 Epoch!val!3)) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3)))))
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_18) ))
(constraint (distinct (Epoch!val!1_m Model_18)  (Epoch!val!2_m Model_18)  (Epoch!val!3_m Model_18)  (Epoch!val!4_m Model_18)  (Epoch!val!0_m Model_18) ))
(constraint (let ((a!1 (and (= (zero_m Model_18) (Epoch!val!4_m Model_18))
                (= (one_m Model_18) (Epoch!val!3_m Model_18))
                (le_m Model_18
                      (Epoch!val!1_m Model_18)
                      (Epoch!val!1_m Model_18))
                (not (le_m Model_18
                           (Epoch!val!1_m Model_18)
                           (Epoch!val!2_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!1_m Model_18)
                           (Epoch!val!3_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!1_m Model_18)
                           (Epoch!val!4_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!1_m Model_18)
                           (Epoch!val!0_m Model_18)))
                (le_m Model_18
                      (Epoch!val!2_m Model_18)
                      (Epoch!val!1_m Model_18))
                (le_m Model_18
                      (Epoch!val!2_m Model_18)
                      (Epoch!val!2_m Model_18))
                (not (le_m Model_18
                           (Epoch!val!2_m Model_18)
                           (Epoch!val!3_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!2_m Model_18)
                           (Epoch!val!4_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!2_m Model_18)
                           (Epoch!val!0_m Model_18)))
                (le_m Model_18
                      (Epoch!val!3_m Model_18)
                      (Epoch!val!1_m Model_18))
                (le_m Model_18
                      (Epoch!val!3_m Model_18)
                      (Epoch!val!2_m Model_18))
                (le_m Model_18
                      (Epoch!val!3_m Model_18)
                      (Epoch!val!3_m Model_18))
                (not (le_m Model_18
                           (Epoch!val!3_m Model_18)
                           (Epoch!val!4_m Model_18)))
                (not (le_m Model_18
                           (Epoch!val!3_m Model_18)
                           (Epoch!val!0_m Model_18)))
                (le_m Model_18
                      (Epoch!val!4_m Model_18)
                      (Epoch!val!1_m Model_18))
                (le_m Model_18
                      (Epoch!val!4_m Model_18)
                      (Epoch!val!2_m Model_18))
                (le_m Model_18
                      (Epoch!val!4_m Model_18)
                      (Epoch!val!3_m Model_18))
                (le_m Model_18
                      (Epoch!val!4_m Model_18)
                      (Epoch!val!4_m Model_18))
                (le_m Model_18
                      (Epoch!val!4_m Model_18)
                      (Epoch!val!0_m Model_18))
                (le_m Model_18
                      (Epoch!val!0_m Model_18)
                      (Epoch!val!1_m Model_18))
                (le_m Model_18
                      (Epoch!val!0_m Model_18)
                      (Epoch!val!2_m Model_18))
                (le_m Model_18
                      (Epoch!val!0_m Model_18)
                      (Epoch!val!3_m Model_18))
                (not (le_m Model_18
                           (Epoch!val!0_m Model_18)
                           (Epoch!val!4_m Model_18)))
                (le_m Model_18
                      (Epoch!val!0_m Model_18)
                      (Epoch!val!0_m Model_18))
                (not (transfer_m Model_18
                                     (Epoch!val!1_m Model_18)
                                     (Node!val!0_m Model_18)))
                (transfer_m Model_18
                                (Epoch!val!2_m Model_18)
                                (Node!val!0_m Model_18))
                (not (transfer_m Model_18
                                     (Epoch!val!3_m Model_18)
                                     (Node!val!0_m Model_18)))
                (not (transfer_m Model_18
                                     (Epoch!val!4_m Model_18)
                                     (Node!val!0_m Model_18)))
                (not (transfer_m Model_18
                                     (Epoch!val!0_m Model_18)
                                     (Node!val!0_m Model_18)))
                (held_m Model_18 (Node!val!0_m Model_18))
                (= (ep_m Model_18 (Node!val!0_m Model_18))
                   (Epoch!val!2_m Model_18))
                (not (locked_m Model_18
                                   (Epoch!val!1_m Model_18)
                                   (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                   (Epoch!val!2_m Model_18)
                                   (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                   (Epoch!val!3_m Model_18)
                                   (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                   (Epoch!val!4_m Model_18)
                                   (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                   (Epoch!val!0_m Model_18)
                                   (Node!val!0_m Model_18)))))
      (a!2 (and (inv Model_18
                     (Node!val!0_m Model_18)
                     (Node!val!0_m Model_18)
                     (Epoch!val!1_m Model_18))
                (inv Model_18
                     (Node!val!0_m Model_18)
                     (Node!val!0_m Model_18)
                     (Epoch!val!2_m Model_18))
                (inv Model_18
                     (Node!val!0_m Model_18)
                     (Node!val!0_m Model_18)
                     (Epoch!val!3_m Model_18))
                (inv Model_18
                     (Node!val!0_m Model_18)
                     (Node!val!0_m Model_18)
                     (Epoch!val!4_m Model_18))
                (inv Model_18
                     (Node!val!0_m Model_18)
                     (Node!val!0_m Model_18)
                     (Epoch!val!0_m Model_18))))
      (a!3 (and (= (ep_m Model_18 (Node!val!0_m Model_18))
                   (Epoch!val!2_m Model_18))
                (not (locked_m Model_18
                                    (Epoch!val!1_m Model_18)
                                    (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                    (Epoch!val!2_m Model_18)
                                    (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                    (Epoch!val!3_m Model_18)
                                    (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                    (Epoch!val!4_m Model_18)
                                    (Node!val!0_m Model_18)))
                (not (locked_m Model_18
                                    (Epoch!val!0_m Model_18)
                                    (Node!val!0_m Model_18)))
                (transfer_m Model_18
                                 (Epoch!val!1_m Model_18)
                                 (Node!val!0_m Model_18))
                (transfer_m Model_18
                                 (Epoch!val!2_m Model_18)
                                 (Node!val!0_m Model_18))
                (not (transfer_m Model_18
                                      (Epoch!val!3_m Model_18)
                                      (Node!val!0_m Model_18)))
                (not (transfer_m Model_18
                                      (Epoch!val!4_m Model_18)
                                      (Node!val!0_m Model_18)))
                (not (transfer_m Model_18
                                      (Epoch!val!0_m Model_18)
                                      (Node!val!0_m Model_18)))
                (not (held_m Model_18 (Node!val!0_m Model_18))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (n2 Node))
;   (or (not (transfer (ep n1) n2)) (held n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, n2],
;         Or(held(n1), Not(transfer(ep(n1), n2)))),
;  Not(ForAll([n1, n2],
;             Or(Not(transfer(ep(n1), n2)),
;                held(n1))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!1)
; (define-fun zero () Epoch
;   Epoch!val!2)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!1)) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!1) (= x!1 Epoch!val!1))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!1))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!1)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!3)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (not (= x!0 Epoch!val!0))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!1))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!1)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!3)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_19) ))
(constraint (distinct (Epoch!val!1_m Model_19)  (Epoch!val!2_m Model_19)  (Epoch!val!3_m Model_19)  (Epoch!val!0_m Model_19) ))
(constraint (let ((a!1 (and (= (one_m Model_19) (Epoch!val!1_m Model_19))
                (= (zero_m Model_19) (Epoch!val!2_m Model_19))
                (le_m Model_19
                      (Epoch!val!1_m Model_19)
                      (Epoch!val!1_m Model_19))
                (not (le_m Model_19
                           (Epoch!val!1_m Model_19)
                           (Epoch!val!2_m Model_19)))
                (le_m Model_19
                      (Epoch!val!1_m Model_19)
                      (Epoch!val!3_m Model_19))
                (le_m Model_19
                      (Epoch!val!1_m Model_19)
                      (Epoch!val!0_m Model_19))
                (le_m Model_19
                      (Epoch!val!2_m Model_19)
                      (Epoch!val!1_m Model_19))
                (le_m Model_19
                      (Epoch!val!2_m Model_19)
                      (Epoch!val!2_m Model_19))
                (le_m Model_19
                      (Epoch!val!2_m Model_19)
                      (Epoch!val!3_m Model_19))
                (le_m Model_19
                      (Epoch!val!2_m Model_19)
                      (Epoch!val!0_m Model_19))
                (not (le_m Model_19
                           (Epoch!val!3_m Model_19)
                           (Epoch!val!1_m Model_19)))
                (not (le_m Model_19
                           (Epoch!val!3_m Model_19)
                           (Epoch!val!2_m Model_19)))
                (le_m Model_19
                      (Epoch!val!3_m Model_19)
                      (Epoch!val!3_m Model_19))
                (le_m Model_19
                      (Epoch!val!3_m Model_19)
                      (Epoch!val!0_m Model_19))
                (not (le_m Model_19
                           (Epoch!val!0_m Model_19)
                           (Epoch!val!1_m Model_19)))
                (not (le_m Model_19
                           (Epoch!val!0_m Model_19)
                           (Epoch!val!2_m Model_19)))
                (not (le_m Model_19
                           (Epoch!val!0_m Model_19)
                           (Epoch!val!3_m Model_19)))
                (le_m Model_19
                      (Epoch!val!0_m Model_19)
                      (Epoch!val!0_m Model_19))
                (not (transfer_m Model_19
                                     (Epoch!val!1_m Model_19)
                                     (Node!val!0_m Model_19)))
                (not (transfer_m Model_19
                                     (Epoch!val!2_m Model_19)
                                     (Node!val!0_m Model_19)))
                (transfer_m Model_19
                                (Epoch!val!3_m Model_19)
                                (Node!val!0_m Model_19))
                (not (transfer_m Model_19
                                     (Epoch!val!0_m Model_19)
                                     (Node!val!0_m Model_19)))
                (held_m Model_19 (Node!val!0_m Model_19))
                (= (ep_m Model_19 (Node!val!0_m Model_19))
                   (Epoch!val!3_m Model_19))
                (not (locked_m Model_19
                                   (Epoch!val!1_m Model_19)
                                   (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                   (Epoch!val!2_m Model_19)
                                   (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                   (Epoch!val!3_m Model_19)
                                   (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                   (Epoch!val!0_m Model_19)
                                   (Node!val!0_m Model_19)))))
      (a!2 (and (inv Model_19
                     (Node!val!0_m Model_19)
                     (Node!val!0_m Model_19)
                     (Epoch!val!1_m Model_19))
                (inv Model_19
                     (Node!val!0_m Model_19)
                     (Node!val!0_m Model_19)
                     (Epoch!val!2_m Model_19))
                (inv Model_19
                     (Node!val!0_m Model_19)
                     (Node!val!0_m Model_19)
                     (Epoch!val!3_m Model_19))
                (inv Model_19
                     (Node!val!0_m Model_19)
                     (Node!val!0_m Model_19)
                     (Epoch!val!0_m Model_19))))
      (a!3 (and (= (ep_m Model_19 (Node!val!0_m Model_19))
                   (Epoch!val!3_m Model_19))
                (not (locked_m Model_19
                                    (Epoch!val!1_m Model_19)
                                    (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                    (Epoch!val!2_m Model_19)
                                    (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                    (Epoch!val!3_m Model_19)
                                    (Node!val!0_m Model_19)))
                (not (locked_m Model_19
                                    (Epoch!val!0_m Model_19)
                                    (Node!val!0_m Model_19)))
                (not (transfer_m Model_19
                                      (Epoch!val!1_m Model_19)
                                      (Node!val!0_m Model_19)))
                (not (transfer_m Model_19
                                      (Epoch!val!2_m Model_19)
                                      (Node!val!0_m Model_19)))
                (transfer_m Model_19
                                 (Epoch!val!3_m Model_19)
                                 (Node!val!0_m Model_19))
                (transfer_m Model_19
                                 (Epoch!val!0_m Model_19)
                                 (Node!val!0_m Model_19))
                (not (held_m Model_19 (Node!val!0_m Model_19))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n2 Node)) (or (not (transfer (ep n2) n2)) (held n2)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll(n2,
;         Or(Not(transfer(ep(n2), n2)), held(n2))),
;  Not(ForAll(n2,
;             Or(Not(transfer(ep(n2), n2)),
;                held(n2))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!2)) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (not (= x!0 Epoch!val!0))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!2))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2)))))
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!1)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_20) ))
(constraint (distinct (Epoch!val!1_m Model_20)  (Epoch!val!2_m Model_20)  (Epoch!val!3_m Model_20)  (Epoch!val!0_m Model_20) ))
(constraint (let ((a!1 (and (= (zero_m Model_20) (Epoch!val!3_m Model_20))
                (= (one_m Model_20) (Epoch!val!2_m Model_20))
                (le_m Model_20
                      (Epoch!val!1_m Model_20)
                      (Epoch!val!1_m Model_20))
                (not (le_m Model_20
                           (Epoch!val!1_m Model_20)
                           (Epoch!val!2_m Model_20)))
                (not (le_m Model_20
                           (Epoch!val!1_m Model_20)
                           (Epoch!val!3_m Model_20)))
                (le_m Model_20
                      (Epoch!val!1_m Model_20)
                      (Epoch!val!0_m Model_20))
                (le_m Model_20
                      (Epoch!val!2_m Model_20)
                      (Epoch!val!1_m Model_20))
                (le_m Model_20
                      (Epoch!val!2_m Model_20)
                      (Epoch!val!2_m Model_20))
                (not (le_m Model_20
                           (Epoch!val!2_m Model_20)
                           (Epoch!val!3_m Model_20)))
                (le_m Model_20
                      (Epoch!val!2_m Model_20)
                      (Epoch!val!0_m Model_20))
                (le_m Model_20
                      (Epoch!val!3_m Model_20)
                      (Epoch!val!1_m Model_20))
                (le_m Model_20
                      (Epoch!val!3_m Model_20)
                      (Epoch!val!2_m Model_20))
                (le_m Model_20
                      (Epoch!val!3_m Model_20)
                      (Epoch!val!3_m Model_20))
                (le_m Model_20
                      (Epoch!val!3_m Model_20)
                      (Epoch!val!0_m Model_20))
                (not (le_m Model_20
                           (Epoch!val!0_m Model_20)
                           (Epoch!val!1_m Model_20)))
                (not (le_m Model_20
                           (Epoch!val!0_m Model_20)
                           (Epoch!val!2_m Model_20)))
                (not (le_m Model_20
                           (Epoch!val!0_m Model_20)
                           (Epoch!val!3_m Model_20)))
                (le_m Model_20
                      (Epoch!val!0_m Model_20)
                      (Epoch!val!0_m Model_20))
                (transfer_m Model_20
                                (Epoch!val!1_m Model_20)
                                (Node!val!0_m Model_20))
                (not (transfer_m Model_20
                                     (Epoch!val!2_m Model_20)
                                     (Node!val!0_m Model_20)))
                (not (transfer_m Model_20
                                     (Epoch!val!3_m Model_20)
                                     (Node!val!0_m Model_20)))
                (not (transfer_m Model_20
                                     (Epoch!val!0_m Model_20)
                                     (Node!val!0_m Model_20)))
                (held_m Model_20 (Node!val!0_m Model_20))
                (= (ep_m Model_20 (Node!val!0_m Model_20))
                   (Epoch!val!1_m Model_20))
                (not (locked_m Model_20
                                   (Epoch!val!1_m Model_20)
                                   (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                   (Epoch!val!2_m Model_20)
                                   (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                   (Epoch!val!3_m Model_20)
                                   (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                   (Epoch!val!0_m Model_20)
                                   (Node!val!0_m Model_20)))))
      (a!2 (and (inv Model_20
                     (Node!val!0_m Model_20)
                     (Node!val!0_m Model_20)
                     (Epoch!val!1_m Model_20))
                (inv Model_20
                     (Node!val!0_m Model_20)
                     (Node!val!0_m Model_20)
                     (Epoch!val!2_m Model_20))
                (inv Model_20
                     (Node!val!0_m Model_20)
                     (Node!val!0_m Model_20)
                     (Epoch!val!3_m Model_20))
                (inv Model_20
                     (Node!val!0_m Model_20)
                     (Node!val!0_m Model_20)
                     (Epoch!val!0_m Model_20))))
      (a!3 (and (= (ep_m Model_20 (Node!val!0_m Model_20))
                   (Epoch!val!1_m Model_20))
                (not (locked_m Model_20
                                    (Epoch!val!1_m Model_20)
                                    (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                    (Epoch!val!2_m Model_20)
                                    (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                    (Epoch!val!3_m Model_20)
                                    (Node!val!0_m Model_20)))
                (not (locked_m Model_20
                                    (Epoch!val!0_m Model_20)
                                    (Node!val!0_m Model_20)))
                (transfer_m Model_20
                                 (Epoch!val!1_m Model_20)
                                 (Node!val!0_m Model_20))
                (not (transfer_m Model_20
                                      (Epoch!val!2_m Model_20)
                                      (Node!val!0_m Model_20)))
                (not (transfer_m Model_20
                                      (Epoch!val!3_m Model_20)
                                      (Node!val!0_m Model_20)))
                (transfer_m Model_20
                                 (Epoch!val!0_m Model_20)
                                 (Node!val!0_m Model_20))
                (not (held_m Model_20 (Node!val!0_m Model_20))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n2 Node) (e1 Epoch))
;   (or (not (locked e1 n2)) (le (ep n2) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n2, e1],
;         Or(Not(locked(e1, n2)), le(ep(n2), e1))),
;  Not(ForAll([n2, e1],
;             Or(Not(locked(e1, n2)),
;                le(ep(n2), e1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!6 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!6 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!6)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!6
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!6))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!6)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!6)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!6))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Node!val!1))))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (not (= x!0 Epoch!val!0))
;        (not (= x!0 Epoch!val!6))
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!1)))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!1))
(constraint (distinct (Node!val!1_m Model_21)  (Node!val!0_m Model_21) ))
(constraint (distinct (Epoch!val!1_m Model_21)  (Epoch!val!2_m Model_21)  (Epoch!val!3_m Model_21)  (Epoch!val!6_m Model_21)  (Epoch!val!4_m Model_21)  (Epoch!val!5_m Model_21)  (Epoch!val!0_m Model_21) ))
(constraint (let ((a!1 (and (= (one_m Model_21) (Epoch!val!4_m Model_21))
                (= (zero_m Model_21) (Epoch!val!5_m Model_21))
                (le_m Model_21
                      (Epoch!val!1_m Model_21)
                      (Epoch!val!1_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!1_m Model_21)
                           (Epoch!val!2_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!1_m Model_21)
                           (Epoch!val!3_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!1_m Model_21)
                           (Epoch!val!6_m Model_21)))
                (le_m Model_21
                      (Epoch!val!1_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!1_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!1_m Model_21)
                           (Epoch!val!0_m Model_21)))
                (le_m Model_21
                      (Epoch!val!2_m Model_21)
                      (Epoch!val!1_m Model_21))
                (le_m Model_21
                      (Epoch!val!2_m Model_21)
                      (Epoch!val!2_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!2_m Model_21)
                           (Epoch!val!3_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!2_m Model_21)
                           (Epoch!val!6_m Model_21)))
                (le_m Model_21
                      (Epoch!val!2_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!2_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (le_m Model_21
                      (Epoch!val!2_m Model_21)
                      (Epoch!val!0_m Model_21))
                (le_m Model_21
                      (Epoch!val!3_m Model_21)
                      (Epoch!val!1_m Model_21))
                (le_m Model_21
                      (Epoch!val!3_m Model_21)
                      (Epoch!val!2_m Model_21))
                (le_m Model_21
                      (Epoch!val!3_m Model_21)
                      (Epoch!val!3_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!3_m Model_21)
                           (Epoch!val!6_m Model_21)))
                (le_m Model_21
                      (Epoch!val!3_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!3_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (le_m Model_21
                      (Epoch!val!3_m Model_21)
                      (Epoch!val!0_m Model_21))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!1_m Model_21))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!2_m Model_21))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!3_m Model_21))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!6_m Model_21))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!6_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (le_m Model_21
                      (Epoch!val!6_m Model_21)
                      (Epoch!val!0_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!1_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!2_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!3_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!6_m Model_21)))
                (le_m Model_21
                      (Epoch!val!4_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!4_m Model_21)
                           (Epoch!val!0_m Model_21)))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!1_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!2_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!3_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!6_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!4_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!5_m Model_21))
                (le_m Model_21
                      (Epoch!val!5_m Model_21)
                      (Epoch!val!0_m Model_21))
                (le_m Model_21
                      (Epoch!val!0_m Model_21)
                      (Epoch!val!1_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!0_m Model_21)
                           (Epoch!val!2_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!0_m Model_21)
                           (Epoch!val!3_m Model_21)))
                (not (le_m Model_21
                           (Epoch!val!0_m Model_21)
                           (Epoch!val!6_m Model_21)))
                (le_m Model_21
                      (Epoch!val!0_m Model_21)
                      (Epoch!val!4_m Model_21))
                (not (le_m Model_21
                           (Epoch!val!0_m Model_21)
                           (Epoch!val!5_m Model_21)))
                (le_m Model_21
                      (Epoch!val!0_m Model_21)
                      (Epoch!val!0_m Model_21))
                (not (transfer_m Model_21
                                     (Epoch!val!1_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!1_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!2_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!2_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!3_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!3_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!6_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!6_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!4_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!4_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!5_m Model_21)
                                     (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                     (Epoch!val!5_m Model_21)
                                     (Node!val!0_m Model_21)))
                (transfer_m Model_21
                                (Epoch!val!0_m Model_21)
                                (Node!val!1_m Model_21))
                (not (transfer_m Model_21
                                     (Epoch!val!0_m Model_21)
                                     (Node!val!0_m Model_21)))
                (not (held_m Model_21 (Node!val!1_m Model_21)))
                (not (held_m Model_21 (Node!val!0_m Model_21)))
                (= (ep_m Model_21 (Node!val!1_m Model_21))
                   (Epoch!val!6_m Model_21))
                (= (ep_m Model_21 (Node!val!0_m Model_21))
                   (Epoch!val!2_m Model_21))
                (not (locked_m Model_21
                                   (Epoch!val!1_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!1_m Model_21)
                                   (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!2_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!2_m Model_21)
                                   (Node!val!0_m Model_21)))
                (locked_m Model_21
                              (Epoch!val!3_m Model_21)
                              (Node!val!1_m Model_21))
                (not (locked_m Model_21
                                   (Epoch!val!3_m Model_21)
                                   (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!6_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!6_m Model_21)
                                   (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!4_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!4_m Model_21)
                                   (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!5_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!5_m Model_21)
                                   (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!0_m Model_21)
                                   (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                   (Epoch!val!0_m Model_21)
                                   (Node!val!0_m Model_21)))))
      (a!2 (and (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!1_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!2_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!3_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!6_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!4_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!5_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!0_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!1_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!2_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!3_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!6_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!4_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!5_m Model_21))
                (inv Model_21
                     (Node!val!1_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!0_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!1_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!2_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!3_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!6_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!4_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!5_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!1_m Model_21)
                     (Epoch!val!0_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!1_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!2_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!3_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!6_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!4_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!5_m Model_21))
                (inv Model_21
                     (Node!val!0_m Model_21)
                     (Node!val!0_m Model_21)
                     (Epoch!val!0_m Model_21))))
      (a!3 (and (= (ep_m Model_21 (Node!val!1_m Model_21))
                   (Epoch!val!0_m Model_21))
                (= (ep_m Model_21 (Node!val!0_m Model_21))
                   (Epoch!val!2_m Model_21))
                (not (locked_m Model_21
                                    (Epoch!val!1_m Model_21)
                                    (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!1_m Model_21)
                                    (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!2_m Model_21)
                                    (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!2_m Model_21)
                                    (Node!val!0_m Model_21)))
                (locked_m Model_21
                               (Epoch!val!3_m Model_21)
                               (Node!val!1_m Model_21))
                (not (locked_m Model_21
                                    (Epoch!val!3_m Model_21)
                                    (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!6_m Model_21)
                                    (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!6_m Model_21)
                                    (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!4_m Model_21)
                                    (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!4_m Model_21)
                                    (Node!val!0_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!5_m Model_21)
                                    (Node!val!1_m Model_21)))
                (not (locked_m Model_21
                                    (Epoch!val!5_m Model_21)
                                    (Node!val!0_m Model_21)))
                (locked_m Model_21
                               (Epoch!val!0_m Model_21)
                               (Node!val!1_m Model_21))
                (not (locked_m Model_21
                                    (Epoch!val!0_m Model_21)
                                    (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!1_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!1_m Model_21)
                                      (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!2_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!2_m Model_21)
                                      (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!3_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!3_m Model_21)
                                      (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!6_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!6_m Model_21)
                                      (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!4_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!4_m Model_21)
                                      (Node!val!0_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!5_m Model_21)
                                      (Node!val!1_m Model_21)))
                (not (transfer_m Model_21
                                      (Epoch!val!5_m Model_21)
                                      (Node!val!0_m Model_21)))
                (transfer_m Model_21
                                 (Epoch!val!0_m Model_21)
                                 (Node!val!1_m Model_21))
                (not (transfer_m Model_21
                                      (Epoch!val!0_m Model_21)
                                      (Node!val!0_m Model_21)))
                (held_m Model_21 (Node!val!1_m Model_21))
                (not (held_m Model_21 (Node!val!0_m Model_21))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (n2 Node)) (not (transfer (ep n1) n2)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n1, n2], Not(transfer(ep(n1), n2))),
;  Not(ForAll([n1, n2], Not(transfer(ep(n1), n2))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 Node!val!2 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; (declare-fun Node!val!2 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0) (= x Node!val!2)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!2)
; (define-fun zero () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   (let ((a!1 (ite (and (not (= x!0 Node!val!1)) (not (= x!0 Node!val!0)))
;                   Epoch!val!4
;                   Epoch!val!1)))
;     (ite (and (= x!0 Node!val!1) (not (= x!0 Node!val!0))) Epoch!val!5 a!1)))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Node!val!1))
;            (not (= x!1 Node!val!0)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Node!val!1)
;            (not (= x!1 Node!val!0)))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!2)
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3) (not (= x!0 Epoch!val!2)) (= x!1 Epoch!val!2))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!2)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!2)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (let ((a!1 (ite (and (= x!0 Node!val!1) (not (= x!0 Node!val!0)))
;                   Epoch!val!0
;                   Epoch!val!5)))
;     (ite (and (not (= x!0 Node!val!1)) (not (= x!0 Node!val!0)))
;          Epoch!val!4
;          (ite (= x!0 Node!val!0) Epoch!val!1 a!1))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!2))
;        (= x!1 Node!val!1)
;        (not (= x!1 Node!val!0))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (= x!1 Node!val!1)
;            (not (= x!1 Node!val!0)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!1 Node!val!1))
;            (not (= x!1 Node!val!0)))))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   (and (= x!0 Node!val!1) (not (= x!0 Node!val!0))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_22)  (Node!val!0_m Model_22)  (Node!val!2_m Model_22) ))
(constraint (distinct (Epoch!val!1_m Model_22)  (Epoch!val!2_m Model_22)  (Epoch!val!3_m Model_22)  (Epoch!val!4_m Model_22)  (Epoch!val!5_m Model_22)  (Epoch!val!0_m Model_22) ))
(constraint (let ((a!1 (and (= (one_m Model_22) (Epoch!val!2_m Model_22))
                (= (zero_m Model_22) (Epoch!val!3_m Model_22))
                (le_m Model_22
                      (Epoch!val!1_m Model_22)
                      (Epoch!val!1_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!1_m Model_22)
                           (Epoch!val!2_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!1_m Model_22)
                           (Epoch!val!3_m Model_22)))
                (le_m Model_22
                      (Epoch!val!1_m Model_22)
                      (Epoch!val!4_m Model_22))
                (le_m Model_22
                      (Epoch!val!1_m Model_22)
                      (Epoch!val!5_m Model_22))
                (le_m Model_22
                      (Epoch!val!1_m Model_22)
                      (Epoch!val!0_m Model_22))
                (le_m Model_22
                      (Epoch!val!2_m Model_22)
                      (Epoch!val!1_m Model_22))
                (le_m Model_22
                      (Epoch!val!2_m Model_22)
                      (Epoch!val!2_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!2_m Model_22)
                           (Epoch!val!3_m Model_22)))
                (le_m Model_22
                      (Epoch!val!2_m Model_22)
                      (Epoch!val!4_m Model_22))
                (le_m Model_22
                      (Epoch!val!2_m Model_22)
                      (Epoch!val!5_m Model_22))
                (le_m Model_22
                      (Epoch!val!2_m Model_22)
                      (Epoch!val!0_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!1_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!2_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!3_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!4_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!5_m Model_22))
                (le_m Model_22
                      (Epoch!val!3_m Model_22)
                      (Epoch!val!0_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!4_m Model_22)
                           (Epoch!val!1_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!4_m Model_22)
                           (Epoch!val!2_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!4_m Model_22)
                           (Epoch!val!3_m Model_22)))
                (le_m Model_22
                      (Epoch!val!4_m Model_22)
                      (Epoch!val!4_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!4_m Model_22)
                           (Epoch!val!5_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!4_m Model_22)
                           (Epoch!val!0_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!5_m Model_22)
                           (Epoch!val!1_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!5_m Model_22)
                           (Epoch!val!2_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!5_m Model_22)
                           (Epoch!val!3_m Model_22)))
                (le_m Model_22
                      (Epoch!val!5_m Model_22)
                      (Epoch!val!4_m Model_22))
                (le_m Model_22
                      (Epoch!val!5_m Model_22)
                      (Epoch!val!5_m Model_22))
                (le_m Model_22
                      (Epoch!val!5_m Model_22)
                      (Epoch!val!0_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!0_m Model_22)
                           (Epoch!val!1_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!0_m Model_22)
                           (Epoch!val!2_m Model_22)))
                (not (le_m Model_22
                           (Epoch!val!0_m Model_22)
                           (Epoch!val!3_m Model_22)))
                (le_m Model_22
                      (Epoch!val!0_m Model_22)
                      (Epoch!val!4_m Model_22))
                (not (le_m Model_22
                           (Epoch!val!0_m Model_22)
                           (Epoch!val!5_m Model_22)))
                (le_m Model_22
                      (Epoch!val!0_m Model_22)
                      (Epoch!val!0_m Model_22))
                (not (transfer_m Model_22
                                     (Epoch!val!1_m Model_22)
                                     (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!1_m Model_22)
                                     (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!1_m Model_22)
                                     (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!2_m Model_22)
                                     (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!2_m Model_22)
                                     (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!2_m Model_22)
                                     (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!3_m Model_22)
                                     (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!3_m Model_22)
                                     (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!3_m Model_22)
                                     (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!4_m Model_22)
                                     (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!4_m Model_22)
                                     (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!4_m Model_22)
                                     (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!5_m Model_22)
                                     (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!5_m Model_22)
                                     (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                     (Epoch!val!5_m Model_22)
                                     (Node!val!2_m Model_22)))
                (transfer_m Model_22
                                (Epoch!val!0_m Model_22)
                                (Node!val!1_m Model_22))
                (not (transfer_m Model_22
                                     (Epoch!val!0_m Model_22)
                                     (Node!val!0_m Model_22)))
                (transfer_m Model_22
                                (Epoch!val!0_m Model_22)
                                (Node!val!2_m Model_22))
                (not (held_m Model_22 (Node!val!1_m Model_22)))
                (not (held_m Model_22 (Node!val!0_m Model_22)))
                (not (held_m Model_22 (Node!val!2_m Model_22)))
                (= (ep_m Model_22 (Node!val!1_m Model_22))
                   (Epoch!val!5_m Model_22))
                (= (ep_m Model_22 (Node!val!0_m Model_22))
                   (Epoch!val!1_m Model_22))
                (= (ep_m Model_22 (Node!val!2_m Model_22))
                   (Epoch!val!4_m Model_22))
                (not (locked_m Model_22
                                   (Epoch!val!1_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!1_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!1_m Model_22)
                                   (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!2_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!2_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!2_m Model_22)
                                   (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!3_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!3_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!3_m Model_22)
                                   (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!4_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!4_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!4_m Model_22)
                                   (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!5_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!5_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!5_m Model_22)
                                   (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!0_m Model_22)
                                   (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!0_m Model_22)
                                   (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                   (Epoch!val!0_m Model_22)
                                   (Node!val!2_m Model_22)))))
      (a!2 (and (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!1_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!0_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!1_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!0_m Model_22)
                     (Epoch!val!0_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!1_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!2_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!3_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!4_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!5_m Model_22))
                (inv Model_22
                     (Node!val!2_m Model_22)
                     (Node!val!2_m Model_22)
                     (Epoch!val!0_m Model_22))))
      (a!3 (and (= (ep_m Model_22 (Node!val!1_m Model_22))
                   (Epoch!val!0_m Model_22))
                (= (ep_m Model_22 (Node!val!0_m Model_22))
                   (Epoch!val!1_m Model_22))
                (= (ep_m Model_22 (Node!val!2_m Model_22))
                   (Epoch!val!4_m Model_22))
                (not (locked_m Model_22
                                    (Epoch!val!1_m Model_22)
                                    (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!1_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!1_m Model_22)
                                    (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!2_m Model_22)
                                    (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!2_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!2_m Model_22)
                                    (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!3_m Model_22)
                                    (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!3_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!3_m Model_22)
                                    (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!4_m Model_22)
                                    (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!4_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!4_m Model_22)
                                    (Node!val!2_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!5_m Model_22)
                                    (Node!val!1_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!5_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!5_m Model_22)
                                    (Node!val!2_m Model_22)))
                (locked_m Model_22
                               (Epoch!val!0_m Model_22)
                               (Node!val!1_m Model_22))
                (not (locked_m Model_22
                                    (Epoch!val!0_m Model_22)
                                    (Node!val!0_m Model_22)))
                (not (locked_m Model_22
                                    (Epoch!val!0_m Model_22)
                                    (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!1_m Model_22)
                                      (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!1_m Model_22)
                                      (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!1_m Model_22)
                                      (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!2_m Model_22)
                                      (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!2_m Model_22)
                                      (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!2_m Model_22)
                                      (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!3_m Model_22)
                                      (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!3_m Model_22)
                                      (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!3_m Model_22)
                                      (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!4_m Model_22)
                                      (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!4_m Model_22)
                                      (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!4_m Model_22)
                                      (Node!val!2_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!5_m Model_22)
                                      (Node!val!1_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!5_m Model_22)
                                      (Node!val!0_m Model_22)))
                (not (transfer_m Model_22
                                      (Epoch!val!5_m Model_22)
                                      (Node!val!2_m Model_22)))
                (transfer_m Model_22
                                 (Epoch!val!0_m Model_22)
                                 (Node!val!1_m Model_22))
                (not (transfer_m Model_22
                                      (Epoch!val!0_m Model_22)
                                      (Node!val!0_m Model_22)))
                (transfer_m Model_22
                                 (Epoch!val!0_m Model_22)
                                 (Node!val!2_m Model_22))
                (held_m Model_22 (Node!val!1_m Model_22))
                (not (held_m Model_22 (Node!val!0_m Model_22)))
                (not (held_m Model_22 (Node!val!2_m Model_22))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.NegativeCEX'>)
; (let ((a!1 (forall ((e1 Epoch) (e2 Epoch) (e3 Epoch))
;              (and (le e1 e1)
;                   (=> (and (le e1 e2) (le e2 e3)) (le e1 e3))
;                   (=> (and (le e1 e2) (le e2 e1)) (= e1 e2))
;                   (or (le e1 e2) (le e2 e1))
;                   (le zero e1)
;                   (distinct one zero))))
;       (a!2 (forall ((n1 Node) (e1 Epoch))
;              (or (transfer e1 n1) (le (ep n1) (ep n1)))))
;       (a!3 (forall ((n2 Node) (e1 Epoch))
;              (or (not (locked e1 n2)) (le e1 (ep n2))))))
;   (and a!1 a!2 a!3))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  And(ForAll([e1, e2, e3],
;             And(le(e1, e1),
;                 Implies(And(le(e1, e2), le(e2, e3)),
;                         le(e1, e3)),
;                 Implies(And(le(e1, e2), le(e2, e1)),
;                         e1 == e2),
;                 Or(le(e1, e2), le(e2, e1)),
;                 le(zero, e1),
;                 one != zero)),
;      ForAll([n1, e1],
;             Or(transfer(e1, n1),
;                le(ep(n1), ep(n1)))),
;      ForAll([n2, e1],
;             Or(Not(locked(e1, n2)), le(e1, ep(n2))))),
;  Not(ForAll([e1, n1, n2],
;             Implies(And(locked(e1, n1),
;                         locked(e1, n2)),
;                     n1 == n2)))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!1) Epoch!val!2
;     Epoch!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Node!val!1)))
;       (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Node!val!1))))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!2) (not (= x!1 Epoch!val!3)))))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_23)  (Node!val!0_m Model_23) ))
(constraint (distinct (Epoch!val!1_m Model_23)  (Epoch!val!2_m Model_23)  (Epoch!val!3_m Model_23)  (Epoch!val!4_m Model_23)  (Epoch!val!0_m Model_23) ))
(constraint (let ((a!1 (not (and (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!1_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!2_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!3_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!4_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!0_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!1_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!2_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!3_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!4_m Model_23))
                     (inv Model_23
                          (Node!val!1_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!0_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!1_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!2_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!3_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!4_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!1_m Model_23)
                          (Epoch!val!0_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!1_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!2_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!3_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!4_m Model_23))
                     (inv Model_23
                          (Node!val!0_m Model_23)
                          (Node!val!0_m Model_23)
                          (Epoch!val!0_m Model_23))))))
  (and (= (zero_m Model_23) (Epoch!val!4_m Model_23))
       (= (one_m Model_23) (Epoch!val!3_m Model_23))
       (= (le_m Model_23 (Epoch!val!1_m Model_23) (Epoch!val!1_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!1_m Model_23) (Epoch!val!2_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!1_m Model_23) (Epoch!val!3_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!1_m Model_23) (Epoch!val!4_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!1_m Model_23) (Epoch!val!0_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!2_m Model_23) (Epoch!val!1_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!2_m Model_23) (Epoch!val!2_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!2_m Model_23) (Epoch!val!3_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!2_m Model_23) (Epoch!val!4_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!2_m Model_23) (Epoch!val!0_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!3_m Model_23) (Epoch!val!1_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!3_m Model_23) (Epoch!val!2_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!3_m Model_23) (Epoch!val!3_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!3_m Model_23) (Epoch!val!4_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!3_m Model_23) (Epoch!val!0_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!4_m Model_23) (Epoch!val!1_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!4_m Model_23) (Epoch!val!2_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!4_m Model_23) (Epoch!val!3_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!4_m Model_23) (Epoch!val!4_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!4_m Model_23) (Epoch!val!0_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!0_m Model_23) (Epoch!val!1_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!0_m Model_23) (Epoch!val!2_m Model_23))
          true)
       (= (le_m Model_23 (Epoch!val!0_m Model_23) (Epoch!val!3_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!0_m Model_23) (Epoch!val!4_m Model_23))
          false)
       (= (le_m Model_23 (Epoch!val!0_m Model_23) (Epoch!val!0_m Model_23))
          true)
       (= (ep_m Model_23 (Node!val!1_m Model_23)) (Epoch!val!2_m Model_23))
       (= (ep_m Model_23 (Node!val!0_m Model_23)) (Epoch!val!1_m Model_23))
       (= (transfer_m Model_23
                          (Epoch!val!1_m Model_23)
                          (Node!val!1_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!1_m Model_23)
                          (Node!val!0_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!2_m Model_23)
                          (Node!val!1_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!2_m Model_23)
                          (Node!val!0_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!3_m Model_23)
                          (Node!val!1_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!3_m Model_23)
                          (Node!val!0_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!4_m Model_23)
                          (Node!val!1_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!4_m Model_23)
                          (Node!val!0_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!0_m Model_23)
                          (Node!val!1_m Model_23))
          false)
       (= (transfer_m Model_23
                          (Epoch!val!0_m Model_23)
                          (Node!val!0_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!1_m Model_23)
                        (Node!val!1_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!1_m Model_23)
                        (Node!val!0_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!2_m Model_23)
                        (Node!val!1_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!2_m Model_23)
                        (Node!val!0_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!3_m Model_23)
                        (Node!val!1_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!3_m Model_23)
                        (Node!val!0_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!4_m Model_23)
                        (Node!val!1_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!4_m Model_23)
                        (Node!val!0_m Model_23))
          false)
       (= (locked_m Model_23
                        (Epoch!val!0_m Model_23)
                        (Node!val!1_m Model_23))
          true)
       (= (locked_m Model_23
                        (Epoch!val!0_m Model_23)
                        (Node!val!0_m Model_23))
          true)
       a!1)))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n2 Node) (e1 Epoch)) (not (locked e1 n2)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n2, e1],
;         Or(Not(locked(e1, n2)), le(e1, ep(n2)))),
;  ForAll([n2, e1], Not(locked(e1, n2))),
;  Not(ForAll([n2, e1], Not(locked(e1, n2))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!4)
; (define-fun one () Epoch
;   Epoch!val!3)
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!2
;     Epoch!val!1))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!4) (not (= x!0 Epoch!val!3)) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!3) (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!3))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!4)
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!0 Epoch!val!3))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!4))
;            (not (= x!1 Epoch!val!3)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!0
;     Epoch!val!1))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!4))
;        (not (= x!0 Epoch!val!3))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!0))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!1_m Model_24)  (Node!val!0_m Model_24) ))
(constraint (distinct (Epoch!val!1_m Model_24)  (Epoch!val!2_m Model_24)  (Epoch!val!3_m Model_24)  (Epoch!val!4_m Model_24)  (Epoch!val!0_m Model_24) ))
(constraint (let ((a!1 (and (= (zero_m Model_24) (Epoch!val!4_m Model_24))
                (= (one_m Model_24) (Epoch!val!3_m Model_24))
                (le_m Model_24
                      (Epoch!val!1_m Model_24)
                      (Epoch!val!1_m Model_24))
                (le_m Model_24
                      (Epoch!val!1_m Model_24)
                      (Epoch!val!2_m Model_24))
                (le_m Model_24
                      (Epoch!val!1_m Model_24)
                      (Epoch!val!3_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!1_m Model_24)
                           (Epoch!val!4_m Model_24)))
                (le_m Model_24
                      (Epoch!val!1_m Model_24)
                      (Epoch!val!0_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!2_m Model_24)
                           (Epoch!val!1_m Model_24)))
                (le_m Model_24
                      (Epoch!val!2_m Model_24)
                      (Epoch!val!2_m Model_24))
                (le_m Model_24
                      (Epoch!val!2_m Model_24)
                      (Epoch!val!3_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!2_m Model_24)
                           (Epoch!val!4_m Model_24)))
                (le_m Model_24
                      (Epoch!val!2_m Model_24)
                      (Epoch!val!0_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!3_m Model_24)
                           (Epoch!val!1_m Model_24)))
                (not (le_m Model_24
                           (Epoch!val!3_m Model_24)
                           (Epoch!val!2_m Model_24)))
                (le_m Model_24
                      (Epoch!val!3_m Model_24)
                      (Epoch!val!3_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!3_m Model_24)
                           (Epoch!val!4_m Model_24)))
                (not (le_m Model_24
                           (Epoch!val!3_m Model_24)
                           (Epoch!val!0_m Model_24)))
                (le_m Model_24
                      (Epoch!val!4_m Model_24)
                      (Epoch!val!1_m Model_24))
                (le_m Model_24
                      (Epoch!val!4_m Model_24)
                      (Epoch!val!2_m Model_24))
                (le_m Model_24
                      (Epoch!val!4_m Model_24)
                      (Epoch!val!3_m Model_24))
                (le_m Model_24
                      (Epoch!val!4_m Model_24)
                      (Epoch!val!4_m Model_24))
                (le_m Model_24
                      (Epoch!val!4_m Model_24)
                      (Epoch!val!0_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!0_m Model_24)
                           (Epoch!val!1_m Model_24)))
                (not (le_m Model_24
                           (Epoch!val!0_m Model_24)
                           (Epoch!val!2_m Model_24)))
                (le_m Model_24
                      (Epoch!val!0_m Model_24)
                      (Epoch!val!3_m Model_24))
                (not (le_m Model_24
                           (Epoch!val!0_m Model_24)
                           (Epoch!val!4_m Model_24)))
                (le_m Model_24
                      (Epoch!val!0_m Model_24)
                      (Epoch!val!0_m Model_24))
                (not (transfer_m Model_24
                                     (Epoch!val!1_m Model_24)
                                     (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!1_m Model_24)
                                     (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!2_m Model_24)
                                     (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!2_m Model_24)
                                     (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!3_m Model_24)
                                     (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!3_m Model_24)
                                     (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!4_m Model_24)
                                     (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!4_m Model_24)
                                     (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                     (Epoch!val!0_m Model_24)
                                     (Node!val!1_m Model_24)))
                (transfer_m Model_24
                                (Epoch!val!0_m Model_24)
                                (Node!val!0_m Model_24))
                (not (held_m Model_24 (Node!val!1_m Model_24)))
                (not (held_m Model_24 (Node!val!0_m Model_24)))
                (= (ep_m Model_24 (Node!val!1_m Model_24))
                   (Epoch!val!1_m Model_24))
                (= (ep_m Model_24 (Node!val!0_m Model_24))
                   (Epoch!val!2_m Model_24))
                (not (locked_m Model_24
                                   (Epoch!val!1_m Model_24)
                                   (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!1_m Model_24)
                                   (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!2_m Model_24)
                                   (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!2_m Model_24)
                                   (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!3_m Model_24)
                                   (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!3_m Model_24)
                                   (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!4_m Model_24)
                                   (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!4_m Model_24)
                                   (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!0_m Model_24)
                                   (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                   (Epoch!val!0_m Model_24)
                                   (Node!val!0_m Model_24)))))
      (a!2 (and (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!1_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!2_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!3_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!4_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!0_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!1_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!2_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!3_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!4_m Model_24))
                (inv Model_24
                     (Node!val!1_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!0_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!1_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!2_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!3_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!4_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!1_m Model_24)
                     (Epoch!val!0_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!1_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!2_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!3_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!4_m Model_24))
                (inv Model_24
                     (Node!val!0_m Model_24)
                     (Node!val!0_m Model_24)
                     (Epoch!val!0_m Model_24))))
      (a!3 (and (= (ep_m Model_24 (Node!val!1_m Model_24))
                   (Epoch!val!1_m Model_24))
                (= (ep_m Model_24 (Node!val!0_m Model_24))
                   (Epoch!val!0_m Model_24))
                (not (locked_m Model_24
                                    (Epoch!val!1_m Model_24)
                                    (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!1_m Model_24)
                                    (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!2_m Model_24)
                                    (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!2_m Model_24)
                                    (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!3_m Model_24)
                                    (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!3_m Model_24)
                                    (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!4_m Model_24)
                                    (Node!val!1_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!4_m Model_24)
                                    (Node!val!0_m Model_24)))
                (not (locked_m Model_24
                                    (Epoch!val!0_m Model_24)
                                    (Node!val!1_m Model_24)))
                (locked_m Model_24
                               (Epoch!val!0_m Model_24)
                               (Node!val!0_m Model_24))
                (not (transfer_m Model_24
                                      (Epoch!val!1_m Model_24)
                                      (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!1_m Model_24)
                                      (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!2_m Model_24)
                                      (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!2_m Model_24)
                                      (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!3_m Model_24)
                                      (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!3_m Model_24)
                                      (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!4_m Model_24)
                                      (Node!val!1_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!4_m Model_24)
                                      (Node!val!0_m Model_24)))
                (not (transfer_m Model_24
                                      (Epoch!val!0_m Model_24)
                                      (Node!val!1_m Model_24)))
                (transfer_m Model_24
                                 (Epoch!val!0_m Model_24)
                                 (Node!val!0_m Model_24))
                (not (held_m Model_24 (Node!val!1_m Model_24)))
                (held_m Model_24 (Node!val!0_m Model_24)))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n1 Node) (e1 Epoch)) (not (locked e1 n1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n2, e1],
;         Or(Not(locked(e1, n2)), le(e1, ep(n2)))),
;  ForAll([n1, e1], Not(locked(e1, n1))),
;  Not(ForAll([n1, e1], Not(locked(e1, n1))))]
; ;; universe for Node:
; ;;   Node!val!1 Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!1 () Node)
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (or (= x Node!val!1) (= x Node!val!0)))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!2) (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!2)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!2))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!2))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!2)
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!3
;     Epoch!val!2))
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun ep ((x!0 Node)) Epoch
;   (ite (= x!0 Node!val!0) Epoch!val!0
;     Epoch!val!2))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (= x!0 Epoch!val!0)
;        (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!2))
;        (not (= x!0 Epoch!val!4))
;        (= x!1 Node!val!0)))
; (define-fun held ((x!0 Node)) Bool
;   (= x!0 Node!val!0))
(constraint (distinct (Node!val!1_m Model_25)  (Node!val!0_m Model_25) ))
(constraint (distinct (Epoch!val!1_m Model_25)  (Epoch!val!2_m Model_25)  (Epoch!val!3_m Model_25)  (Epoch!val!4_m Model_25)  (Epoch!val!5_m Model_25)  (Epoch!val!0_m Model_25) ))
(constraint (let ((a!1 (and (= (one_m Model_25) (Epoch!val!4_m Model_25))
                (= (zero_m Model_25) (Epoch!val!5_m Model_25))
                (not (locked_m Model_25
                                   (Epoch!val!1_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!1_m Model_25)
                                   (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!2_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!2_m Model_25)
                                   (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!3_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!3_m Model_25)
                                   (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!4_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!4_m Model_25)
                                   (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!5_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!5_m Model_25)
                                   (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!0_m Model_25)
                                   (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                   (Epoch!val!0_m Model_25)
                                   (Node!val!0_m Model_25)))
                (le_m Model_25
                      (Epoch!val!1_m Model_25)
                      (Epoch!val!1_m Model_25))
                (not (le_m Model_25
                           (Epoch!val!1_m Model_25)
                           (Epoch!val!2_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!1_m Model_25)
                           (Epoch!val!3_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!1_m Model_25)
                           (Epoch!val!4_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!1_m Model_25)
                           (Epoch!val!5_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!1_m Model_25)
                           (Epoch!val!0_m Model_25)))
                (le_m Model_25
                      (Epoch!val!2_m Model_25)
                      (Epoch!val!1_m Model_25))
                (le_m Model_25
                      (Epoch!val!2_m Model_25)
                      (Epoch!val!2_m Model_25))
                (not (le_m Model_25
                           (Epoch!val!2_m Model_25)
                           (Epoch!val!3_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!2_m Model_25)
                           (Epoch!val!4_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!2_m Model_25)
                           (Epoch!val!5_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!2_m Model_25)
                           (Epoch!val!0_m Model_25)))
                (le_m Model_25
                      (Epoch!val!3_m Model_25)
                      (Epoch!val!1_m Model_25))
                (le_m Model_25
                      (Epoch!val!3_m Model_25)
                      (Epoch!val!2_m Model_25))
                (le_m Model_25
                      (Epoch!val!3_m Model_25)
                      (Epoch!val!3_m Model_25))
                (not (le_m Model_25
                           (Epoch!val!3_m Model_25)
                           (Epoch!val!4_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!3_m Model_25)
                           (Epoch!val!5_m Model_25)))
                (le_m Model_25
                      (Epoch!val!3_m Model_25)
                      (Epoch!val!0_m Model_25))
                (le_m Model_25
                      (Epoch!val!4_m Model_25)
                      (Epoch!val!1_m Model_25))
                (le_m Model_25
                      (Epoch!val!4_m Model_25)
                      (Epoch!val!2_m Model_25))
                (le_m Model_25
                      (Epoch!val!4_m Model_25)
                      (Epoch!val!3_m Model_25))
                (le_m Model_25
                      (Epoch!val!4_m Model_25)
                      (Epoch!val!4_m Model_25))
                (not (le_m Model_25
                           (Epoch!val!4_m Model_25)
                           (Epoch!val!5_m Model_25)))
                (le_m Model_25
                      (Epoch!val!4_m Model_25)
                      (Epoch!val!0_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!1_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!2_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!3_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!4_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!5_m Model_25))
                (le_m Model_25
                      (Epoch!val!5_m Model_25)
                      (Epoch!val!0_m Model_25))
                (le_m Model_25
                      (Epoch!val!0_m Model_25)
                      (Epoch!val!1_m Model_25))
                (le_m Model_25
                      (Epoch!val!0_m Model_25)
                      (Epoch!val!2_m Model_25))
                (not (le_m Model_25
                           (Epoch!val!0_m Model_25)
                           (Epoch!val!3_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!0_m Model_25)
                           (Epoch!val!4_m Model_25)))
                (not (le_m Model_25
                           (Epoch!val!0_m Model_25)
                           (Epoch!val!5_m Model_25)))
                (le_m Model_25
                      (Epoch!val!0_m Model_25)
                      (Epoch!val!0_m Model_25))
                (not (transfer_m Model_25
                                     (Epoch!val!1_m Model_25)
                                     (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!1_m Model_25)
                                     (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!2_m Model_25)
                                     (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!2_m Model_25)
                                     (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!3_m Model_25)
                                     (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!3_m Model_25)
                                     (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!4_m Model_25)
                                     (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!4_m Model_25)
                                     (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!5_m Model_25)
                                     (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!5_m Model_25)
                                     (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                     (Epoch!val!0_m Model_25)
                                     (Node!val!1_m Model_25)))
                (transfer_m Model_25
                                (Epoch!val!0_m Model_25)
                                (Node!val!0_m Model_25))
                (not (held_m Model_25 (Node!val!1_m Model_25)))
                (not (held_m Model_25 (Node!val!0_m Model_25)))
                (= (ep_m Model_25 (Node!val!1_m Model_25))
                   (Epoch!val!2_m Model_25))
                (= (ep_m Model_25 (Node!val!0_m Model_25))
                   (Epoch!val!3_m Model_25))))
      (a!2 (and (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!1_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!2_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!3_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!4_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!5_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!0_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!1_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!2_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!3_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!4_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!5_m Model_25))
                (inv Model_25
                     (Node!val!1_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!0_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!1_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!2_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!3_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!4_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!5_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!1_m Model_25)
                     (Epoch!val!0_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!1_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!2_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!3_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!4_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!5_m Model_25))
                (inv Model_25
                     (Node!val!0_m Model_25)
                     (Node!val!0_m Model_25)
                     (Epoch!val!0_m Model_25))))
      (a!3 (and (= (ep_m Model_25 (Node!val!1_m Model_25))
                   (Epoch!val!2_m Model_25))
                (= (ep_m Model_25 (Node!val!0_m Model_25))
                   (Epoch!val!0_m Model_25))
                (not (locked_m Model_25
                                    (Epoch!val!1_m Model_25)
                                    (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!1_m Model_25)
                                    (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!2_m Model_25)
                                    (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!2_m Model_25)
                                    (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!3_m Model_25)
                                    (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!3_m Model_25)
                                    (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!4_m Model_25)
                                    (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!4_m Model_25)
                                    (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!5_m Model_25)
                                    (Node!val!1_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!5_m Model_25)
                                    (Node!val!0_m Model_25)))
                (not (locked_m Model_25
                                    (Epoch!val!0_m Model_25)
                                    (Node!val!1_m Model_25)))
                (locked_m Model_25
                               (Epoch!val!0_m Model_25)
                               (Node!val!0_m Model_25))
                (not (transfer_m Model_25
                                      (Epoch!val!1_m Model_25)
                                      (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!1_m Model_25)
                                      (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!2_m Model_25)
                                      (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!2_m Model_25)
                                      (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!3_m Model_25)
                                      (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!3_m Model_25)
                                      (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!4_m Model_25)
                                      (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!4_m Model_25)
                                      (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!5_m Model_25)
                                      (Node!val!1_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!5_m Model_25)
                                      (Node!val!0_m Model_25)))
                (not (transfer_m Model_25
                                      (Epoch!val!0_m Model_25)
                                      (Node!val!1_m Model_25)))
                (transfer_m Model_25
                                 (Epoch!val!0_m Model_25)
                                 (Node!val!0_m Model_25))
                (not (held_m Model_25 (Node!val!1_m Model_25)))
                (held_m Model_25 (Node!val!0_m Model_25)))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))


; candidate invariant was : (cex type: <class '__main__.InductivenessCEX'>)
; (forall ((n2 Node) (e1 Epoch)) (or (held n2) (le (ep n2) e1)))
; [ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, n2, e],
;         Implies(And(held(n1), Not(le(e, ep(n1)))),
;                 And(ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            If(And(EE == e, NN == n2),
;                               True,
;                               transfer(EE, NN))),
;                     ForAll(NN,
;                            held(NN) ==
;                            If(NN == n1, False, held(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            locked(EE, NN)),
;                     ForAll(NN, ep(NN) == ep(NN))))),
;  ForAll([n, e],
;         Implies(And(transfer(e, n),
;                     Not(le(e, ep(n)))),
;                 And(ForAll(NN,
;                            held(NN) ==
;                            If(n == NN, True, held(NN))),
;                     ForAll(NN,
;                            ep(NN) ==
;                            If(n == NN, e, ep(NN))),
;                     ForAll([EE, NN],
;                            locked(EE, NN) ==
;                            If(And(EE == e, NN == n),
;                               True,
;                               locked(EE, NN))),
;                     ForAll([EE, NN],
;                            transfer(EE, NN) ==
;                            transfer(EE, NN))))),
;  Or(Exists([n1, n2, e],
;            And(held(n1), Not(le(e, ep(n1))))),
;     Exists([n, e],
;            And(transfer(e, n), Not(le(e, ep(n)))))),
;  ForAll([e1, e2, e3],
;         And(le(e1, e1),
;             Implies(And(le(e1, e2), le(e2, e3)), le(e1, e3)),
;             Implies(And(le(e1, e2), le(e2, e1)), e1 == e2),
;             Or(le(e1, e2), le(e2, e1)),
;             le(zero, e1),
;             one != zero)),
;  ForAll([n1, e1],
;         Or(transfer(e1, n1), le(ep(n1), ep(n1)))),
;  ForAll([n2, e1],
;         Or(Not(locked(e1, n2)), le(e1, ep(n2)))),
;  ForAll([n2, e1], Or(held(n2), le(ep(n2), e1))),
;  Not(ForAll([n2, e1],
;             Or(held(n2), le(ep(n2), e1))))]
; ;; universe for Node:
; ;;   Node!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Node!val!0 () Node)
; ;; cardinality constraint:
; (forall ((x Node)) (= x Node!val!0))
; ;; -----------
; ;; universe for Epoch:
; ;;   Epoch!val!1 Epoch!val!2 Epoch!val!3 Epoch!val!4 Epoch!val!5 Epoch!val!0 
; ;; -----------
; ;; definitions for universe elements:
; (declare-fun Epoch!val!1 () Epoch)
; (declare-fun Epoch!val!2 () Epoch)
; (declare-fun Epoch!val!3 () Epoch)
; (declare-fun Epoch!val!4 () Epoch)
; (declare-fun Epoch!val!5 () Epoch)
; (declare-fun Epoch!val!0 () Epoch)
; ;; cardinality constraint:
; (forall ((x Epoch))
;         (or (= x Epoch!val!1)
;             (= x Epoch!val!2)
;             (= x Epoch!val!3)
;             (= x Epoch!val!4)
;             (= x Epoch!val!5)
;             (= x Epoch!val!0)))
; ;; -----------
; (define-fun zero () Epoch
;   Epoch!val!5)
; (define-fun one () Epoch
;   Epoch!val!4)
; (define-fun le ((x!0 Epoch) (x!1 Epoch)) Bool
;   (or (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!5)
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!4) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!5) (not (= x!0 Epoch!val!4)) (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!0)
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!4))
;       (and (= x!0 Epoch!val!4)
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!0)
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!5)
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!3)
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (not (= x!1 Epoch!val!1))
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))
;       (and (= x!0 Epoch!val!3)
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4))
;            (= x!1 Epoch!val!1)
;            (not (= x!1 Epoch!val!3))
;            (not (= x!1 Epoch!val!0))
;            (not (= x!1 Epoch!val!5))
;            (not (= x!1 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (and (not (= x!0 Epoch!val!1))
;        (not (= x!0 Epoch!val!3))
;        (not (= x!0 Epoch!val!0))
;        (not (= x!0 Epoch!val!5))
;        (not (= x!0 Epoch!val!4))))
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   false)
; (define-fun held ((x!0 Node)) Bool
;   true)
; (define-fun transfer ((x!0 Epoch) (x!1 Node)) Bool
;   (or (and (= x!0 Epoch!val!1)
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4)))
;       (and (not (= x!0 Epoch!val!1))
;            (not (= x!0 Epoch!val!3))
;            (not (= x!0 Epoch!val!0))
;            (not (= x!0 Epoch!val!5))
;            (not (= x!0 Epoch!val!4)))))
; (define-fun ep ((x!0 Node)) Epoch
;   Epoch!val!2)
; (define-fun locked ((x!0 Epoch) (x!1 Node)) Bool
;   false)
(constraint (distinct (Node!val!0_m Model_26) ))
(constraint (distinct (Epoch!val!1_m Model_26)  (Epoch!val!2_m Model_26)  (Epoch!val!3_m Model_26)  (Epoch!val!4_m Model_26)  (Epoch!val!5_m Model_26)  (Epoch!val!0_m Model_26) ))
(constraint (let ((a!1 (and (= (zero_m Model_26) (Epoch!val!5_m Model_26))
                (= (one_m Model_26) (Epoch!val!4_m Model_26))
                (le_m Model_26
                      (Epoch!val!1_m Model_26)
                      (Epoch!val!1_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!1_m Model_26)
                           (Epoch!val!2_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!1_m Model_26)
                           (Epoch!val!3_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!1_m Model_26)
                           (Epoch!val!4_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!1_m Model_26)
                           (Epoch!val!5_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!1_m Model_26)
                           (Epoch!val!0_m Model_26)))
                (le_m Model_26
                      (Epoch!val!2_m Model_26)
                      (Epoch!val!1_m Model_26))
                (le_m Model_26
                      (Epoch!val!2_m Model_26)
                      (Epoch!val!2_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!2_m Model_26)
                           (Epoch!val!3_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!2_m Model_26)
                           (Epoch!val!4_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!2_m Model_26)
                           (Epoch!val!5_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!2_m Model_26)
                           (Epoch!val!0_m Model_26)))
                (le_m Model_26
                      (Epoch!val!3_m Model_26)
                      (Epoch!val!1_m Model_26))
                (le_m Model_26
                      (Epoch!val!3_m Model_26)
                      (Epoch!val!2_m Model_26))
                (le_m Model_26
                      (Epoch!val!3_m Model_26)
                      (Epoch!val!3_m Model_26))
                (le_m Model_26
                      (Epoch!val!3_m Model_26)
                      (Epoch!val!4_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!3_m Model_26)
                           (Epoch!val!5_m Model_26)))
                (le_m Model_26
                      (Epoch!val!3_m Model_26)
                      (Epoch!val!0_m Model_26))
                (le_m Model_26
                      (Epoch!val!4_m Model_26)
                      (Epoch!val!1_m Model_26))
                (le_m Model_26
                      (Epoch!val!4_m Model_26)
                      (Epoch!val!2_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!4_m Model_26)
                           (Epoch!val!3_m Model_26)))
                (le_m Model_26
                      (Epoch!val!4_m Model_26)
                      (Epoch!val!4_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!4_m Model_26)
                           (Epoch!val!5_m Model_26)))
                (le_m Model_26
                      (Epoch!val!4_m Model_26)
                      (Epoch!val!0_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!1_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!2_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!3_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!4_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!5_m Model_26))
                (le_m Model_26
                      (Epoch!val!5_m Model_26)
                      (Epoch!val!0_m Model_26))
                (le_m Model_26
                      (Epoch!val!0_m Model_26)
                      (Epoch!val!1_m Model_26))
                (le_m Model_26
                      (Epoch!val!0_m Model_26)
                      (Epoch!val!2_m Model_26))
                (not (le_m Model_26
                           (Epoch!val!0_m Model_26)
                           (Epoch!val!3_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!0_m Model_26)
                           (Epoch!val!4_m Model_26)))
                (not (le_m Model_26
                           (Epoch!val!0_m Model_26)
                           (Epoch!val!5_m Model_26)))
                (le_m Model_26
                      (Epoch!val!0_m Model_26)
                      (Epoch!val!0_m Model_26))
                (not (transfer_m Model_26
                                     (Epoch!val!1_m Model_26)
                                     (Node!val!0_m Model_26)))
                (transfer_m Model_26
                                (Epoch!val!2_m Model_26)
                                (Node!val!0_m Model_26))
                (not (transfer_m Model_26
                                     (Epoch!val!3_m Model_26)
                                     (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                     (Epoch!val!4_m Model_26)
                                     (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                     (Epoch!val!5_m Model_26)
                                     (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                     (Epoch!val!0_m Model_26)
                                     (Node!val!0_m Model_26)))
                (held_m Model_26 (Node!val!0_m Model_26))
                (= (ep_m Model_26 (Node!val!0_m Model_26))
                   (Epoch!val!2_m Model_26))
                (not (locked_m Model_26
                                   (Epoch!val!1_m Model_26)
                                   (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                   (Epoch!val!2_m Model_26)
                                   (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                   (Epoch!val!3_m Model_26)
                                   (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                   (Epoch!val!4_m Model_26)
                                   (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                   (Epoch!val!5_m Model_26)
                                   (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                   (Epoch!val!0_m Model_26)
                                   (Node!val!0_m Model_26)))))
      (a!2 (and (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!1_m Model_26))
                (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!2_m Model_26))
                (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!3_m Model_26))
                (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!4_m Model_26))
                (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!5_m Model_26))
                (inv Model_26
                     (Node!val!0_m Model_26)
                     (Node!val!0_m Model_26)
                     (Epoch!val!0_m Model_26))))
      (a!3 (and (= (ep_m Model_26 (Node!val!0_m Model_26))
                   (Epoch!val!2_m Model_26))
                (not (locked_m Model_26
                                    (Epoch!val!1_m Model_26)
                                    (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                    (Epoch!val!2_m Model_26)
                                    (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                    (Epoch!val!3_m Model_26)
                                    (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                    (Epoch!val!4_m Model_26)
                                    (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                    (Epoch!val!5_m Model_26)
                                    (Node!val!0_m Model_26)))
                (not (locked_m Model_26
                                    (Epoch!val!0_m Model_26)
                                    (Node!val!0_m Model_26)))
                (transfer_m Model_26
                                 (Epoch!val!1_m Model_26)
                                 (Node!val!0_m Model_26))
                (transfer_m Model_26
                                 (Epoch!val!2_m Model_26)
                                 (Node!val!0_m Model_26))
                (not (transfer_m Model_26
                                      (Epoch!val!3_m Model_26)
                                      (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                      (Epoch!val!4_m Model_26)
                                      (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                      (Epoch!val!5_m Model_26)
                                      (Node!val!0_m Model_26)))
                (not (transfer_m Model_26
                                      (Epoch!val!0_m Model_26)
                                      (Node!val!0_m Model_26)))
                (not (held_m Model_26 (Node!val!0_m Model_26))))))
  (or (and a!1 (not a!2)) (and (or a!1 a!3) a!2))))



(declare-fun DUMMYMODEL () ModelId)
(declare-fun N1 () Node)
(declare-fun N2 () Node)
(declare-fun E1 () Epoch)

(define-fun inv0 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (transfer_m m e1 n1) (le_m m (ep_m m n1) e1)))
(assert (not (= (inv0 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv1 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (locked_m m (ep_m m n2) n1) (le_m m e1 (ep_m m n1))))
(assert (not (= (inv1 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv2 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (not (transfer_m m e1 n2)))
(assert (not (= (inv2 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv3 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (locked_m m (ep_m m n1) n1) (le_m m e1 (ep_m m n1))))
(assert (not (= (inv3 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv4 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (transfer_m m (ep_m m n2) n1) (held_m m n1)))
(assert (not (= (inv4 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv5 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (or (held_m m n1) (le_m m (ep_m m n1) e1)))
(assert (not (= (inv5 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv6 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (transfer_m m (ep_m m n2) n1) (held_m m n2)))
(assert (not (= (inv6 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv7 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (transfer_m m (ep_m m n1) n2) (held_m m n1)))
(assert (not (= (inv7 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv8 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (transfer_m m (ep_m m n2) n2) (held_m m n2)))
(assert (not (= (inv8 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv9 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (locked_m m e1 n2) (le_m m (ep_m m n2) e1)))
(assert (not (= (inv9 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv10 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (not (transfer_m m (ep_m m n1) n2)))
(assert (not (= (inv10 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv11 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (=> (locked_m m e1 n2) (le_m m e1 (ep_m m n2))))
(assert (not (= (inv11 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv12 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (not (locked_m m e1 n2)))
(assert (not (= (inv12 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv13 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (not (locked_m m e1 n1)))
(assert (not (= (inv13 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(define-fun inv14 ((m ModelId) (n1 Node) (n2 Node) (e1 Epoch)) Bool (or (held_m m n2) (le_m m (ep_m m n2) e1)))
(assert (not (= (inv14 DUMMYMODEL N1 N2 E1) (inv DUMMYMODEL N1 N2 E1))))
(assert (not (= (inv DUMMYMODEL N1 N2 E1) true)))

(check-synth)
        